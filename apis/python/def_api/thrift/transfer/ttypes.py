#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class PeriodUnit(object):
    """
    PeriodUnit (based on Java TimeUnit enum)

    """
    SECONDS = 0
    MINUTES = 1
    HOURS = 2

    _VALUES_TO_NAMES = {
        0: "SECONDS",
        1: "MINUTES",
        2: "HOURS",
    }

    _NAMES_TO_VALUES = {
        "SECONDS": 0,
        "MINUTES": 1,
        "HOURS": 2,
    }


class LibraryType(object):
    SLAVE = 0
    MASTER = 1

    _VALUES_TO_NAMES = {
        0: "SLAVE",
        1: "MASTER",
    }

    _NAMES_TO_VALUES = {
        "SLAVE": 0,
        "MASTER": 1,
    }


class ExecutionState(object):
    SCHEDULED = 0
    RUN = 1
    SUCCESS = 2
    FAILED = 3

    _VALUES_TO_NAMES = {
        0: "SCHEDULED",
        1: "RUN",
        2: "SUCCESS",
        3: "FAILED",
    }

    _NAMES_TO_VALUES = {
        "SCHEDULED": 0,
        "RUN": 1,
        "SUCCESS": 2,
        "FAILED": 3,
    }


class RoutineType(object):
    OBJECTIVE = 0
    MAP = 1
    STORE = 2
    REDUCE = 3
    MASTER = 4

    _VALUES_TO_NAMES = {
        0: "OBJECTIVE",
        1: "MAP",
        2: "STORE",
        3: "REDUCE",
        4: "MASTER",
    }

    _NAMES_TO_VALUES = {
        "OBJECTIVE": 0,
        "MAP": 1,
        "STORE": 2,
        "REDUCE": 3,
        "MASTER": 4,
    }


class Language(object):
    JAVA = 0
    PYTHON = 1
    MATLAB = 2
    OCTAVE = 3
    CPP = 4
    CSHARP = 5

    _VALUES_TO_NAMES = {
        0: "JAVA",
        1: "PYTHON",
        2: "MATLAB",
        3: "OCTAVE",
        4: "CPP",
        5: "CSHARP",
    }

    _NAMES_TO_VALUES = {
        "JAVA": 0,
        "PYTHON": 1,
        "MATLAB": 2,
        "OCTAVE": 3,
        "CPP": 4,
        "CSHARP": 5,
    }


class CloudType(object):
    PUBLIC = 0
    COMMUNITY = 1
    PRIVATE = 2
    HYBRID = 3

    _VALUES_TO_NAMES = {
        0: "PUBLIC",
        1: "COMMUNITY",
        2: "PRIVATE",
        3: "HYBRID",
    }

    _NAMES_TO_VALUES = {
        "PUBLIC": 0,
        "COMMUNITY": 1,
        "PRIVATE": 2,
        "HYBRID": 3,
    }


class NodeType(object):
    WORKER = 0
    REDUCER = 1

    _VALUES_TO_NAMES = {
        0: "WORKER",
        1: "REDUCER",
    }

    _NAMES_TO_VALUES = {
        "WORKER": 0,
        "REDUCER": 1,
    }


class SortingCriterion(object):
    CREATION_DATE_FROM_NEWEST = 0
    CREATION_DATE_FROM_OLDEST = 1
    START_DATE_FROM_NEWEST = 2
    START_DATE_FROM_OLDEST = 3
    FINISH_DATE_FROM_NEWEST = 4
    FINISH_DATE_FROM_OLDEST = 5
    RUNTIME_FROM_LONGEST = 6
    RUNTIME_FROM_SHORTEST = 7
    NO_SORTING = 8

    _VALUES_TO_NAMES = {
        0: "CREATION_DATE_FROM_NEWEST",
        1: "CREATION_DATE_FROM_OLDEST",
        2: "START_DATE_FROM_NEWEST",
        3: "START_DATE_FROM_OLDEST",
        4: "FINISH_DATE_FROM_NEWEST",
        5: "FINISH_DATE_FROM_OLDEST",
        6: "RUNTIME_FROM_LONGEST",
        7: "RUNTIME_FROM_SHORTEST",
        8: "NO_SORTING",
    }

    _NAMES_TO_VALUES = {
        "CREATION_DATE_FROM_NEWEST": 0,
        "CREATION_DATE_FROM_OLDEST": 1,
        "START_DATE_FROM_NEWEST": 2,
        "START_DATE_FROM_OLDEST": 3,
        "FINISH_DATE_FROM_NEWEST": 4,
        "FINISH_DATE_FROM_OLDEST": 5,
        "RUNTIME_FROM_LONGEST": 6,
        "RUNTIME_FROM_SHORTEST": 7,
        "NO_SORTING": 8,
    }


class AuthDTO(object):
    """
    Attributes:
     - userId
     - token
    """


    def __init__(self, userId=None, token=None,):
        self.userId = userId
        self.token = token

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.token = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('AuthDTO')
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 1)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.token is not None:
            oprot.writeFieldBegin('token', TType.STRING, 2)
            oprot.writeString(self.token.encode('utf-8') if sys.version_info[0] == 2 else self.token)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class LibraryInfoDTO(object):
    """
    Attributes:
     - id
     - libraryType
     - storeDriver
     - storedRoutines
    """


    def __init__(self, id=None, libraryType=None, storeDriver=None, storedRoutines=None,):
        self.id = id
        self.libraryType = libraryType
        self.storeDriver = storeDriver
        self.storedRoutines = storedRoutines

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.libraryType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.storeDriver = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.SET:
                    self.storedRoutines = set()
                    (_etype3, _size0) = iprot.readSetBegin()
                    for _i4 in range(_size0):
                        _elem5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.storedRoutines.add(_elem5)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('LibraryInfoDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.libraryType is not None:
            oprot.writeFieldBegin('libraryType', TType.I32, 2)
            oprot.writeI32(self.libraryType)
            oprot.writeFieldEnd()
        if self.storeDriver is not None:
            oprot.writeFieldBegin('storeDriver', TType.STRING, 3)
            oprot.writeString(self.storeDriver.encode('utf-8') if sys.version_info[0] == 2 else self.storeDriver)
            oprot.writeFieldEnd()
        if self.storedRoutines is not None:
            oprot.writeFieldBegin('storedRoutines', TType.SET, 4)
            oprot.writeSetBegin(TType.STRING, len(self.storedRoutines))
            for iter6 in self.storedRoutines:
                oprot.writeString(iter6.encode('utf-8') if sys.version_info[0] == 2 else iter6)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TaskDTO(object):
    """
    Attributes:
     - id
     - jobId
     - programId
     - state
     - startTime
     - createTime
     - finishTime
     - objectiveRoutineId
     - mapRoutineId
     - inParameters
     - outParameters
     - messages
     - runtime
    """


    def __init__(self, id=None, jobId=None, programId=None, state=None, startTime=None, createTime=None, finishTime=None, objectiveRoutineId=None, mapRoutineId=None, inParameters=None, outParameters=None, messages=None, runtime=None,):
        self.id = id
        self.jobId = jobId
        self.programId = programId
        self.state = state
        self.startTime = startTime
        self.createTime = createTime
        self.finishTime = finishTime
        self.objectiveRoutineId = objectiveRoutineId
        self.mapRoutineId = mapRoutineId
        self.inParameters = inParameters
        self.outParameters = outParameters
        self.messages = messages
        self.runtime = runtime

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.jobId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.programId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I64:
                    self.finishTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.objectiveRoutineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.mapRoutineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.MAP:
                    self.inParameters = {}
                    (_ktype8, _vtype9, _size7) = iprot.readMapBegin()
                    for _i11 in range(_size7):
                        _key12 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val13 = ResourceDTO()
                        _val13.read(iprot)
                        self.inParameters[_key12] = _val13
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.outParameters = []
                    (_etype17, _size14) = iprot.readListBegin()
                    for _i18 in range(_size14):
                        _elem19 = ResourceDTO()
                        _elem19.read(iprot)
                        self.outParameters.append(_elem19)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.LIST:
                    self.messages = []
                    (_etype23, _size20) = iprot.readListBegin()
                    for _i24 in range(_size20):
                        _elem25 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.messages.append(_elem25)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.I64:
                    self.runtime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TaskDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.jobId is not None:
            oprot.writeFieldBegin('jobId', TType.STRING, 2)
            oprot.writeString(self.jobId.encode('utf-8') if sys.version_info[0] == 2 else self.jobId)
            oprot.writeFieldEnd()
        if self.programId is not None:
            oprot.writeFieldBegin('programId', TType.STRING, 3)
            oprot.writeString(self.programId.encode('utf-8') if sys.version_info[0] == 2 else self.programId)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 4)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 5)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 6)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.finishTime is not None:
            oprot.writeFieldBegin('finishTime', TType.I64, 7)
            oprot.writeI64(self.finishTime)
            oprot.writeFieldEnd()
        if self.objectiveRoutineId is not None:
            oprot.writeFieldBegin('objectiveRoutineId', TType.STRING, 8)
            oprot.writeString(self.objectiveRoutineId.encode('utf-8') if sys.version_info[0] == 2 else self.objectiveRoutineId)
            oprot.writeFieldEnd()
        if self.mapRoutineId is not None:
            oprot.writeFieldBegin('mapRoutineId', TType.STRING, 9)
            oprot.writeString(self.mapRoutineId.encode('utf-8') if sys.version_info[0] == 2 else self.mapRoutineId)
            oprot.writeFieldEnd()
        if self.inParameters is not None:
            oprot.writeFieldBegin('inParameters', TType.MAP, 10)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.inParameters))
            for kiter26, viter27 in self.inParameters.items():
                oprot.writeString(kiter26.encode('utf-8') if sys.version_info[0] == 2 else kiter26)
                viter27.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.outParameters is not None:
            oprot.writeFieldBegin('outParameters', TType.LIST, 11)
            oprot.writeListBegin(TType.STRUCT, len(self.outParameters))
            for iter28 in self.outParameters:
                iter28.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.messages is not None:
            oprot.writeFieldBegin('messages', TType.LIST, 12)
            oprot.writeListBegin(TType.STRING, len(self.messages))
            for iter29 in self.messages:
                oprot.writeString(iter29.encode('utf-8') if sys.version_info[0] == 2 else iter29)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.runtime is not None:
            oprot.writeFieldBegin('runtime', TType.I64, 13)
            oprot.writeI64(self.runtime)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class TagDTO(object):
    """
    Attributes:
     - id
     - description
    """


    def __init__(self, id=None, description=None,):
        self.id = id
        self.description = description

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('TagDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 2)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class JobDTO(object):
    """
    Attributes:
     - id
     - programId
     - state
     - createTime
     - startTime
     - finishTime
     - scheduledTasks
     - runningTasks
     - successfulTasks
     - failedTasks
     - mapRoutineId
     - reduceRoutineId
     - reducedResults
    """


    def __init__(self, id=None, programId=None, state=None, createTime=None, startTime=None, finishTime=None, scheduledTasks=None, runningTasks=None, successfulTasks=None, failedTasks=None, mapRoutineId=None, reduceRoutineId=None, reducedResults=None,):
        self.id = id
        self.programId = programId
        self.state = state
        self.createTime = createTime
        self.startTime = startTime
        self.finishTime = finishTime
        self.scheduledTasks = scheduledTasks
        self.runningTasks = runningTasks
        self.successfulTasks = successfulTasks
        self.failedTasks = failedTasks
        self.mapRoutineId = mapRoutineId
        self.reduceRoutineId = reduceRoutineId
        self.reducedResults = reducedResults

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.programId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.finishTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.scheduledTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.runningTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.successfulTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.I32:
                    self.failedTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.mapRoutineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 12:
                if ftype == TType.STRING:
                    self.reduceRoutineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 13:
                if ftype == TType.LIST:
                    self.reducedResults = []
                    (_etype33, _size30) = iprot.readListBegin()
                    for _i34 in range(_size30):
                        _elem35 = ResourceDTO()
                        _elem35.read(iprot)
                        self.reducedResults.append(_elem35)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('JobDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.programId is not None:
            oprot.writeFieldBegin('programId', TType.STRING, 2)
            oprot.writeString(self.programId.encode('utf-8') if sys.version_info[0] == 2 else self.programId)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 3)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 4)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 5)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.finishTime is not None:
            oprot.writeFieldBegin('finishTime', TType.I64, 6)
            oprot.writeI64(self.finishTime)
            oprot.writeFieldEnd()
        if self.scheduledTasks is not None:
            oprot.writeFieldBegin('scheduledTasks', TType.I32, 7)
            oprot.writeI32(self.scheduledTasks)
            oprot.writeFieldEnd()
        if self.runningTasks is not None:
            oprot.writeFieldBegin('runningTasks', TType.I32, 8)
            oprot.writeI32(self.runningTasks)
            oprot.writeFieldEnd()
        if self.successfulTasks is not None:
            oprot.writeFieldBegin('successfulTasks', TType.I32, 9)
            oprot.writeI32(self.successfulTasks)
            oprot.writeFieldEnd()
        if self.failedTasks is not None:
            oprot.writeFieldBegin('failedTasks', TType.I32, 10)
            oprot.writeI32(self.failedTasks)
            oprot.writeFieldEnd()
        if self.mapRoutineId is not None:
            oprot.writeFieldBegin('mapRoutineId', TType.STRING, 11)
            oprot.writeString(self.mapRoutineId.encode('utf-8') if sys.version_info[0] == 2 else self.mapRoutineId)
            oprot.writeFieldEnd()
        if self.reduceRoutineId is not None:
            oprot.writeFieldBegin('reduceRoutineId', TType.STRING, 12)
            oprot.writeString(self.reduceRoutineId.encode('utf-8') if sys.version_info[0] == 2 else self.reduceRoutineId)
            oprot.writeFieldEnd()
        if self.reducedResults is not None:
            oprot.writeFieldBegin('reducedResults', TType.LIST, 13)
            oprot.writeListBegin(TType.STRUCT, len(self.reducedResults))
            for iter36 in self.reducedResults:
                iter36.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ProgramDTO(object):
    """
    Attributes:
     - id
     - state
     - createTime
     - finishTime
     - masterLibraryRoutine
     - userId
     - name
     - description
     - nrOfJobs
    """


    def __init__(self, id=None, state=None, createTime=None, finishTime=None, masterLibraryRoutine=False, userId=None, name=None, description=None, nrOfJobs=None,):
        self.id = id
        self.state = state
        self.createTime = createTime
        self.finishTime = finishTime
        self.masterLibraryRoutine = masterLibraryRoutine
        self.userId = userId
        self.name = name
        self.description = description
        self.nrOfJobs = nrOfJobs

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.state = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.createTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I64:
                    self.finishTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.BOOL:
                    self.masterLibraryRoutine = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.userId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.I32:
                    self.nrOfJobs = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ProgramDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.state is not None:
            oprot.writeFieldBegin('state', TType.I32, 2)
            oprot.writeI32(self.state)
            oprot.writeFieldEnd()
        if self.createTime is not None:
            oprot.writeFieldBegin('createTime', TType.I64, 3)
            oprot.writeI64(self.createTime)
            oprot.writeFieldEnd()
        if self.finishTime is not None:
            oprot.writeFieldBegin('finishTime', TType.I64, 4)
            oprot.writeI64(self.finishTime)
            oprot.writeFieldEnd()
        if self.masterLibraryRoutine is not None:
            oprot.writeFieldBegin('masterLibraryRoutine', TType.BOOL, 5)
            oprot.writeBool(self.masterLibraryRoutine)
            oprot.writeFieldEnd()
        if self.userId is not None:
            oprot.writeFieldBegin('userId', TType.STRING, 6)
            oprot.writeString(self.userId.encode('utf-8') if sys.version_info[0] == 2 else self.userId)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 7)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 8)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.nrOfJobs is not None:
            oprot.writeFieldBegin('nrOfJobs', TType.I32, 9)
            oprot.writeI32(self.nrOfJobs)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class DataTypeDTO(object):
    """
    Attributes:
     - id
     - name
     - schema
    """


    def __init__(self, id=None, name=None, schema=None,):
        self.id = id
        self.name = name
        self.schema = schema

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.schema = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('DataTypeDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.schema is not None:
            oprot.writeFieldBegin('schema', TType.STRING, 3)
            oprot.writeString(self.schema.encode('utf-8') if sys.version_info[0] == 2 else self.schema)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ResourceDTO(object):
    """
    Attributes:
     - id
     - dataTypeId
     - data
     - url
     - key
    """


    def __init__(self, id=None, dataTypeId=None, data=None, url=None, key="DEFAULT",):
        self.id = id
        self.dataTypeId = dataTypeId
        self.data = data
        self.url = url
        self.key = key

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.dataTypeId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.key = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ResourceDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.dataTypeId is not None:
            oprot.writeFieldBegin('dataTypeId', TType.STRING, 3)
            oprot.writeString(self.dataTypeId.encode('utf-8') if sys.version_info[0] == 2 else self.dataTypeId)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 4)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 5)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        if self.key is not None:
            oprot.writeFieldBegin('key', TType.STRING, 6)
            oprot.writeString(self.key.encode('utf-8') if sys.version_info[0] == 2 else self.key)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoutineDTO(object):
    """
    Attributes:
     - id
     - privateRoutine
     - name
     - description
     - revision
     - type
     - language
     - inParameters
     - outParameter
     - routineBinaries
     - arguments
    """


    def __init__(self, id=None, privateRoutine=None, name=None, description=None, revision=None, type=None, language=None, inParameters=None, outParameter=None, routineBinaries=None, arguments=None,):
        self.id = id
        self.privateRoutine = privateRoutine
        self.name = name
        self.description = description
        self.revision = revision
        self.type = type
        self.language = language
        self.inParameters = inParameters
        self.outParameter = outParameter
        self.routineBinaries = routineBinaries
        self.arguments = arguments

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.privateRoutine = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I16:
                    self.revision = iprot.readI16()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.language = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.LIST:
                    self.inParameters = []
                    (_etype40, _size37) = iprot.readListBegin()
                    for _i41 in range(_size37):
                        _elem42 = FormalParameterDTO()
                        _elem42.read(iprot)
                        self.inParameters.append(_elem42)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRUCT:
                    self.outParameter = FormalParameterDTO()
                    self.outParameter.read(iprot)
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.SET:
                    self.routineBinaries = set()
                    (_etype46, _size43) = iprot.readSetBegin()
                    for _i47 in range(_size43):
                        _elem48 = RoutineBinaryDTO()
                        _elem48.read(iprot)
                        self.routineBinaries.add(_elem48)
                    iprot.readSetEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.LIST:
                    self.arguments = []
                    (_etype52, _size49) = iprot.readListBegin()
                    for _i53 in range(_size49):
                        _elem54 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.arguments.append(_elem54)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoutineDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.privateRoutine is not None:
            oprot.writeFieldBegin('privateRoutine', TType.BOOL, 2)
            oprot.writeBool(self.privateRoutine)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 3)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 4)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.revision is not None:
            oprot.writeFieldBegin('revision', TType.I16, 5)
            oprot.writeI16(self.revision)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 6)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.language is not None:
            oprot.writeFieldBegin('language', TType.I32, 7)
            oprot.writeI32(self.language)
            oprot.writeFieldEnd()
        if self.inParameters is not None:
            oprot.writeFieldBegin('inParameters', TType.LIST, 8)
            oprot.writeListBegin(TType.STRUCT, len(self.inParameters))
            for iter55 in self.inParameters:
                iter55.write(oprot)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.outParameter is not None:
            oprot.writeFieldBegin('outParameter', TType.STRUCT, 9)
            self.outParameter.write(oprot)
            oprot.writeFieldEnd()
        if self.routineBinaries is not None:
            oprot.writeFieldBegin('routineBinaries', TType.SET, 10)
            oprot.writeSetBegin(TType.STRUCT, len(self.routineBinaries))
            for iter56 in self.routineBinaries:
                iter56.write(oprot)
            oprot.writeSetEnd()
            oprot.writeFieldEnd()
        if self.arguments is not None:
            oprot.writeFieldBegin('arguments', TType.LIST, 11)
            oprot.writeListBegin(TType.STRING, len(self.arguments))
            for iter57 in self.arguments:
                oprot.writeString(iter57.encode('utf-8') if sys.version_info[0] == 2 else iter57)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class FormalParameterDTO(object):
    """
    Attributes:
     - id
     - name
     - description
     - dataType
    """


    def __init__(self, id=None, name=None, description=None, dataType=None,):
        self.id = id
        self.name = name
        self.description = description
        self.dataType = dataType

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.description = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRUCT:
                    self.dataType = DataTypeDTO()
                    self.dataType.read(iprot)
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('FormalParameterDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.description is not None:
            oprot.writeFieldBegin('description', TType.STRING, 3)
            oprot.writeString(self.description.encode('utf-8') if sys.version_info[0] == 2 else self.description)
            oprot.writeFieldEnd()
        if self.dataType is not None:
            oprot.writeFieldBegin('dataType', TType.STRUCT, 4)
            self.dataType.write(oprot)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoutineBinaryDTO(object):
    """
    Attributes:
     - id
     - md5
     - sizeInBytes
     - primary
     - data
     - url
    """


    def __init__(self, id=None, md5=None, sizeInBytes=None, primary=None, data=None, url=None,):
        self.id = id
        self.md5 = md5
        self.sizeInBytes = sizeInBytes
        self.primary = primary
        self.data = data
        self.url = url

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.md5 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I64:
                    self.sizeInBytes = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.BOOL:
                    self.primary = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.STRING:
                    self.data = iprot.readBinary()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.STRING:
                    self.url = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoutineBinaryDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.md5 is not None:
            oprot.writeFieldBegin('md5', TType.STRING, 2)
            oprot.writeString(self.md5.encode('utf-8') if sys.version_info[0] == 2 else self.md5)
            oprot.writeFieldEnd()
        if self.sizeInBytes is not None:
            oprot.writeFieldBegin('sizeInBytes', TType.I64, 3)
            oprot.writeI64(self.sizeInBytes)
            oprot.writeFieldEnd()
        if self.primary is not None:
            oprot.writeFieldBegin('primary', TType.BOOL, 4)
            oprot.writeBool(self.primary)
            oprot.writeFieldEnd()
        if self.data is not None:
            oprot.writeFieldBegin('data', TType.STRING, 5)
            oprot.writeBinary(self.data)
            oprot.writeFieldEnd()
        if self.url is not None:
            oprot.writeFieldBegin('url', TType.STRING, 6)
            oprot.writeString(self.url.encode('utf-8') if sys.version_info[0] == 2 else self.url)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class RoutineInstanceDTO(object):
    """
    Attributes:
     - routineId
     - inParameters
     - missingParameters
    """


    def __init__(self, routineId=None, inParameters=None, missingParameters=None,):
        self.routineId = routineId
        self.inParameters = inParameters
        self.missingParameters = missingParameters

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.routineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.MAP:
                    self.inParameters = {}
                    (_ktype59, _vtype60, _size58) = iprot.readMapBegin()
                    for _i62 in range(_size58):
                        _key63 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val64 = ResourceDTO()
                        _val64.read(iprot)
                        self.inParameters[_key63] = _val64
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.LIST:
                    self.missingParameters = []
                    (_etype68, _size65) = iprot.readListBegin()
                    for _i69 in range(_size65):
                        _elem70 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.missingParameters.append(_elem70)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('RoutineInstanceDTO')
        if self.routineId is not None:
            oprot.writeFieldBegin('routineId', TType.STRING, 1)
            oprot.writeString(self.routineId.encode('utf-8') if sys.version_info[0] == 2 else self.routineId)
            oprot.writeFieldEnd()
        if self.inParameters is not None:
            oprot.writeFieldBegin('inParameters', TType.MAP, 2)
            oprot.writeMapBegin(TType.STRING, TType.STRUCT, len(self.inParameters))
            for kiter71, viter72 in self.inParameters.items():
                oprot.writeString(kiter71.encode('utf-8') if sys.version_info[0] == 2 else kiter71)
                viter72.write(oprot)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.missingParameters is not None:
            oprot.writeFieldBegin('missingParameters', TType.LIST, 3)
            oprot.writeListBegin(TType.STRING, len(self.missingParameters))
            for iter73 in self.missingParameters:
                oprot.writeString(iter73.encode('utf-8') if sys.version_info[0] == 2 else iter73)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class NodeInfoDTO(object):
    """
    NodeInfo Data Transfer Object.
    Contains all relevant node information.

    Attributes:
     - id
     - clusterId
     - type
     - numberOfCores
     - load
     - timeStamp
     - parameters
     - host
    """


    def __init__(self, id=None, clusterId=None, type=None, numberOfCores=None, load=None, timeStamp=None, parameters=None, host=None,):
        self.id = id
        self.clusterId = clusterId
        self.type = type
        self.numberOfCores = numberOfCores
        self.load = load
        self.timeStamp = timeStamp
        self.parameters = parameters
        self.host = host

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.clusterId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.type = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.numberOfCores = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.DOUBLE:
                    self.load = iprot.readDouble()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.I64:
                    self.timeStamp = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.MAP:
                    self.parameters = {}
                    (_ktype75, _vtype76, _size74) = iprot.readMapBegin()
                    for _i78 in range(_size74):
                        _key79 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        _val80 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.parameters[_key79] = _val80
                    iprot.readMapEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('NodeInfoDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.clusterId is not None:
            oprot.writeFieldBegin('clusterId', TType.STRING, 2)
            oprot.writeString(self.clusterId.encode('utf-8') if sys.version_info[0] == 2 else self.clusterId)
            oprot.writeFieldEnd()
        if self.type is not None:
            oprot.writeFieldBegin('type', TType.I32, 3)
            oprot.writeI32(self.type)
            oprot.writeFieldEnd()
        if self.numberOfCores is not None:
            oprot.writeFieldBegin('numberOfCores', TType.I32, 4)
            oprot.writeI32(self.numberOfCores)
            oprot.writeFieldEnd()
        if self.load is not None:
            oprot.writeFieldBegin('load', TType.DOUBLE, 5)
            oprot.writeDouble(self.load)
            oprot.writeFieldEnd()
        if self.timeStamp is not None:
            oprot.writeFieldBegin('timeStamp', TType.I64, 6)
            oprot.writeI64(self.timeStamp)
            oprot.writeFieldEnd()
        if self.parameters is not None:
            oprot.writeFieldBegin('parameters', TType.MAP, 7)
            oprot.writeMapBegin(TType.STRING, TType.STRING, len(self.parameters))
            for kiter81, viter82 in self.parameters.items():
                oprot.writeString(kiter81.encode('utf-8') if sys.version_info[0] == 2 else kiter81)
                oprot.writeString(viter82.encode('utf-8') if sys.version_info[0] == 2 else viter82)
            oprot.writeMapEnd()
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 8)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class QueueInfoDTO(object):
    """
    QueueInfo Data Transfer Object.
    Contains all relevant queuePriorityWrapper information.

    Attributes:
     - id
     - released
     - numberOfTasks
    """


    def __init__(self, id=None, released=None, numberOfTasks=None,):
        self.id = id
        self.released = released
        self.numberOfTasks = numberOfTasks

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.BOOL:
                    self.released = iprot.readBool()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.numberOfTasks = iprot.readI32()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('QueueInfoDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.released is not None:
            oprot.writeFieldBegin('released', TType.BOOL, 2)
            oprot.writeBool(self.released)
            oprot.writeFieldEnd()
        if self.numberOfTasks is not None:
            oprot.writeFieldBegin('numberOfTasks', TType.I32, 3)
            oprot.writeI32(self.numberOfTasks)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)


class ClusterInfoDTO(object):
    """
    Attributes:
     - id
     - name
     - managerId
     - cloudType
     - startTime
     - activePrograms
     - numberOfWorkers
     - numberOfReducers
     - defaultMapRoutineId
     - storeRoutineId
     - host
    """


    def __init__(self, id=None, name=None, managerId=None, cloudType=None, startTime=None, activePrograms=None, numberOfWorkers=None, numberOfReducers=None, defaultMapRoutineId=None, storeRoutineId=None, host=None,):
        self.id = id
        self.name = name
        self.managerId = managerId
        self.cloudType = cloudType
        self.startTime = startTime
        self.activePrograms = activePrograms
        self.numberOfWorkers = numberOfWorkers
        self.numberOfReducers = numberOfReducers
        self.defaultMapRoutineId = defaultMapRoutineId
        self.storeRoutineId = storeRoutineId
        self.host = host

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.id = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.STRING:
                    self.name = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.STRING:
                    self.managerId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.I32:
                    self.cloudType = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 5:
                if ftype == TType.I64:
                    self.startTime = iprot.readI64()
                else:
                    iprot.skip(ftype)
            elif fid == 6:
                if ftype == TType.LIST:
                    self.activePrograms = []
                    (_etype86, _size83) = iprot.readListBegin()
                    for _i87 in range(_size83):
                        _elem88 = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                        self.activePrograms.append(_elem88)
                    iprot.readListEnd()
                else:
                    iprot.skip(ftype)
            elif fid == 7:
                if ftype == TType.I32:
                    self.numberOfWorkers = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 8:
                if ftype == TType.I32:
                    self.numberOfReducers = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 9:
                if ftype == TType.STRING:
                    self.defaultMapRoutineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 10:
                if ftype == TType.STRING:
                    self.storeRoutineId = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 11:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ClusterInfoDTO')
        if self.id is not None:
            oprot.writeFieldBegin('id', TType.STRING, 1)
            oprot.writeString(self.id.encode('utf-8') if sys.version_info[0] == 2 else self.id)
            oprot.writeFieldEnd()
        if self.name is not None:
            oprot.writeFieldBegin('name', TType.STRING, 2)
            oprot.writeString(self.name.encode('utf-8') if sys.version_info[0] == 2 else self.name)
            oprot.writeFieldEnd()
        if self.managerId is not None:
            oprot.writeFieldBegin('managerId', TType.STRING, 3)
            oprot.writeString(self.managerId.encode('utf-8') if sys.version_info[0] == 2 else self.managerId)
            oprot.writeFieldEnd()
        if self.cloudType is not None:
            oprot.writeFieldBegin('cloudType', TType.I32, 4)
            oprot.writeI32(self.cloudType)
            oprot.writeFieldEnd()
        if self.startTime is not None:
            oprot.writeFieldBegin('startTime', TType.I64, 5)
            oprot.writeI64(self.startTime)
            oprot.writeFieldEnd()
        if self.activePrograms is not None:
            oprot.writeFieldBegin('activePrograms', TType.LIST, 6)
            oprot.writeListBegin(TType.STRING, len(self.activePrograms))
            for iter89 in self.activePrograms:
                oprot.writeString(iter89.encode('utf-8') if sys.version_info[0] == 2 else iter89)
            oprot.writeListEnd()
            oprot.writeFieldEnd()
        if self.numberOfWorkers is not None:
            oprot.writeFieldBegin('numberOfWorkers', TType.I32, 7)
            oprot.writeI32(self.numberOfWorkers)
            oprot.writeFieldEnd()
        if self.numberOfReducers is not None:
            oprot.writeFieldBegin('numberOfReducers', TType.I32, 8)
            oprot.writeI32(self.numberOfReducers)
            oprot.writeFieldEnd()
        if self.defaultMapRoutineId is not None:
            oprot.writeFieldBegin('defaultMapRoutineId', TType.STRING, 9)
            oprot.writeString(self.defaultMapRoutineId.encode('utf-8') if sys.version_info[0] == 2 else self.defaultMapRoutineId)
            oprot.writeFieldEnd()
        if self.storeRoutineId is not None:
            oprot.writeFieldBegin('storeRoutineId', TType.STRING, 10)
            oprot.writeString(self.storeRoutineId.encode('utf-8') if sys.version_info[0] == 2 else self.storeRoutineId)
            oprot.writeFieldEnd()
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 11)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(AuthDTO)
AuthDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'userId', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'token', 'UTF8', None, ),  # 2
)
all_structs.append(LibraryInfoDTO)
LibraryInfoDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'libraryType', None, None, ),  # 2
    (3, TType.STRING, 'storeDriver', 'UTF8', None, ),  # 3
    (4, TType.SET, 'storedRoutines', (TType.STRING, 'UTF8', False), None, ),  # 4
)
all_structs.append(TaskDTO)
TaskDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'jobId', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'programId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'state', None, None, ),  # 4
    (5, TType.I64, 'startTime', None, None, ),  # 5
    (6, TType.I64, 'createTime', None, None, ),  # 6
    (7, TType.I64, 'finishTime', None, None, ),  # 7
    (8, TType.STRING, 'objectiveRoutineId', 'UTF8', None, ),  # 8
    (9, TType.STRING, 'mapRoutineId', 'UTF8', None, ),  # 9
    (10, TType.MAP, 'inParameters', (TType.STRING, 'UTF8', TType.STRUCT, [ResourceDTO, None], False), None, ),  # 10
    (11, TType.LIST, 'outParameters', (TType.STRUCT, [ResourceDTO, None], False), None, ),  # 11
    (12, TType.LIST, 'messages', (TType.STRING, 'UTF8', False), None, ),  # 12
    (13, TType.I64, 'runtime', None, None, ),  # 13
)
all_structs.append(TagDTO)
TagDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'description', 'UTF8', None, ),  # 2
)
all_structs.append(JobDTO)
JobDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'programId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'state', None, None, ),  # 3
    (4, TType.I64, 'createTime', None, None, ),  # 4
    (5, TType.I64, 'startTime', None, None, ),  # 5
    (6, TType.I64, 'finishTime', None, None, ),  # 6
    (7, TType.I32, 'scheduledTasks', None, None, ),  # 7
    (8, TType.I32, 'runningTasks', None, None, ),  # 8
    (9, TType.I32, 'successfulTasks', None, None, ),  # 9
    (10, TType.I32, 'failedTasks', None, None, ),  # 10
    (11, TType.STRING, 'mapRoutineId', 'UTF8', None, ),  # 11
    (12, TType.STRING, 'reduceRoutineId', 'UTF8', None, ),  # 12
    (13, TType.LIST, 'reducedResults', (TType.STRUCT, [ResourceDTO, None], False), None, ),  # 13
)
all_structs.append(ProgramDTO)
ProgramDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.I32, 'state', None, None, ),  # 2
    (3, TType.I64, 'createTime', None, None, ),  # 3
    (4, TType.I64, 'finishTime', None, None, ),  # 4
    (5, TType.BOOL, 'masterLibraryRoutine', None, False, ),  # 5
    (6, TType.STRING, 'userId', 'UTF8', None, ),  # 6
    (7, TType.STRING, 'name', 'UTF8', None, ),  # 7
    (8, TType.STRING, 'description', 'UTF8', None, ),  # 8
    (9, TType.I32, 'nrOfJobs', None, None, ),  # 9
)
all_structs.append(DataTypeDTO)
DataTypeDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'schema', 'UTF8', None, ),  # 3
)
all_structs.append(ResourceDTO)
ResourceDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    None,  # 2
    (3, TType.STRING, 'dataTypeId', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'data', 'BINARY', None, ),  # 4
    (5, TType.STRING, 'url', 'UTF8', None, ),  # 5
    (6, TType.STRING, 'key', 'UTF8', "DEFAULT", ),  # 6
)
all_structs.append(RoutineDTO)
RoutineDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'privateRoutine', None, None, ),  # 2
    (3, TType.STRING, 'name', 'UTF8', None, ),  # 3
    (4, TType.STRING, 'description', 'UTF8', None, ),  # 4
    (5, TType.I16, 'revision', None, None, ),  # 5
    (6, TType.I32, 'type', None, None, ),  # 6
    (7, TType.I32, 'language', None, None, ),  # 7
    (8, TType.LIST, 'inParameters', (TType.STRUCT, [FormalParameterDTO, None], False), None, ),  # 8
    (9, TType.STRUCT, 'outParameter', [FormalParameterDTO, None], None, ),  # 9
    (10, TType.SET, 'routineBinaries', (TType.STRUCT, [RoutineBinaryDTO, None], False), None, ),  # 10
    (11, TType.LIST, 'arguments', (TType.STRING, 'UTF8', False), None, ),  # 11
)
all_structs.append(FormalParameterDTO)
FormalParameterDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'description', 'UTF8', None, ),  # 3
    (4, TType.STRUCT, 'dataType', [DataTypeDTO, None], None, ),  # 4
)
all_structs.append(RoutineBinaryDTO)
RoutineBinaryDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'md5', 'UTF8', None, ),  # 2
    (3, TType.I64, 'sizeInBytes', None, None, ),  # 3
    (4, TType.BOOL, 'primary', None, None, ),  # 4
    (5, TType.STRING, 'data', 'BINARY', None, ),  # 5
    (6, TType.STRING, 'url', 'UTF8', None, ),  # 6
)
all_structs.append(RoutineInstanceDTO)
RoutineInstanceDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'routineId', 'UTF8', None, ),  # 1
    (2, TType.MAP, 'inParameters', (TType.STRING, 'UTF8', TType.STRUCT, [ResourceDTO, None], False), None, ),  # 2
    (3, TType.LIST, 'missingParameters', (TType.STRING, 'UTF8', False), None, ),  # 3
)
all_structs.append(NodeInfoDTO)
NodeInfoDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'clusterId', 'UTF8', None, ),  # 2
    (3, TType.I32, 'type', None, None, ),  # 3
    (4, TType.I32, 'numberOfCores', None, None, ),  # 4
    (5, TType.DOUBLE, 'load', None, None, ),  # 5
    (6, TType.I64, 'timeStamp', None, None, ),  # 6
    (7, TType.MAP, 'parameters', (TType.STRING, 'UTF8', TType.STRING, 'UTF8', False), None, ),  # 7
    (8, TType.STRING, 'host', 'UTF8', None, ),  # 8
)
all_structs.append(QueueInfoDTO)
QueueInfoDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.BOOL, 'released', None, None, ),  # 2
    (3, TType.I32, 'numberOfTasks', None, None, ),  # 3
)
all_structs.append(ClusterInfoDTO)
ClusterInfoDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'id', 'UTF8', None, ),  # 1
    (2, TType.STRING, 'name', 'UTF8', None, ),  # 2
    (3, TType.STRING, 'managerId', 'UTF8', None, ),  # 3
    (4, TType.I32, 'cloudType', None, None, ),  # 4
    (5, TType.I64, 'startTime', None, None, ),  # 5
    (6, TType.LIST, 'activePrograms', (TType.STRING, 'UTF8', False), None, ),  # 6
    (7, TType.I32, 'numberOfWorkers', None, None, ),  # 7
    (8, TType.I32, 'numberOfReducers', None, None, ),  # 8
    (9, TType.STRING, 'defaultMapRoutineId', 'UTF8', None, ),  # 9
    (10, TType.STRING, 'storeRoutineId', 'UTF8', None, ),  # 10
    (11, TType.STRING, 'host', 'UTF8', None, ),  # 11
)
fix_spec(all_structs)
del all_structs
