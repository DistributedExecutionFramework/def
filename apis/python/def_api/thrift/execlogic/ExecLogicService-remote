#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from def_api.thrift.execlogic import ExecLogicService
from def_api.thrift.execlogic.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('  TicketId getAllPrograms(Id userId)')
    print('  TicketId createProgram(Id clusterId, Id userId)')
    print('  TicketId getProgram(Id pId)')
    print('  TicketId deleteProgram(Id pId)')
    print('  TicketId abortProgram(Id pId)')
    print('  TicketId updateProgramName(Id pId, string name)')
    print('  TicketId updateProgramDescription(Id pId, string description)')
    print('  TicketId markProgramAsFinished(Id pId)')
    print('  TicketId startClientRoutine(Id pId, Id crId)')
    print('  TicketId getAllJobs(Id pId)')
    print('  TicketId createJob(Id pId)')
    print('  TicketId getJob(Id pId, Id jId)')
    print('  TicketId deleteJob(Id pId, Id jId)')
    print('  TicketId getAttachedMapRoutine(Id pId, Id jId)')
    print('  TicketId attachMapRoutine(Id pId, Id jId, Id mapRoutineId)')
    print('  TicketId getAttachedReduceRoutine(Id pId, Id jId)')
    print('  TicketId attachReduceRoutine(Id pId, Id jId, Id reduceRoutineId)')
    print('  TicketId getAllTasks(Id pId, Id jId, SortingCriterion sortingCriterion)')
    print('  TicketId getAllTasksWithState(Id pId, Id jId, ExecutionState state, SortingCriterion sortingCriterion)')
    print('  TicketId createTask(Id pId, Id jId, RoutineInstanceDTO objectiveRoutine)')
    print('  TicketId getTask(Id pId, Id jId, Id tId)')
    print('  TicketId getTaskPartial(Id pId, Id jId, Id tId, bool includeInParameters, bool includeOutParameters)')
    print('  TicketId markJobAsComplete(Id pId, Id jId)')
    print('  TicketId abortJob(Id pId, Id jId)')
    print('  TicketId abortTask(Id pId, Id jId, Id tId)')
    print('  TicketId reRunTask(Id pId, Id jId, Id tId)')
    print('  TicketId getAllSharedResources(Id pId)')
    print('  TicketId createSharedResource(Id pId, Id dataTypeId, string data)')
    print('  TicketId getSharedResource(Id pId, Id rId)')
    print('  TicketId deleteSharedResource(Id pId, Id rId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ExecLogicService.Client(protocol)
transport.open()

if cmd == 'getAllPrograms':
    if len(args) != 1:
        print('getAllPrograms requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllPrograms(eval(args[0]),))

elif cmd == 'createProgram':
    if len(args) != 2:
        print('createProgram requires 2 args')
        sys.exit(1)
    pp.pprint(client.createProgram(eval(args[0]), eval(args[1]),))

elif cmd == 'getProgram':
    if len(args) != 1:
        print('getProgram requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProgram(eval(args[0]),))

elif cmd == 'deleteProgram':
    if len(args) != 1:
        print('deleteProgram requires 1 args')
        sys.exit(1)
    pp.pprint(client.deleteProgram(eval(args[0]),))

elif cmd == 'abortProgram':
    if len(args) != 1:
        print('abortProgram requires 1 args')
        sys.exit(1)
    pp.pprint(client.abortProgram(eval(args[0]),))

elif cmd == 'updateProgramName':
    if len(args) != 2:
        print('updateProgramName requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateProgramName(eval(args[0]), args[1],))

elif cmd == 'updateProgramDescription':
    if len(args) != 2:
        print('updateProgramDescription requires 2 args')
        sys.exit(1)
    pp.pprint(client.updateProgramDescription(eval(args[0]), args[1],))

elif cmd == 'markProgramAsFinished':
    if len(args) != 1:
        print('markProgramAsFinished requires 1 args')
        sys.exit(1)
    pp.pprint(client.markProgramAsFinished(eval(args[0]),))

elif cmd == 'startClientRoutine':
    if len(args) != 2:
        print('startClientRoutine requires 2 args')
        sys.exit(1)
    pp.pprint(client.startClientRoutine(eval(args[0]), eval(args[1]),))

elif cmd == 'getAllJobs':
    if len(args) != 1:
        print('getAllJobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllJobs(eval(args[0]),))

elif cmd == 'createJob':
    if len(args) != 1:
        print('createJob requires 1 args')
        sys.exit(1)
    pp.pprint(client.createJob(eval(args[0]),))

elif cmd == 'getJob':
    if len(args) != 2:
        print('getJob requires 2 args')
        sys.exit(1)
    pp.pprint(client.getJob(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteJob':
    if len(args) != 2:
        print('deleteJob requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteJob(eval(args[0]), eval(args[1]),))

elif cmd == 'getAttachedMapRoutine':
    if len(args) != 2:
        print('getAttachedMapRoutine requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAttachedMapRoutine(eval(args[0]), eval(args[1]),))

elif cmd == 'attachMapRoutine':
    if len(args) != 3:
        print('attachMapRoutine requires 3 args')
        sys.exit(1)
    pp.pprint(client.attachMapRoutine(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAttachedReduceRoutine':
    if len(args) != 2:
        print('getAttachedReduceRoutine requires 2 args')
        sys.exit(1)
    pp.pprint(client.getAttachedReduceRoutine(eval(args[0]), eval(args[1]),))

elif cmd == 'attachReduceRoutine':
    if len(args) != 3:
        print('attachReduceRoutine requires 3 args')
        sys.exit(1)
    pp.pprint(client.attachReduceRoutine(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllTasks':
    if len(args) != 3:
        print('getAllTasks requires 3 args')
        sys.exit(1)
    pp.pprint(client.getAllTasks(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllTasksWithState':
    if len(args) != 4:
        print('getAllTasksWithState requires 4 args')
        sys.exit(1)
    pp.pprint(client.getAllTasksWithState(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]),))

elif cmd == 'createTask':
    if len(args) != 3:
        print('createTask requires 3 args')
        sys.exit(1)
    pp.pprint(client.createTask(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getTask':
    if len(args) != 3:
        print('getTask requires 3 args')
        sys.exit(1)
    pp.pprint(client.getTask(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getTaskPartial':
    if len(args) != 5:
        print('getTaskPartial requires 5 args')
        sys.exit(1)
    pp.pprint(client.getTaskPartial(eval(args[0]), eval(args[1]), eval(args[2]), eval(args[3]), eval(args[4]),))

elif cmd == 'markJobAsComplete':
    if len(args) != 2:
        print('markJobAsComplete requires 2 args')
        sys.exit(1)
    pp.pprint(client.markJobAsComplete(eval(args[0]), eval(args[1]),))

elif cmd == 'abortJob':
    if len(args) != 2:
        print('abortJob requires 2 args')
        sys.exit(1)
    pp.pprint(client.abortJob(eval(args[0]), eval(args[1]),))

elif cmd == 'abortTask':
    if len(args) != 3:
        print('abortTask requires 3 args')
        sys.exit(1)
    pp.pprint(client.abortTask(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'reRunTask':
    if len(args) != 3:
        print('reRunTask requires 3 args')
        sys.exit(1)
    pp.pprint(client.reRunTask(eval(args[0]), eval(args[1]), eval(args[2]),))

elif cmd == 'getAllSharedResources':
    if len(args) != 1:
        print('getAllSharedResources requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllSharedResources(eval(args[0]),))

elif cmd == 'createSharedResource':
    if len(args) != 3:
        print('createSharedResource requires 3 args')
        sys.exit(1)
    pp.pprint(client.createSharedResource(eval(args[0]), eval(args[1]), args[2],))

elif cmd == 'getSharedResource':
    if len(args) != 2:
        print('getSharedResource requires 2 args')
        sys.exit(1)
    pp.pprint(client.getSharedResource(eval(args[0]), eval(args[1]),))

elif cmd == 'deleteSharedResource':
    if len(args) != 2:
        print('deleteSharedResource requires 2 args')
        sys.exit(1)
    pp.pprint(client.deleteSharedResource(eval(args[0]), eval(args[1]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
