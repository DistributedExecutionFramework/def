#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
if sys.version_info[0] > 2:
    from urllib.parse import urlparse
else:
    from urlparse import urlparse
from thrift.transport import TTransport, TSocket, TSSLSocket, THttpClient
from thrift.protocol.TBinaryProtocol import TBinaryProtocol

from def_api.thrift.execlogic import ExecLogicResponseService
from def_api.thrift.execlogic.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
    print('')
    print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] [-novalidate] [-ca_certs certs] [-keyfile keyfile] [-certfile certfile] function [arg1 [arg2...]]')
    print('')
    print('Functions:')
    print('   getAllPrograms(TicketId ticketId)')
    print('  Id createProgram(TicketId ticketId)')
    print('  ProgramDTO getProgram(TicketId ticketId)')
    print('   getAllJobs(TicketId ticketId)')
    print('  Id createJob(TicketId ticketId)')
    print('  JobDTO getJob(TicketId ticketId)')
    print('  Id getAttachedMapRoutine(TicketId ticketId)')
    print('  Id getAttachedReduceRoutine(TicketId ticketId)')
    print('   getAllTasks(TicketId ticketId)')
    print('   getAllTasksWithState(TicketId ticketId)')
    print('  Id createTask(TicketId ticketId)')
    print('  TaskDTO getTask(TicketId ticketId)')
    print('  TaskDTO getTaskPartial(TicketId ticketId)')
    print('   getAllSharedResources(TicketId ticketId)')
    print('  Id createSharedResource(TicketId ticketId)')
    print('  ResourceDTO getSharedResource(TicketId ticketId)')
    print('')
    sys.exit(0)

pp = pprint.PrettyPrinter(indent=2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
validate = True
ca_certs = None
keyfile = None
certfile = None
http = False
argi = 1

if sys.argv[argi] == '-h':
    parts = sys.argv[argi + 1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    argi += 2

if sys.argv[argi] == '-u':
    url = urlparse(sys.argv[argi + 1])
    parts = url[1].split(':')
    host = parts[0]
    if len(parts) > 1:
        port = int(parts[1])
    else:
        port = 80
    uri = url[2]
    if url[4]:
        uri += '?%s' % url[4]
    http = True
    argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
    framed = True
    argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
    ssl = True
    argi += 1

if sys.argv[argi] == '-novalidate':
    validate = False
    argi += 1

if sys.argv[argi] == '-ca_certs':
    ca_certs = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-keyfile':
    keyfile = sys.argv[argi+1]
    argi += 2

if sys.argv[argi] == '-certfile':
    certfile = sys.argv[argi+1]
    argi += 2

cmd = sys.argv[argi]
args = sys.argv[argi + 1:]

if http:
    transport = THttpClient.THttpClient(host, port, uri)
else:
    if ssl:
        socket = TSSLSocket.TSSLSocket(host, port, validate=validate, ca_certs=ca_certs, keyfile=keyfile, certfile=certfile)
    else:
        socket = TSocket.TSocket(host, port)
    if framed:
        transport = TTransport.TFramedTransport(socket)
    else:
        transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol(transport)
client = ExecLogicResponseService.Client(protocol)
transport.open()

if cmd == 'getAllPrograms':
    if len(args) != 1:
        print('getAllPrograms requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllPrograms(eval(args[0]),))

elif cmd == 'createProgram':
    if len(args) != 1:
        print('createProgram requires 1 args')
        sys.exit(1)
    pp.pprint(client.createProgram(eval(args[0]),))

elif cmd == 'getProgram':
    if len(args) != 1:
        print('getProgram requires 1 args')
        sys.exit(1)
    pp.pprint(client.getProgram(eval(args[0]),))

elif cmd == 'getAllJobs':
    if len(args) != 1:
        print('getAllJobs requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllJobs(eval(args[0]),))

elif cmd == 'createJob':
    if len(args) != 1:
        print('createJob requires 1 args')
        sys.exit(1)
    pp.pprint(client.createJob(eval(args[0]),))

elif cmd == 'getJob':
    if len(args) != 1:
        print('getJob requires 1 args')
        sys.exit(1)
    pp.pprint(client.getJob(eval(args[0]),))

elif cmd == 'getAttachedMapRoutine':
    if len(args) != 1:
        print('getAttachedMapRoutine requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAttachedMapRoutine(eval(args[0]),))

elif cmd == 'getAttachedReduceRoutine':
    if len(args) != 1:
        print('getAttachedReduceRoutine requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAttachedReduceRoutine(eval(args[0]),))

elif cmd == 'getAllTasks':
    if len(args) != 1:
        print('getAllTasks requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllTasks(eval(args[0]),))

elif cmd == 'getAllTasksWithState':
    if len(args) != 1:
        print('getAllTasksWithState requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllTasksWithState(eval(args[0]),))

elif cmd == 'createTask':
    if len(args) != 1:
        print('createTask requires 1 args')
        sys.exit(1)
    pp.pprint(client.createTask(eval(args[0]),))

elif cmd == 'getTask':
    if len(args) != 1:
        print('getTask requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTask(eval(args[0]),))

elif cmd == 'getTaskPartial':
    if len(args) != 1:
        print('getTaskPartial requires 1 args')
        sys.exit(1)
    pp.pprint(client.getTaskPartial(eval(args[0]),))

elif cmd == 'getAllSharedResources':
    if len(args) != 1:
        print('getAllSharedResources requires 1 args')
        sys.exit(1)
    pp.pprint(client.getAllSharedResources(eval(args[0]),))

elif cmd == 'createSharedResource':
    if len(args) != 1:
        print('createSharedResource requires 1 args')
        sys.exit(1)
    pp.pprint(client.createSharedResource(eval(args[0]),))

elif cmd == 'getSharedResource':
    if len(args) != 1:
        print('getSharedResource requires 1 args')
        sys.exit(1)
    pp.pprint(client.getSharedResource(eval(args[0]),))

else:
    print('Unrecognized method %s' % cmd)
    sys.exit(1)

transport.close()
