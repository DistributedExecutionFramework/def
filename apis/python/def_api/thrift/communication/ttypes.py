#
# Autogenerated by Thrift Compiler (0.11.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TFrozenDict, TException, TApplicationException
from thrift.protocol.TProtocol import TProtocolException
from thrift.TRecursive import fix_spec

import sys

from thrift.transport import TTransport
all_structs = []


class TicketStatusDTO(object):
    UNKNOWN = 0
    IN_PROGRESS = 1
    CANCELED = 2
    DONE = 3
    FAILED = 4

    _VALUES_TO_NAMES = {
        0: "UNKNOWN",
        1: "IN_PROGRESS",
        2: "CANCELED",
        3: "DONE",
        4: "FAILED",
    }

    _NAMES_TO_VALUES = {
        "UNKNOWN": 0,
        "IN_PROGRESS": 1,
        "CANCELED": 2,
        "DONE": 3,
        "FAILED": 4,
    }


class TicketTypeDTO(object):
    LOGIC = 0
    SERVICE = 1

    _VALUES_TO_NAMES = {
        0: "LOGIC",
        1: "SERVICE",
    }

    _NAMES_TO_VALUES = {
        "LOGIC": 0,
        "SERVICE": 1,
    }


class Protocol(object):
    DIRECT = 0
    REST = 1
    THRIFT_TCP = 2
    THRIFT_HTTP = 3

    _VALUES_TO_NAMES = {
        0: "DIRECT",
        1: "REST",
        2: "THRIFT_TCP",
        3: "THRIFT_HTTP",
    }

    _NAMES_TO_VALUES = {
        "DIRECT": 0,
        "REST": 1,
        "THRIFT_TCP": 2,
        "THRIFT_HTTP": 3,
    }


class ServiceEndpointDTO(object):
    """
    Attributes:
     - host
     - port
     - protocol
     - pathPrefix
    """


    def __init__(self, host=None, port=None, protocol=None, pathPrefix="/*",):
        self.host = host
        self.port = port
        self.protocol = protocol
        self.pathPrefix = pathPrefix

    def read(self, iprot):
        if iprot._fast_decode is not None and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None:
            iprot._fast_decode(self, iprot, [self.__class__, self.thrift_spec])
            return
        iprot.readStructBegin()
        while True:
            (fname, ftype, fid) = iprot.readFieldBegin()
            if ftype == TType.STOP:
                break
            if fid == 1:
                if ftype == TType.STRING:
                    self.host = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            elif fid == 2:
                if ftype == TType.I32:
                    self.port = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 3:
                if ftype == TType.I32:
                    self.protocol = iprot.readI32()
                else:
                    iprot.skip(ftype)
            elif fid == 4:
                if ftype == TType.STRING:
                    self.pathPrefix = iprot.readString().decode('utf-8') if sys.version_info[0] == 2 else iprot.readString()
                else:
                    iprot.skip(ftype)
            else:
                iprot.skip(ftype)
            iprot.readFieldEnd()
        iprot.readStructEnd()

    def write(self, oprot):
        if oprot._fast_encode is not None and self.thrift_spec is not None:
            oprot.trans.write(oprot._fast_encode(self, [self.__class__, self.thrift_spec]))
            return
        oprot.writeStructBegin('ServiceEndpointDTO')
        if self.host is not None:
            oprot.writeFieldBegin('host', TType.STRING, 1)
            oprot.writeString(self.host.encode('utf-8') if sys.version_info[0] == 2 else self.host)
            oprot.writeFieldEnd()
        if self.port is not None:
            oprot.writeFieldBegin('port', TType.I32, 2)
            oprot.writeI32(self.port)
            oprot.writeFieldEnd()
        if self.protocol is not None:
            oprot.writeFieldBegin('protocol', TType.I32, 3)
            oprot.writeI32(self.protocol)
            oprot.writeFieldEnd()
        if self.pathPrefix is not None:
            oprot.writeFieldBegin('pathPrefix', TType.STRING, 4)
            oprot.writeString(self.pathPrefix.encode('utf-8') if sys.version_info[0] == 2 else self.pathPrefix)
            oprot.writeFieldEnd()
        oprot.writeFieldStop()
        oprot.writeStructEnd()

    def validate(self):
        return

    def __repr__(self):
        L = ['%s=%r' % (key, value)
             for key, value in self.__dict__.items()]
        return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

    def __eq__(self, other):
        return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

    def __ne__(self, other):
        return not (self == other)
all_structs.append(ServiceEndpointDTO)
ServiceEndpointDTO.thrift_spec = (
    None,  # 0
    (1, TType.STRING, 'host', 'UTF8', None, ),  # 1
    (2, TType.I32, 'port', None, None, ),  # 2
    (3, TType.I32, 'protocol', None, None, ),  # 3
    (4, TType.STRING, 'pathPrefix', 'UTF8', "/*", ),  # 4
)
fix_spec(all_structs)
del all_structs
