/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ManagerService {
  /// <summary>
  /// Manager specific service interface.
  /// DTOs logic for creating programs, jobs and tasks will be found in ExecLogicService interface.
  /// </summary>
  public interface ISync {
    /// <summary>
    /// Requests a list with Cluster ids that were bound to registry.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    string getClusterIds();
    /// <summary>
    /// Reqeusts information about the given cluster.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="cId"></param>
    string getClusterInfo(string cId);
    /// <summary>
    /// Requests ServiceEnpoint description for the given cluster id.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cId"></param>
    string getClusterEndpoint(string cId);
    /// <summary>
    /// Create a new cluster in the AWS environment with an initial worker and reducer pools size with the given AWS specification.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="numberOfWorkers"></param>
    /// <param name="numberOfReducers"></param>
    /// <param name="awsSpecification"></param>
    string createAWSCluster(int numberOfWorkers, int numberOfReducers, AWSSpecificationDTO awsSpecification);
    /// <summary>
    /// Adds an existing cluster to this manager.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="endpoint"></param>
    string addCluster(ServiceEndpointDTO endpoint);
    /// <summary>
    /// Destroy the given cluster.
    /// This means all machines (cluster controller and workers) will be turned off.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="cId"></param>
    string destroyCluster(string cId);
    /// <summary>
    /// Adjusts the pool size of the given NodeType in the cluster with the given id.
    /// Returns a ticket id, state of ticket is availabe over TicketService interface.
    /// 
    /// </summary>
    /// <param name="cId"></param>
    /// <param name="newNodePoolSize"></param>
    /// <param name="nodeType"></param>
    string adjustNodePoolSize(string cId, int newNodePoolSize, NodeType nodeType);
    /// <summary>
    /// Create a new ClientRoutine
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="routine"></param>
    string createClientRoutine(RoutineDTO routine);
    /// <summary>
    /// Upload binary/executable for a ClientRoutine
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="rcId"></param>
    /// <param name="binaryName"></param>
    /// <param name="isPrimary"></param>
    /// <param name="data"></param>
    string uploadClientRoutineBinary(string rcId, string binaryName, bool isPrimary, byte[] data);
    /// <summary>
    /// Delete a ClientRoutine.
    /// Returns a ticket id, state of ticket is available over TicketService interface.
    /// 
    /// </summary>
    /// <param name="rcId"></param>
    string removeClientRoutine(string rcId);
    /// <summary>
    /// Fetches a feature by name and version.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="version"></param>
    string getFeatureByNameAndVersion(string name, string version);
  }

  /// <summary>
  /// Manager specific service interface.
  /// DTOs logic for creating programs, jobs and tasks will be found in ExecLogicService interface.
  /// </summary>
  public interface Iface : ISync {
    /// <summary>
    /// Requests a list with Cluster ids that were bound to registry.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    #if SILVERLIGHT
    IAsyncResult Begin_getClusterIds(AsyncCallback callback, object state);
    string End_getClusterIds(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Reqeusts information about the given cluster.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="cId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getClusterInfo(AsyncCallback callback, object state, string cId);
    string End_getClusterInfo(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Requests ServiceEnpoint description for the given cluster id.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getClusterEndpoint(AsyncCallback callback, object state, string cId);
    string End_getClusterEndpoint(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Create a new cluster in the AWS environment with an initial worker and reducer pools size with the given AWS specification.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="numberOfWorkers"></param>
    /// <param name="numberOfReducers"></param>
    /// <param name="awsSpecification"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createAWSCluster(AsyncCallback callback, object state, int numberOfWorkers, int numberOfReducers, AWSSpecificationDTO awsSpecification);
    string End_createAWSCluster(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Adds an existing cluster to this manager.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="endpoint"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_addCluster(AsyncCallback callback, object state, ServiceEndpointDTO endpoint);
    string End_addCluster(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Destroy the given cluster.
    /// This means all machines (cluster controller and workers) will be turned off.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="cId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_destroyCluster(AsyncCallback callback, object state, string cId);
    string End_destroyCluster(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Adjusts the pool size of the given NodeType in the cluster with the given id.
    /// Returns a ticket id, state of ticket is availabe over TicketService interface.
    /// 
    /// </summary>
    /// <param name="cId"></param>
    /// <param name="newNodePoolSize"></param>
    /// <param name="nodeType"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_adjustNodePoolSize(AsyncCallback callback, object state, string cId, int newNodePoolSize, NodeType nodeType);
    string End_adjustNodePoolSize(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Create a new ClientRoutine
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="routine"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createClientRoutine(AsyncCallback callback, object state, RoutineDTO routine);
    string End_createClientRoutine(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Upload binary/executable for a ClientRoutine
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="rcId"></param>
    /// <param name="binaryName"></param>
    /// <param name="isPrimary"></param>
    /// <param name="data"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_uploadClientRoutineBinary(AsyncCallback callback, object state, string rcId, string binaryName, bool isPrimary, byte[] data);
    string End_uploadClientRoutineBinary(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Delete a ClientRoutine.
    /// Returns a ticket id, state of ticket is available over TicketService interface.
    /// 
    /// </summary>
    /// <param name="rcId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_removeClientRoutine(AsyncCallback callback, object state, string rcId);
    string End_removeClientRoutine(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Fetches a feature by name and version.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="version"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getFeatureByNameAndVersion(AsyncCallback callback, object state, string name, string version);
    string End_getFeatureByNameAndVersion(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// Manager specific service interface.
  /// DTOs logic for creating programs, jobs and tasks will be found in ExecLogicService interface.
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_getClusterIds(AsyncCallback callback, object state)
    {
      return send_getClusterIds(callback, state);
    }

    public string End_getClusterIds(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getClusterIds();
    }

    #endif

    /// <summary>
    /// Requests a list with Cluster ids that were bound to registry.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    public string getClusterIds()
    {
      #if !SILVERLIGHT
      send_getClusterIds();
      return recv_getClusterIds();

      #else
      var asyncResult = Begin_getClusterIds(null, null);
      return End_getClusterIds(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getClusterIds(AsyncCallback callback, object state)
    #else
    public void send_getClusterIds()
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getClusterIds", TMessageType.Call, seqid_));
      getClusterIds_args args = new getClusterIds_args();
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getClusterIds()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getClusterIds_result result = new getClusterIds_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterIds failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getClusterInfo(AsyncCallback callback, object state, string cId)
    {
      return send_getClusterInfo(callback, state, cId);
    }

    public string End_getClusterInfo(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getClusterInfo();
    }

    #endif

    /// <summary>
    /// Reqeusts information about the given cluster.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="cId"></param>
    public string getClusterInfo(string cId)
    {
      #if !SILVERLIGHT
      send_getClusterInfo(cId);
      return recv_getClusterInfo();

      #else
      var asyncResult = Begin_getClusterInfo(null, null, cId);
      return End_getClusterInfo(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getClusterInfo(AsyncCallback callback, object state, string cId)
    #else
    public void send_getClusterInfo(string cId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Call, seqid_));
      getClusterInfo_args args = new getClusterInfo_args();
      args.CId = cId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getClusterInfo()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getClusterInfo_result result = new getClusterInfo_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterInfo failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getClusterEndpoint(AsyncCallback callback, object state, string cId)
    {
      return send_getClusterEndpoint(callback, state, cId);
    }

    public string End_getClusterEndpoint(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getClusterEndpoint();
    }

    #endif

    /// <summary>
    /// Requests ServiceEnpoint description for the given cluster id.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cId"></param>
    public string getClusterEndpoint(string cId)
    {
      #if !SILVERLIGHT
      send_getClusterEndpoint(cId);
      return recv_getClusterEndpoint();

      #else
      var asyncResult = Begin_getClusterEndpoint(null, null, cId);
      return End_getClusterEndpoint(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getClusterEndpoint(AsyncCallback callback, object state, string cId)
    #else
    public void send_getClusterEndpoint(string cId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getClusterEndpoint", TMessageType.Call, seqid_));
      getClusterEndpoint_args args = new getClusterEndpoint_args();
      args.CId = cId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getClusterEndpoint()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getClusterEndpoint_result result = new getClusterEndpoint_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getClusterEndpoint failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createAWSCluster(AsyncCallback callback, object state, int numberOfWorkers, int numberOfReducers, AWSSpecificationDTO awsSpecification)
    {
      return send_createAWSCluster(callback, state, numberOfWorkers, numberOfReducers, awsSpecification);
    }

    public string End_createAWSCluster(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createAWSCluster();
    }

    #endif

    /// <summary>
    /// Create a new cluster in the AWS environment with an initial worker and reducer pools size with the given AWS specification.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="numberOfWorkers"></param>
    /// <param name="numberOfReducers"></param>
    /// <param name="awsSpecification"></param>
    public string createAWSCluster(int numberOfWorkers, int numberOfReducers, AWSSpecificationDTO awsSpecification)
    {
      #if !SILVERLIGHT
      send_createAWSCluster(numberOfWorkers, numberOfReducers, awsSpecification);
      return recv_createAWSCluster();

      #else
      var asyncResult = Begin_createAWSCluster(null, null, numberOfWorkers, numberOfReducers, awsSpecification);
      return End_createAWSCluster(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createAWSCluster(AsyncCallback callback, object state, int numberOfWorkers, int numberOfReducers, AWSSpecificationDTO awsSpecification)
    #else
    public void send_createAWSCluster(int numberOfWorkers, int numberOfReducers, AWSSpecificationDTO awsSpecification)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createAWSCluster", TMessageType.Call, seqid_));
      createAWSCluster_args args = new createAWSCluster_args();
      args.NumberOfWorkers = numberOfWorkers;
      args.NumberOfReducers = numberOfReducers;
      args.AwsSpecification = awsSpecification;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createAWSCluster()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createAWSCluster_result result = new createAWSCluster_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createAWSCluster failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addCluster(AsyncCallback callback, object state, ServiceEndpointDTO endpoint)
    {
      return send_addCluster(callback, state, endpoint);
    }

    public string End_addCluster(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addCluster();
    }

    #endif

    /// <summary>
    /// Adds an existing cluster to this manager.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="endpoint"></param>
    public string addCluster(ServiceEndpointDTO endpoint)
    {
      #if !SILVERLIGHT
      send_addCluster(endpoint);
      return recv_addCluster();

      #else
      var asyncResult = Begin_addCluster(null, null, endpoint);
      return End_addCluster(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addCluster(AsyncCallback callback, object state, ServiceEndpointDTO endpoint)
    #else
    public void send_addCluster(ServiceEndpointDTO endpoint)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addCluster", TMessageType.Call, seqid_));
      addCluster_args args = new addCluster_args();
      args.Endpoint = endpoint;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_addCluster()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addCluster_result result = new addCluster_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addCluster failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_destroyCluster(AsyncCallback callback, object state, string cId)
    {
      return send_destroyCluster(callback, state, cId);
    }

    public string End_destroyCluster(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_destroyCluster();
    }

    #endif

    /// <summary>
    /// Destroy the given cluster.
    /// This means all machines (cluster controller and workers) will be turned off.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="cId"></param>
    public string destroyCluster(string cId)
    {
      #if !SILVERLIGHT
      send_destroyCluster(cId);
      return recv_destroyCluster();

      #else
      var asyncResult = Begin_destroyCluster(null, null, cId);
      return End_destroyCluster(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_destroyCluster(AsyncCallback callback, object state, string cId)
    #else
    public void send_destroyCluster(string cId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("destroyCluster", TMessageType.Call, seqid_));
      destroyCluster_args args = new destroyCluster_args();
      args.CId = cId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_destroyCluster()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      destroyCluster_result result = new destroyCluster_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "destroyCluster failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_adjustNodePoolSize(AsyncCallback callback, object state, string cId, int newNodePoolSize, NodeType nodeType)
    {
      return send_adjustNodePoolSize(callback, state, cId, newNodePoolSize, nodeType);
    }

    public string End_adjustNodePoolSize(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_adjustNodePoolSize();
    }

    #endif

    /// <summary>
    /// Adjusts the pool size of the given NodeType in the cluster with the given id.
    /// Returns a ticket id, state of ticket is availabe over TicketService interface.
    /// 
    /// </summary>
    /// <param name="cId"></param>
    /// <param name="newNodePoolSize"></param>
    /// <param name="nodeType"></param>
    public string adjustNodePoolSize(string cId, int newNodePoolSize, NodeType nodeType)
    {
      #if !SILVERLIGHT
      send_adjustNodePoolSize(cId, newNodePoolSize, nodeType);
      return recv_adjustNodePoolSize();

      #else
      var asyncResult = Begin_adjustNodePoolSize(null, null, cId, newNodePoolSize, nodeType);
      return End_adjustNodePoolSize(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_adjustNodePoolSize(AsyncCallback callback, object state, string cId, int newNodePoolSize, NodeType nodeType)
    #else
    public void send_adjustNodePoolSize(string cId, int newNodePoolSize, NodeType nodeType)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("adjustNodePoolSize", TMessageType.Call, seqid_));
      adjustNodePoolSize_args args = new adjustNodePoolSize_args();
      args.CId = cId;
      args.NewNodePoolSize = newNodePoolSize;
      args.NodeType = nodeType;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_adjustNodePoolSize()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      adjustNodePoolSize_result result = new adjustNodePoolSize_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "adjustNodePoolSize failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createClientRoutine(AsyncCallback callback, object state, RoutineDTO routine)
    {
      return send_createClientRoutine(callback, state, routine);
    }

    public string End_createClientRoutine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createClientRoutine();
    }

    #endif

    /// <summary>
    /// Create a new ClientRoutine
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="routine"></param>
    public string createClientRoutine(RoutineDTO routine)
    {
      #if !SILVERLIGHT
      send_createClientRoutine(routine);
      return recv_createClientRoutine();

      #else
      var asyncResult = Begin_createClientRoutine(null, null, routine);
      return End_createClientRoutine(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createClientRoutine(AsyncCallback callback, object state, RoutineDTO routine)
    #else
    public void send_createClientRoutine(RoutineDTO routine)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createClientRoutine", TMessageType.Call, seqid_));
      createClientRoutine_args args = new createClientRoutine_args();
      args.Routine = routine;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createClientRoutine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createClientRoutine_result result = new createClientRoutine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createClientRoutine failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_uploadClientRoutineBinary(AsyncCallback callback, object state, string rcId, string binaryName, bool isPrimary, byte[] data)
    {
      return send_uploadClientRoutineBinary(callback, state, rcId, binaryName, isPrimary, data);
    }

    public string End_uploadClientRoutineBinary(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_uploadClientRoutineBinary();
    }

    #endif

    /// <summary>
    /// Upload binary/executable for a ClientRoutine
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="rcId"></param>
    /// <param name="binaryName"></param>
    /// <param name="isPrimary"></param>
    /// <param name="data"></param>
    public string uploadClientRoutineBinary(string rcId, string binaryName, bool isPrimary, byte[] data)
    {
      #if !SILVERLIGHT
      send_uploadClientRoutineBinary(rcId, binaryName, isPrimary, data);
      return recv_uploadClientRoutineBinary();

      #else
      var asyncResult = Begin_uploadClientRoutineBinary(null, null, rcId, binaryName, isPrimary, data);
      return End_uploadClientRoutineBinary(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_uploadClientRoutineBinary(AsyncCallback callback, object state, string rcId, string binaryName, bool isPrimary, byte[] data)
    #else
    public void send_uploadClientRoutineBinary(string rcId, string binaryName, bool isPrimary, byte[] data)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("uploadClientRoutineBinary", TMessageType.Call, seqid_));
      uploadClientRoutineBinary_args args = new uploadClientRoutineBinary_args();
      args.RcId = rcId;
      args.BinaryName = binaryName;
      args.IsPrimary = isPrimary;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_uploadClientRoutineBinary()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      uploadClientRoutineBinary_result result = new uploadClientRoutineBinary_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "uploadClientRoutineBinary failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_removeClientRoutine(AsyncCallback callback, object state, string rcId)
    {
      return send_removeClientRoutine(callback, state, rcId);
    }

    public string End_removeClientRoutine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_removeClientRoutine();
    }

    #endif

    /// <summary>
    /// Delete a ClientRoutine.
    /// Returns a ticket id, state of ticket is available over TicketService interface.
    /// 
    /// </summary>
    /// <param name="rcId"></param>
    public string removeClientRoutine(string rcId)
    {
      #if !SILVERLIGHT
      send_removeClientRoutine(rcId);
      return recv_removeClientRoutine();

      #else
      var asyncResult = Begin_removeClientRoutine(null, null, rcId);
      return End_removeClientRoutine(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_removeClientRoutine(AsyncCallback callback, object state, string rcId)
    #else
    public void send_removeClientRoutine(string rcId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("removeClientRoutine", TMessageType.Call, seqid_));
      removeClientRoutine_args args = new removeClientRoutine_args();
      args.RcId = rcId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_removeClientRoutine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      removeClientRoutine_result result = new removeClientRoutine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "removeClientRoutine failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getFeatureByNameAndVersion(AsyncCallback callback, object state, string name, string version)
    {
      return send_getFeatureByNameAndVersion(callback, state, name, version);
    }

    public string End_getFeatureByNameAndVersion(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFeatureByNameAndVersion();
    }

    #endif

    /// <summary>
    /// Fetches a feature by name and version.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="name"></param>
    /// <param name="version"></param>
    public string getFeatureByNameAndVersion(string name, string version)
    {
      #if !SILVERLIGHT
      send_getFeatureByNameAndVersion(name, version);
      return recv_getFeatureByNameAndVersion();

      #else
      var asyncResult = Begin_getFeatureByNameAndVersion(null, null, name, version);
      return End_getFeatureByNameAndVersion(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFeatureByNameAndVersion(AsyncCallback callback, object state, string name, string version)
    #else
    public void send_getFeatureByNameAndVersion(string name, string version)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getFeatureByNameAndVersion", TMessageType.Call, seqid_));
      getFeatureByNameAndVersion_args args = new getFeatureByNameAndVersion_args();
      args.Name = name;
      args.Version = version;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getFeatureByNameAndVersion()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFeatureByNameAndVersion_result result = new getFeatureByNameAndVersion_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFeatureByNameAndVersion failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getClusterIds"] = getClusterIds_Process;
      processMap_["getClusterInfo"] = getClusterInfo_Process;
      processMap_["getClusterEndpoint"] = getClusterEndpoint_Process;
      processMap_["createAWSCluster"] = createAWSCluster_Process;
      processMap_["addCluster"] = addCluster_Process;
      processMap_["destroyCluster"] = destroyCluster_Process;
      processMap_["adjustNodePoolSize"] = adjustNodePoolSize_Process;
      processMap_["createClientRoutine"] = createClientRoutine_Process;
      processMap_["uploadClientRoutineBinary"] = uploadClientRoutineBinary_Process;
      processMap_["removeClientRoutine"] = removeClientRoutine_Process;
      processMap_["getFeatureByNameAndVersion"] = getFeatureByNameAndVersion_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getClusterIds_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getClusterIds_args args = new getClusterIds_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getClusterIds_result result = new getClusterIds_result();
      try
      {
        result.Success = iface_.getClusterIds();
        oprot.WriteMessageBegin(new TMessage("getClusterIds", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getClusterIds", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getClusterInfo_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getClusterInfo_args args = new getClusterInfo_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getClusterInfo_result result = new getClusterInfo_result();
      try
      {
        result.Success = iface_.getClusterInfo(args.CId);
        oprot.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getClusterInfo", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getClusterEndpoint_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getClusterEndpoint_args args = new getClusterEndpoint_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getClusterEndpoint_result result = new getClusterEndpoint_result();
      try
      {
        result.Success = iface_.getClusterEndpoint(args.CId);
        oprot.WriteMessageBegin(new TMessage("getClusterEndpoint", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getClusterEndpoint", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createAWSCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createAWSCluster_args args = new createAWSCluster_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createAWSCluster_result result = new createAWSCluster_result();
      try
      {
        result.Success = iface_.createAWSCluster(args.NumberOfWorkers, args.NumberOfReducers, args.AwsSpecification);
        oprot.WriteMessageBegin(new TMessage("createAWSCluster", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createAWSCluster", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addCluster_args args = new addCluster_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addCluster_result result = new addCluster_result();
      try
      {
        result.Success = iface_.addCluster(args.Endpoint);
        oprot.WriteMessageBegin(new TMessage("addCluster", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addCluster", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void destroyCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      destroyCluster_args args = new destroyCluster_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      destroyCluster_result result = new destroyCluster_result();
      try
      {
        result.Success = iface_.destroyCluster(args.CId);
        oprot.WriteMessageBegin(new TMessage("destroyCluster", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("destroyCluster", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void adjustNodePoolSize_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      adjustNodePoolSize_args args = new adjustNodePoolSize_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      adjustNodePoolSize_result result = new adjustNodePoolSize_result();
      try
      {
        result.Success = iface_.adjustNodePoolSize(args.CId, args.NewNodePoolSize, args.NodeType);
        oprot.WriteMessageBegin(new TMessage("adjustNodePoolSize", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("adjustNodePoolSize", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createClientRoutine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createClientRoutine_args args = new createClientRoutine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createClientRoutine_result result = new createClientRoutine_result();
      try
      {
        result.Success = iface_.createClientRoutine(args.Routine);
        oprot.WriteMessageBegin(new TMessage("createClientRoutine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createClientRoutine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void uploadClientRoutineBinary_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      uploadClientRoutineBinary_args args = new uploadClientRoutineBinary_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      uploadClientRoutineBinary_result result = new uploadClientRoutineBinary_result();
      try
      {
        result.Success = iface_.uploadClientRoutineBinary(args.RcId, args.BinaryName, args.IsPrimary, args.Data);
        oprot.WriteMessageBegin(new TMessage("uploadClientRoutineBinary", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("uploadClientRoutineBinary", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void removeClientRoutine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      removeClientRoutine_args args = new removeClientRoutine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      removeClientRoutine_result result = new removeClientRoutine_result();
      try
      {
        result.Success = iface_.removeClientRoutine(args.RcId);
        oprot.WriteMessageBegin(new TMessage("removeClientRoutine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("removeClientRoutine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFeatureByNameAndVersion_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFeatureByNameAndVersion_args args = new getFeatureByNameAndVersion_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFeatureByNameAndVersion_result result = new getFeatureByNameAndVersion_result();
      try
      {
        result.Success = iface_.getFeatureByNameAndVersion(args.Name, args.Version);
        oprot.WriteMessageBegin(new TMessage("getFeatureByNameAndVersion", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFeatureByNameAndVersion", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterIds_args : TBase
  {

    public getClusterIds_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getClusterIds_args");
        oprot.WriteStructBegin(struc);
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterIds_args(");
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterIds_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getClusterIds_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getClusterIds_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterIds_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterInfo_args : TBase
  {
    private string _cId;

    public string CId
    {
      get
      {
        return _cId;
      }
      set
      {
        __isset.cId = true;
        this._cId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cId;
    }

    public getClusterInfo_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getClusterInfo_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CId != null && __isset.cId) {
          field.Name = "cId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterInfo_args(");
      bool __first = true;
      if (CId != null && __isset.cId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CId: ");
        __sb.Append(CId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterInfo_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getClusterInfo_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getClusterInfo_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterInfo_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterEndpoint_args : TBase
  {
    private string _cId;

    public string CId
    {
      get
      {
        return _cId;
      }
      set
      {
        __isset.cId = true;
        this._cId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cId;
    }

    public getClusterEndpoint_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getClusterEndpoint_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CId != null && __isset.cId) {
          field.Name = "cId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterEndpoint_args(");
      bool __first = true;
      if (CId != null && __isset.cId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CId: ");
        __sb.Append(CId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getClusterEndpoint_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getClusterEndpoint_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getClusterEndpoint_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getClusterEndpoint_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createAWSCluster_args : TBase
  {
    private int _numberOfWorkers;
    private int _numberOfReducers;
    private AWSSpecificationDTO _awsSpecification;

    public int NumberOfWorkers
    {
      get
      {
        return _numberOfWorkers;
      }
      set
      {
        __isset.numberOfWorkers = true;
        this._numberOfWorkers = value;
      }
    }

    public int NumberOfReducers
    {
      get
      {
        return _numberOfReducers;
      }
      set
      {
        __isset.numberOfReducers = true;
        this._numberOfReducers = value;
      }
    }

    public AWSSpecificationDTO AwsSpecification
    {
      get
      {
        return _awsSpecification;
      }
      set
      {
        __isset.awsSpecification = true;
        this._awsSpecification = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool numberOfWorkers;
      public bool numberOfReducers;
      public bool awsSpecification;
    }

    public createAWSCluster_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.I32) {
                NumberOfWorkers = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NumberOfReducers = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                AwsSpecification = new AWSSpecificationDTO();
                AwsSpecification.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createAWSCluster_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (__isset.numberOfWorkers) {
          field.Name = "numberOfWorkers";
          field.Type = TType.I32;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NumberOfWorkers);
          oprot.WriteFieldEnd();
        }
        if (__isset.numberOfReducers) {
          field.Name = "numberOfReducers";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NumberOfReducers);
          oprot.WriteFieldEnd();
        }
        if (AwsSpecification != null && __isset.awsSpecification) {
          field.Name = "awsSpecification";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          AwsSpecification.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createAWSCluster_args(");
      bool __first = true;
      if (__isset.numberOfWorkers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumberOfWorkers: ");
        __sb.Append(NumberOfWorkers);
      }
      if (__isset.numberOfReducers) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NumberOfReducers: ");
        __sb.Append(NumberOfReducers);
      }
      if (AwsSpecification != null && __isset.awsSpecification) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("AwsSpecification: ");
        __sb.Append(AwsSpecification== null ? "<null>" : AwsSpecification.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createAWSCluster_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createAWSCluster_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createAWSCluster_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createAWSCluster_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addCluster_args : TBase
  {
    private ServiceEndpointDTO _endpoint;

    public ServiceEndpointDTO Endpoint
    {
      get
      {
        return _endpoint;
      }
      set
      {
        __isset.endpoint = true;
        this._endpoint = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool endpoint;
    }

    public addCluster_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Endpoint = new ServiceEndpointDTO();
                Endpoint.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addCluster_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Endpoint != null && __isset.endpoint) {
          field.Name = "endpoint";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Endpoint.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addCluster_args(");
      bool __first = true;
      if (Endpoint != null && __isset.endpoint) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Endpoint: ");
        __sb.Append(Endpoint== null ? "<null>" : Endpoint.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addCluster_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public addCluster_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addCluster_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addCluster_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroyCluster_args : TBase
  {
    private string _cId;

    public string CId
    {
      get
      {
        return _cId;
      }
      set
      {
        __isset.cId = true;
        this._cId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cId;
    }

    public destroyCluster_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroyCluster_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CId != null && __isset.cId) {
          field.Name = "cId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroyCluster_args(");
      bool __first = true;
      if (CId != null && __isset.cId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CId: ");
        __sb.Append(CId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class destroyCluster_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public destroyCluster_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("destroyCluster_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("destroyCluster_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class adjustNodePoolSize_args : TBase
  {
    private string _cId;
    private int _newNodePoolSize;
    private NodeType _nodeType;

    public string CId
    {
      get
      {
        return _cId;
      }
      set
      {
        __isset.cId = true;
        this._cId = value;
      }
    }

    public int NewNodePoolSize
    {
      get
      {
        return _newNodePoolSize;
      }
      set
      {
        __isset.newNodePoolSize = true;
        this._newNodePoolSize = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref=".NodeType"/>
    /// </summary>
    public NodeType NodeType
    {
      get
      {
        return _nodeType;
      }
      set
      {
        __isset.nodeType = true;
        this._nodeType = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cId;
      public bool newNodePoolSize;
      public bool nodeType;
    }

    public adjustNodePoolSize_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                NewNodePoolSize = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NodeType = (NodeType)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("adjustNodePoolSize_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CId != null && __isset.cId) {
          field.Name = "cId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CId);
          oprot.WriteFieldEnd();
        }
        if (__isset.newNodePoolSize) {
          field.Name = "newNodePoolSize";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NewNodePoolSize);
          oprot.WriteFieldEnd();
        }
        if (__isset.nodeType) {
          field.Name = "nodeType";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)NodeType);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("adjustNodePoolSize_args(");
      bool __first = true;
      if (CId != null && __isset.cId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CId: ");
        __sb.Append(CId);
      }
      if (__isset.newNodePoolSize) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NewNodePoolSize: ");
        __sb.Append(NewNodePoolSize);
      }
      if (__isset.nodeType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NodeType: ");
        __sb.Append(NodeType);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class adjustNodePoolSize_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public adjustNodePoolSize_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("adjustNodePoolSize_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("adjustNodePoolSize_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createClientRoutine_args : TBase
  {
    private RoutineDTO _routine;

    public RoutineDTO Routine
    {
      get
      {
        return _routine;
      }
      set
      {
        __isset.routine = true;
        this._routine = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool routine;
    }

    public createClientRoutine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Routine = new RoutineDTO();
                Routine.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createClientRoutine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Routine != null && __isset.routine) {
          field.Name = "routine";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Routine.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createClientRoutine_args(");
      bool __first = true;
      if (Routine != null && __isset.routine) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Routine: ");
        __sb.Append(Routine== null ? "<null>" : Routine.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createClientRoutine_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createClientRoutine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createClientRoutine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createClientRoutine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadClientRoutineBinary_args : TBase
  {
    private string _rcId;
    private string _binaryName;
    private bool _isPrimary;
    private byte[] _data;

    public string RcId
    {
      get
      {
        return _rcId;
      }
      set
      {
        __isset.rcId = true;
        this._rcId = value;
      }
    }

    public string BinaryName
    {
      get
      {
        return _binaryName;
      }
      set
      {
        __isset.binaryName = true;
        this._binaryName = value;
      }
    }

    public bool IsPrimary
    {
      get
      {
        return _isPrimary;
      }
      set
      {
        __isset.isPrimary = true;
        this._isPrimary = value;
      }
    }

    public byte[] Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rcId;
      public bool binaryName;
      public bool isPrimary;
      public bool data;
    }

    public uploadClientRoutineBinary_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RcId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                BinaryName = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Bool) {
                IsPrimary = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.String) {
                Data = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("uploadClientRoutineBinary_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RcId != null && __isset.rcId) {
          field.Name = "rcId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RcId);
          oprot.WriteFieldEnd();
        }
        if (BinaryName != null && __isset.binaryName) {
          field.Name = "binaryName";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(BinaryName);
          oprot.WriteFieldEnd();
        }
        if (__isset.isPrimary) {
          field.Name = "isPrimary";
          field.Type = TType.Bool;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IsPrimary);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadClientRoutineBinary_args(");
      bool __first = true;
      if (RcId != null && __isset.rcId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RcId: ");
        __sb.Append(RcId);
      }
      if (BinaryName != null && __isset.binaryName) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("BinaryName: ");
        __sb.Append(BinaryName);
      }
      if (__isset.isPrimary) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IsPrimary: ");
        __sb.Append(IsPrimary);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class uploadClientRoutineBinary_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public uploadClientRoutineBinary_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("uploadClientRoutineBinary_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("uploadClientRoutineBinary_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeClientRoutine_args : TBase
  {
    private string _rcId;

    public string RcId
    {
      get
      {
        return _rcId;
      }
      set
      {
        __isset.rcId = true;
        this._rcId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool rcId;
    }

    public removeClientRoutine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                RcId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeClientRoutine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (RcId != null && __isset.rcId) {
          field.Name = "rcId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RcId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeClientRoutine_args(");
      bool __first = true;
      if (RcId != null && __isset.rcId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RcId: ");
        __sb.Append(RcId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class removeClientRoutine_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public removeClientRoutine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("removeClientRoutine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("removeClientRoutine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeatureByNameAndVersion_args : TBase
  {
    private string _name;
    private string _version;

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }

    public string Version
    {
      get
      {
        return _version;
      }
      set
      {
        __isset.version = true;
        this._version = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool name;
      public bool version;
    }

    public getFeatureByNameAndVersion_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Version = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeatureByNameAndVersion_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        if (Version != null && __isset.version) {
          field.Name = "version";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Version);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeatureByNameAndVersion_args(");
      bool __first = true;
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      if (Version != null && __isset.version) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Version: ");
        __sb.Append(Version);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFeatureByNameAndVersion_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getFeatureByNameAndVersion_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFeatureByNameAndVersion_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFeatureByNameAndVersion_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
