/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ParameterServerResponseService {
  /// <summary>
  /// Response Interface for ParameterServerService
  /// 
  /// </summary>
  public interface ISync {
    /// <summary>
    /// Set the value for a parameter with the program id and parameter id given.
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    string setParameter(string ticketId);
    /// <summary>
    /// Creates a new parameter with the given program id, parameter id and type.
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    string createParameter(string ticketId);
    /// <summary>
    /// Request a parameter with the given program id and parameter id.
    /// </summary>
    /// <param name="ticketId"></param>
    ResourceDTO getParameter(string ticketId);
    /// <summary>
    /// Update a stored parameter with the given program id and parameter id by adding the value in the given parameter.
    /// </summary>
    /// <param name="ticketId"></param>
    string addToParameter(string ticketId);
    /// <summary>
    /// Delete a parameter with the given program id and parameter id
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    string deleteParameter(string ticketId);
    /// <summary>
    /// Delete all stored parameters for the given programId
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    string deleteAllParameters(string ticketId);
  }

  /// <summary>
  /// Response Interface for ParameterServerService
  /// 
  /// </summary>
  public interface Iface : ISync {
    /// <summary>
    /// Set the value for a parameter with the program id and parameter id given.
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_setParameter(AsyncCallback callback, object state, string ticketId);
    string End_setParameter(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Creates a new parameter with the given program id, parameter id and type.
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createParameter(AsyncCallback callback, object state, string ticketId);
    string End_createParameter(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request a parameter with the given program id and parameter id.
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getParameter(AsyncCallback callback, object state, string ticketId);
    ResourceDTO End_getParameter(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Update a stored parameter with the given program id and parameter id by adding the value in the given parameter.
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_addToParameter(AsyncCallback callback, object state, string ticketId);
    string End_addToParameter(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Delete a parameter with the given program id and parameter id
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_deleteParameter(AsyncCallback callback, object state, string ticketId);
    string End_deleteParameter(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Delete all stored parameters for the given programId
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_deleteAllParameters(AsyncCallback callback, object state, string ticketId);
    string End_deleteAllParameters(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// Response Interface for ParameterServerService
  /// 
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_setParameter(AsyncCallback callback, object state, string ticketId)
    {
      return send_setParameter(callback, state, ticketId);
    }

    public string End_setParameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_setParameter();
    }

    #endif

    /// <summary>
    /// Set the value for a parameter with the program id and parameter id given.
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    public string setParameter(string ticketId)
    {
      #if !SILVERLIGHT
      send_setParameter(ticketId);
      return recv_setParameter();

      #else
      var asyncResult = Begin_setParameter(null, null, ticketId);
      return End_setParameter(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_setParameter(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_setParameter(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("setParameter", TMessageType.Call, seqid_));
      setParameter_args args = new setParameter_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_setParameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      setParameter_result result = new setParameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "setParameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createParameter(AsyncCallback callback, object state, string ticketId)
    {
      return send_createParameter(callback, state, ticketId);
    }

    public string End_createParameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createParameter();
    }

    #endif

    /// <summary>
    /// Creates a new parameter with the given program id, parameter id and type.
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    public string createParameter(string ticketId)
    {
      #if !SILVERLIGHT
      send_createParameter(ticketId);
      return recv_createParameter();

      #else
      var asyncResult = Begin_createParameter(null, null, ticketId);
      return End_createParameter(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createParameter(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_createParameter(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createParameter", TMessageType.Call, seqid_));
      createParameter_args args = new createParameter_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createParameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createParameter_result result = new createParameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createParameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getParameter(AsyncCallback callback, object state, string ticketId)
    {
      return send_getParameter(callback, state, ticketId);
    }

    public ResourceDTO End_getParameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getParameter();
    }

    #endif

    /// <summary>
    /// Request a parameter with the given program id and parameter id.
    /// </summary>
    /// <param name="ticketId"></param>
    public ResourceDTO getParameter(string ticketId)
    {
      #if !SILVERLIGHT
      send_getParameter(ticketId);
      return recv_getParameter();

      #else
      var asyncResult = Begin_getParameter(null, null, ticketId);
      return End_getParameter(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getParameter(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_getParameter(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getParameter", TMessageType.Call, seqid_));
      getParameter_args args = new getParameter_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public ResourceDTO recv_getParameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getParameter_result result = new getParameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getParameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_addToParameter(AsyncCallback callback, object state, string ticketId)
    {
      return send_addToParameter(callback, state, ticketId);
    }

    public string End_addToParameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_addToParameter();
    }

    #endif

    /// <summary>
    /// Update a stored parameter with the given program id and parameter id by adding the value in the given parameter.
    /// </summary>
    /// <param name="ticketId"></param>
    public string addToParameter(string ticketId)
    {
      #if !SILVERLIGHT
      send_addToParameter(ticketId);
      return recv_addToParameter();

      #else
      var asyncResult = Begin_addToParameter(null, null, ticketId);
      return End_addToParameter(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_addToParameter(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_addToParameter(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("addToParameter", TMessageType.Call, seqid_));
      addToParameter_args args = new addToParameter_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_addToParameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      addToParameter_result result = new addToParameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "addToParameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteParameter(AsyncCallback callback, object state, string ticketId)
    {
      return send_deleteParameter(callback, state, ticketId);
    }

    public string End_deleteParameter(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteParameter();
    }

    #endif

    /// <summary>
    /// Delete a parameter with the given program id and parameter id
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    public string deleteParameter(string ticketId)
    {
      #if !SILVERLIGHT
      send_deleteParameter(ticketId);
      return recv_deleteParameter();

      #else
      var asyncResult = Begin_deleteParameter(null, null, ticketId);
      return End_deleteParameter(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteParameter(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_deleteParameter(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteParameter", TMessageType.Call, seqid_));
      deleteParameter_args args = new deleteParameter_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_deleteParameter()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteParameter_result result = new deleteParameter_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteParameter failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteAllParameters(AsyncCallback callback, object state, string ticketId)
    {
      return send_deleteAllParameters(callback, state, ticketId);
    }

    public string End_deleteAllParameters(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteAllParameters();
    }

    #endif

    /// <summary>
    /// Delete all stored parameters for the given programId
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    public string deleteAllParameters(string ticketId)
    {
      #if !SILVERLIGHT
      send_deleteAllParameters(ticketId);
      return recv_deleteAllParameters();

      #else
      var asyncResult = Begin_deleteAllParameters(null, null, ticketId);
      return End_deleteAllParameters(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteAllParameters(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_deleteAllParameters(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteAllParameters", TMessageType.Call, seqid_));
      deleteAllParameters_args args = new deleteAllParameters_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_deleteAllParameters()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteAllParameters_result result = new deleteAllParameters_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteAllParameters failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["setParameter"] = setParameter_Process;
      processMap_["createParameter"] = createParameter_Process;
      processMap_["getParameter"] = getParameter_Process;
      processMap_["addToParameter"] = addToParameter_Process;
      processMap_["deleteParameter"] = deleteParameter_Process;
      processMap_["deleteAllParameters"] = deleteAllParameters_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void setParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      setParameter_args args = new setParameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      setParameter_result result = new setParameter_result();
      try
      {
        result.Success = iface_.setParameter(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("setParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("setParameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createParameter_args args = new createParameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createParameter_result result = new createParameter_result();
      try
      {
        result.Success = iface_.createParameter(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("createParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createParameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getParameter_args args = new getParameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getParameter_result result = new getParameter_result();
      try
      {
        result.Success = iface_.getParameter(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("getParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getParameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void addToParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      addToParameter_args args = new addToParameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      addToParameter_result result = new addToParameter_result();
      try
      {
        result.Success = iface_.addToParameter(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("addToParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("addToParameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteParameter_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteParameter_args args = new deleteParameter_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteParameter_result result = new deleteParameter_result();
      try
      {
        result.Success = iface_.deleteParameter(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("deleteParameter", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteParameter", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteAllParameters_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteAllParameters_args args = new deleteAllParameters_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteAllParameters_result result = new deleteAllParameters_result();
      try
      {
        result.Success = iface_.deleteAllParameters(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("deleteAllParameters", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteAllParameters", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setParameter_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public setParameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setParameter_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class setParameter_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public setParameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("setParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("setParameter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createParameter_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public createParameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createParameter_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createParameter_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createParameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createParameter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getParameter_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public getParameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getParameter_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getParameter_result : TBase
  {
    private ResourceDTO _success;

    public ResourceDTO Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getParameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.Struct) {
                Success = new ResourceDTO();
                Success.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.Struct;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            Success.Write(oprot);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getParameter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success== null ? "<null>" : Success.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addToParameter_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public addToParameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addToParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addToParameter_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class addToParameter_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public addToParameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("addToParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("addToParameter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteParameter_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public deleteParameter_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteParameter_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteParameter_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteParameter_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteParameter_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteParameter_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteParameter_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllParameters_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public deleteAllParameters_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteAllParameters_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteAllParameters_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteAllParameters_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteAllParameters_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteAllParameters_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteAllParameters_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
