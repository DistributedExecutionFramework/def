/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class RoutineDTO : TBase
{
  private string _id;
  private bool _privateRoutine;
  private string _name;
  private string _description;
  private short _revision;
  private RoutineType _type;
  private List<FormalParameterDTO> _inParameters;
  private FormalParameterDTO _outParameter;
  private THashSet<RoutineBinaryDTO> _routineBinaries;
  private List<string> _arguments;
  private List<FeatureDTO> _requiredFeatures;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public bool PrivateRoutine
  {
    get
    {
      return _privateRoutine;
    }
    set
    {
      __isset.privateRoutine = true;
      this._privateRoutine = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Description
  {
    get
    {
      return _description;
    }
    set
    {
      __isset.description = true;
      this._description = value;
    }
  }

  public short Revision
  {
    get
    {
      return _revision;
    }
    set
    {
      __isset.revision = true;
      this._revision = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="RoutineType"/>
  /// </summary>
  public RoutineType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public List<FormalParameterDTO> InParameters
  {
    get
    {
      return _inParameters;
    }
    set
    {
      __isset.inParameters = true;
      this._inParameters = value;
    }
  }

  public FormalParameterDTO OutParameter
  {
    get
    {
      return _outParameter;
    }
    set
    {
      __isset.outParameter = true;
      this._outParameter = value;
    }
  }

  public THashSet<RoutineBinaryDTO> RoutineBinaries
  {
    get
    {
      return _routineBinaries;
    }
    set
    {
      __isset.routineBinaries = true;
      this._routineBinaries = value;
    }
  }

  public List<string> Arguments
  {
    get
    {
      return _arguments;
    }
    set
    {
      __isset.arguments = true;
      this._arguments = value;
    }
  }

  public List<FeatureDTO> RequiredFeatures
  {
    get
    {
      return _requiredFeatures;
    }
    set
    {
      __isset.requiredFeatures = true;
      this._requiredFeatures = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool privateRoutine;
    public bool name;
    public bool description;
    public bool revision;
    public bool type;
    public bool inParameters;
    public bool outParameter;
    public bool routineBinaries;
    public bool arguments;
    public bool requiredFeatures;
  }

  public RoutineDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Bool) {
              PrivateRoutine = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I16) {
              Revision = iprot.ReadI16();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I32) {
              Type = (RoutineType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.List) {
              {
                InParameters = new List<FormalParameterDTO>();
                TList _list43 = iprot.ReadListBegin();
                for( int _i44 = 0; _i44 < _list43.Count; ++_i44)
                {
                  FormalParameterDTO _elem45;
                  _elem45 = new FormalParameterDTO();
                  _elem45.Read(iprot);
                  InParameters.Add(_elem45);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.Struct) {
              OutParameter = new FormalParameterDTO();
              OutParameter.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Set) {
              {
                RoutineBinaries = new THashSet<RoutineBinaryDTO>();
                TSet _set46 = iprot.ReadSetBegin();
                for( int _i47 = 0; _i47 < _set46.Count; ++_i47)
                {
                  RoutineBinaryDTO _elem48;
                  _elem48 = new RoutineBinaryDTO();
                  _elem48.Read(iprot);
                  RoutineBinaries.Add(_elem48);
                }
                iprot.ReadSetEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                Arguments = new List<string>();
                TList _list49 = iprot.ReadListBegin();
                for( int _i50 = 0; _i50 < _list49.Count; ++_i50)
                {
                  string _elem51;
                  _elem51 = iprot.ReadString();
                  Arguments.Add(_elem51);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                RequiredFeatures = new List<FeatureDTO>();
                TList _list52 = iprot.ReadListBegin();
                for( int _i53 = 0; _i53 < _list52.Count; ++_i53)
                {
                  FeatureDTO _elem54;
                  _elem54 = new FeatureDTO();
                  _elem54.Read(iprot);
                  RequiredFeatures.Add(_elem54);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RoutineDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.privateRoutine) {
        field.Name = "privateRoutine";
        field.Type = TType.Bool;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(PrivateRoutine);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.revision) {
        field.Name = "revision";
        field.Type = TType.I16;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI16(Revision);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (InParameters != null && __isset.inParameters) {
        field.Name = "inParameters";
        field.Type = TType.List;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, InParameters.Count));
          foreach (FormalParameterDTO _iter55 in InParameters)
          {
            _iter55.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OutParameter != null && __isset.outParameter) {
        field.Name = "outParameter";
        field.Type = TType.Struct;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        OutParameter.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (RoutineBinaries != null && __isset.routineBinaries) {
        field.Name = "routineBinaries";
        field.Type = TType.Set;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteSetBegin(new TSet(TType.Struct, RoutineBinaries.Count));
          foreach (RoutineBinaryDTO _iter56 in RoutineBinaries)
          {
            _iter56.Write(oprot);
          }
          oprot.WriteSetEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Arguments != null && __isset.arguments) {
        field.Name = "arguments";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Arguments.Count));
          foreach (string _iter57 in Arguments)
          {
            oprot.WriteString(_iter57);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (RequiredFeatures != null && __isset.requiredFeatures) {
        field.Name = "requiredFeatures";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, RequiredFeatures.Count));
          foreach (FeatureDTO _iter58 in RequiredFeatures)
          {
            _iter58.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RoutineDTO(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.privateRoutine) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivateRoutine: ");
      __sb.Append(PrivateRoutine);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Description != null && __isset.description) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Description: ");
      __sb.Append(Description);
    }
    if (__isset.revision) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Revision: ");
      __sb.Append(Revision);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (InParameters != null && __isset.inParameters) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InParameters: ");
      __sb.Append(InParameters);
    }
    if (OutParameter != null && __isset.outParameter) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OutParameter: ");
      __sb.Append(OutParameter);
    }
    if (RoutineBinaries != null && __isset.routineBinaries) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RoutineBinaries: ");
      __sb.Append(RoutineBinaries);
    }
    if (Arguments != null && __isset.arguments) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Arguments: ");
      __sb.Append(Arguments);
    }
    if (RequiredFeatures != null && __isset.requiredFeatures) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("RequiredFeatures: ");
      __sb.Append(RequiredFeatures);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

