/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class TaskDTO : TBase
{
  private string _id;
  private string _jobId;
  private string _programId;
  private ExecutionState _state;
  private long _startTime;
  private long _createTime;
  private long _finishTime;
  private string _objectiveRoutineId;
  private string _mapRoutineId;
  private Dictionary<string, ResourceDTO> _inParameters;
  private List<ResourceDTO> _outParameters;
  private List<string> _messages;
  private long _runtime;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string JobId
  {
    get
    {
      return _jobId;
    }
    set
    {
      __isset.jobId = true;
      this._jobId = value;
    }
  }

  public string ProgramId
  {
    get
    {
      return _programId;
    }
    set
    {
      __isset.programId = true;
      this._programId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ExecutionState"/>
  /// </summary>
  public ExecutionState State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public long CreateTime
  {
    get
    {
      return _createTime;
    }
    set
    {
      __isset.createTime = true;
      this._createTime = value;
    }
  }

  public long FinishTime
  {
    get
    {
      return _finishTime;
    }
    set
    {
      __isset.finishTime = true;
      this._finishTime = value;
    }
  }

  public string ObjectiveRoutineId
  {
    get
    {
      return _objectiveRoutineId;
    }
    set
    {
      __isset.objectiveRoutineId = true;
      this._objectiveRoutineId = value;
    }
  }

  public string MapRoutineId
  {
    get
    {
      return _mapRoutineId;
    }
    set
    {
      __isset.mapRoutineId = true;
      this._mapRoutineId = value;
    }
  }

  public Dictionary<string, ResourceDTO> InParameters
  {
    get
    {
      return _inParameters;
    }
    set
    {
      __isset.inParameters = true;
      this._inParameters = value;
    }
  }

  public List<ResourceDTO> OutParameters
  {
    get
    {
      return _outParameters;
    }
    set
    {
      __isset.outParameters = true;
      this._outParameters = value;
    }
  }

  public List<string> Messages
  {
    get
    {
      return _messages;
    }
    set
    {
      __isset.messages = true;
      this._messages = value;
    }
  }

  public long Runtime
  {
    get
    {
      return _runtime;
    }
    set
    {
      __isset.runtime = true;
      this._runtime = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool jobId;
    public bool programId;
    public bool state;
    public bool startTime;
    public bool createTime;
    public bool finishTime;
    public bool objectiveRoutineId;
    public bool mapRoutineId;
    public bool inParameters;
    public bool outParameters;
    public bool messages;
    public bool runtime;
  }

  public TaskDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              JobId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ProgramId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              State = (ExecutionState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I64) {
              FinishTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              ObjectiveRoutineId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              MapRoutineId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                InParameters = new Dictionary<string, ResourceDTO>();
                TMap _map4 = iprot.ReadMapBegin();
                for( int _i5 = 0; _i5 < _map4.Count; ++_i5)
                {
                  string _key6;
                  ResourceDTO _val7;
                  _key6 = iprot.ReadString();
                  _val7 = new ResourceDTO();
                  _val7.Read(iprot);
                  InParameters[_key6] = _val7;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.List) {
              {
                OutParameters = new List<ResourceDTO>();
                TList _list8 = iprot.ReadListBegin();
                for( int _i9 = 0; _i9 < _list8.Count; ++_i9)
                {
                  ResourceDTO _elem10;
                  _elem10 = new ResourceDTO();
                  _elem10.Read(iprot);
                  OutParameters.Add(_elem10);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.List) {
              {
                Messages = new List<string>();
                TList _list11 = iprot.ReadListBegin();
                for( int _i12 = 0; _i12 < _list11.Count; ++_i12)
                {
                  string _elem13;
                  _elem13 = iprot.ReadString();
                  Messages.Add(_elem13);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.I64) {
              Runtime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("TaskDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (JobId != null && __isset.jobId) {
        field.Name = "jobId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JobId);
        oprot.WriteFieldEnd();
      }
      if (ProgramId != null && __isset.programId) {
        field.Name = "programId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ProgramId);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.finishTime) {
        field.Name = "finishTime";
        field.Type = TType.I64;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FinishTime);
        oprot.WriteFieldEnd();
      }
      if (ObjectiveRoutineId != null && __isset.objectiveRoutineId) {
        field.Name = "objectiveRoutineId";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ObjectiveRoutineId);
        oprot.WriteFieldEnd();
      }
      if (MapRoutineId != null && __isset.mapRoutineId) {
        field.Name = "mapRoutineId";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(MapRoutineId);
        oprot.WriteFieldEnd();
      }
      if (InParameters != null && __isset.inParameters) {
        field.Name = "inParameters";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, InParameters.Count));
          foreach (string _iter14 in InParameters.Keys)
          {
            oprot.WriteString(_iter14);
            InParameters[_iter14].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (OutParameters != null && __isset.outParameters) {
        field.Name = "outParameters";
        field.Type = TType.List;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.Struct, OutParameters.Count));
          foreach (ResourceDTO _iter15 in OutParameters)
          {
            _iter15.Write(oprot);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.messages) {
        field.Name = "messages";
        field.Type = TType.List;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Messages.Count));
          foreach (string _iter16 in Messages)
          {
            oprot.WriteString(_iter16);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.runtime) {
        field.Name = "runtime";
        field.Type = TType.I64;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(Runtime);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("TaskDTO(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (JobId != null && __isset.jobId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("JobId: ");
      __sb.Append(JobId);
    }
    if (ProgramId != null && __isset.programId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ProgramId: ");
      __sb.Append(ProgramId);
    }
    if (__isset.state) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("State: ");
      __sb.Append(State);
    }
    if (__isset.startTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartTime: ");
      __sb.Append(StartTime);
    }
    if (__isset.createTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreateTime: ");
      __sb.Append(CreateTime);
    }
    if (__isset.finishTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FinishTime: ");
      __sb.Append(FinishTime);
    }
    if (ObjectiveRoutineId != null && __isset.objectiveRoutineId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ObjectiveRoutineId: ");
      __sb.Append(ObjectiveRoutineId);
    }
    if (MapRoutineId != null && __isset.mapRoutineId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("MapRoutineId: ");
      __sb.Append(MapRoutineId);
    }
    if (InParameters != null && __isset.inParameters) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("InParameters: ");
      __sb.Append(InParameters);
    }
    if (OutParameters != null && __isset.outParameters) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("OutParameters: ");
      __sb.Append(OutParameters);
    }
    if (Messages != null && __isset.messages) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Messages: ");
      __sb.Append(Messages);
    }
    if (__isset.runtime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Runtime: ");
      __sb.Append(Runtime);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

