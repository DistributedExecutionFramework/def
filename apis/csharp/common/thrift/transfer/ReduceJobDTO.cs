/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ReduceJobDTO : TBase
{
  private string _jobId;
  private JobDTO _job;
  private ExecutionState _state;
  private long _startTime;
  private long _finishTime;
  private List<string> _messages;

  public string JobId
  {
    get
    {
      return _jobId;
    }
    set
    {
      __isset.jobId = true;
      this._jobId = value;
    }
  }

  public JobDTO Job
  {
    get
    {
      return _job;
    }
    set
    {
      __isset.job = true;
      this._job = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ExecutionState"/>
  /// </summary>
  public ExecutionState State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public long FinishTime
  {
    get
    {
      return _finishTime;
    }
    set
    {
      __isset.finishTime = true;
      this._finishTime = value;
    }
  }

  public List<string> Messages
  {
    get
    {
      return _messages;
    }
    set
    {
      __isset.messages = true;
      this._messages = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool jobId;
    public bool job;
    public bool state;
    public bool startTime;
    public bool finishTime;
    public bool messages;
  }

  public ReduceJobDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              JobId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.Struct) {
              Job = new JobDTO();
              Job.Read(iprot);
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              State = (ExecutionState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              FinishTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                Messages = new List<string>();
                TList _list39 = iprot.ReadListBegin();
                for( int _i40 = 0; _i40 < _list39.Count; ++_i40)
                {
                  string _elem41;
                  _elem41 = iprot.ReadString();
                  Messages.Add(_elem41);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ReduceJobDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (JobId != null && __isset.jobId) {
        field.Name = "jobId";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(JobId);
        oprot.WriteFieldEnd();
      }
      if (Job != null && __isset.job) {
        field.Name = "job";
        field.Type = TType.Struct;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        Job.Write(oprot);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.finishTime) {
        field.Name = "finishTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FinishTime);
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.messages) {
        field.Name = "messages";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Messages.Count));
          foreach (string _iter42 in Messages)
          {
            oprot.WriteString(_iter42);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ReduceJobDTO(");
    bool __first = true;
    if (JobId != null && __isset.jobId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("JobId: ");
      __sb.Append(JobId);
    }
    if (Job != null && __isset.job) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Job: ");
      __sb.Append(Job== null ? "<null>" : Job.ToString());
    }
    if (__isset.state) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("State: ");
      __sb.Append(State);
    }
    if (__isset.startTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartTime: ");
      __sb.Append(StartTime);
    }
    if (__isset.finishTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FinishTime: ");
      __sb.Append(FinishTime);
    }
    if (Messages != null && __isset.messages) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Messages: ");
      __sb.Append(Messages);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

