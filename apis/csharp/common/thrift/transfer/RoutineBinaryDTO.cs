/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class RoutineBinaryDTO : TBase
{
  private string _id;
  private string _md5;
  private long _sizeInBytes;
  private bool _primary;
  private byte[] _data;
  private string _url;
  private string _name;
  private string _executionUrl;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Md5
  {
    get
    {
      return _md5;
    }
    set
    {
      __isset.md5 = true;
      this._md5 = value;
    }
  }

  public long SizeInBytes
  {
    get
    {
      return _sizeInBytes;
    }
    set
    {
      __isset.sizeInBytes = true;
      this._sizeInBytes = value;
    }
  }

  public bool Primary
  {
    get
    {
      return _primary;
    }
    set
    {
      __isset.primary = true;
      this._primary = value;
    }
  }

  public byte[] Data
  {
    get
    {
      return _data;
    }
    set
    {
      __isset.data = true;
      this._data = value;
    }
  }

  public string Url
  {
    get
    {
      return _url;
    }
    set
    {
      __isset.url = true;
      this._url = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string ExecutionUrl
  {
    get
    {
      return _executionUrl;
    }
    set
    {
      __isset.executionUrl = true;
      this._executionUrl = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool md5;
    public bool sizeInBytes;
    public bool primary;
    public bool data;
    public bool url;
    public bool name;
    public bool executionUrl;
  }

  public RoutineBinaryDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Md5 = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              SizeInBytes = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.Bool) {
              Primary = iprot.ReadBool();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              Data = iprot.ReadBinary();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              Url = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              ExecutionUrl = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("RoutineBinaryDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Md5 != null && __isset.md5) {
        field.Name = "md5";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Md5);
        oprot.WriteFieldEnd();
      }
      if (__isset.sizeInBytes) {
        field.Name = "sizeInBytes";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(SizeInBytes);
        oprot.WriteFieldEnd();
      }
      if (__isset.primary) {
        field.Name = "primary";
        field.Type = TType.Bool;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteBool(Primary);
        oprot.WriteFieldEnd();
      }
      if (Data != null && __isset.data) {
        field.Name = "data";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteBinary(Data);
        oprot.WriteFieldEnd();
      }
      if (Url != null && __isset.url) {
        field.Name = "url";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Url);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (ExecutionUrl != null && __isset.executionUrl) {
        field.Name = "executionUrl";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ExecutionUrl);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("RoutineBinaryDTO(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Md5 != null && __isset.md5) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Md5: ");
      __sb.Append(Md5);
    }
    if (__isset.sizeInBytes) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SizeInBytes: ");
      __sb.Append(SizeInBytes);
    }
    if (__isset.primary) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Primary: ");
      __sb.Append(Primary);
    }
    if (Data != null && __isset.data) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Data: ");
      __sb.Append(Data);
    }
    if (Url != null && __isset.url) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Url: ");
      __sb.Append(Url);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (ExecutionUrl != null && __isset.executionUrl) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ExecutionUrl: ");
      __sb.Append(ExecutionUrl);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

