/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


/// <summary>
/// NodeInfo Data Transfer Object.
/// Contains all relevant node information.
/// </summary>
#if !SILVERLIGHT
[Serializable]
#endif
public partial class NodeInfoDTO : TBase
{
  private string _id;
  private string _clusterId;
  private NodeType _type;
  private int _numberOfCores;
  private double _load;
  private long _timeStamp;
  private Dictionary<string, string> _parameters;
  private string _host;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string ClusterId
  {
    get
    {
      return _clusterId;
    }
    set
    {
      __isset.clusterId = true;
      this._clusterId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="NodeType"/>
  /// </summary>
  public NodeType Type
  {
    get
    {
      return _type;
    }
    set
    {
      __isset.type = true;
      this._type = value;
    }
  }

  public int NumberOfCores
  {
    get
    {
      return _numberOfCores;
    }
    set
    {
      __isset.numberOfCores = true;
      this._numberOfCores = value;
    }
  }

  public double Load
  {
    get
    {
      return _load;
    }
    set
    {
      __isset.load = true;
      this._load = value;
    }
  }

  public long TimeStamp
  {
    get
    {
      return _timeStamp;
    }
    set
    {
      __isset.timeStamp = true;
      this._timeStamp = value;
    }
  }

  public Dictionary<string, string> Parameters
  {
    get
    {
      return _parameters;
    }
    set
    {
      __isset.parameters = true;
      this._parameters = value;
    }
  }

  public string Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool clusterId;
    public bool type;
    public bool numberOfCores;
    public bool load;
    public bool timeStamp;
    public bool parameters;
    public bool host;
  }

  public NodeInfoDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              ClusterId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I32) {
              Type = (NodeType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              NumberOfCores = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.Double) {
              Load = iprot.ReadDouble();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.I64) {
              TimeStamp = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.Map) {
              {
                Parameters = new Dictionary<string, string>();
                TMap _map72 = iprot.ReadMapBegin();
                for( int _i73 = 0; _i73 < _map72.Count; ++_i73)
                {
                  string _key74;
                  string _val75;
                  _key74 = iprot.ReadString();
                  _val75 = iprot.ReadString();
                  Parameters[_key74] = _val75;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("NodeInfoDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (ClusterId != null && __isset.clusterId) {
        field.Name = "clusterId";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClusterId);
        oprot.WriteFieldEnd();
      }
      if (__isset.type) {
        field.Name = "type";
        field.Type = TType.I32;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)Type);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfCores) {
        field.Name = "numberOfCores";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumberOfCores);
        oprot.WriteFieldEnd();
      }
      if (__isset.load) {
        field.Name = "load";
        field.Type = TType.Double;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteDouble(Load);
        oprot.WriteFieldEnd();
      }
      if (__isset.timeStamp) {
        field.Name = "timeStamp";
        field.Type = TType.I64;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(TimeStamp);
        oprot.WriteFieldEnd();
      }
      if (Parameters != null && __isset.parameters) {
        field.Name = "parameters";
        field.Type = TType.Map;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, Parameters.Count));
          foreach (string _iter76 in Parameters.Keys)
          {
            oprot.WriteString(_iter76);
            oprot.WriteString(Parameters[_iter76]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("NodeInfoDTO(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (ClusterId != null && __isset.clusterId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ClusterId: ");
      __sb.Append(ClusterId);
    }
    if (__isset.type) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Type: ");
      __sb.Append(Type);
    }
    if (__isset.numberOfCores) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NumberOfCores: ");
      __sb.Append(NumberOfCores);
    }
    if (__isset.load) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Load: ");
      __sb.Append(Load);
    }
    if (__isset.timeStamp) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("TimeStamp: ");
      __sb.Append(TimeStamp);
    }
    if (Parameters != null && __isset.parameters) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Parameters: ");
      __sb.Append(Parameters);
    }
    if (Host != null && __isset.host) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Host: ");
      __sb.Append(Host);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

