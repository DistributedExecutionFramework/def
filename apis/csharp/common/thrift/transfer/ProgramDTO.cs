/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ProgramDTO : TBase
{
  private string _id;
  private ExecutionState _state;
  private long _createTime;
  private long _finishTime;
  private string _userId;
  private string _name;
  private string _description;
  private int _nrOfJobs;
  private Dictionary<string, string> _sharedResources;
  private string _clientRoutineId;
  private Dictionary<string, ResourceDTO> _results;
  private List<string> _messages;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="ExecutionState"/>
  /// </summary>
  public ExecutionState State
  {
    get
    {
      return _state;
    }
    set
    {
      __isset.state = true;
      this._state = value;
    }
  }

  public long CreateTime
  {
    get
    {
      return _createTime;
    }
    set
    {
      __isset.createTime = true;
      this._createTime = value;
    }
  }

  public long FinishTime
  {
    get
    {
      return _finishTime;
    }
    set
    {
      __isset.finishTime = true;
      this._finishTime = value;
    }
  }

  public string UserId
  {
    get
    {
      return _userId;
    }
    set
    {
      __isset.userId = true;
      this._userId = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string Description
  {
    get
    {
      return _description;
    }
    set
    {
      __isset.description = true;
      this._description = value;
    }
  }

  public int NrOfJobs
  {
    get
    {
      return _nrOfJobs;
    }
    set
    {
      __isset.nrOfJobs = true;
      this._nrOfJobs = value;
    }
  }

  public Dictionary<string, string> SharedResources
  {
    get
    {
      return _sharedResources;
    }
    set
    {
      __isset.sharedResources = true;
      this._sharedResources = value;
    }
  }

  public string ClientRoutineId
  {
    get
    {
      return _clientRoutineId;
    }
    set
    {
      __isset.clientRoutineId = true;
      this._clientRoutineId = value;
    }
  }

  public Dictionary<string, ResourceDTO> Results
  {
    get
    {
      return _results;
    }
    set
    {
      __isset.results = true;
      this._results = value;
    }
  }

  public List<string> Messages
  {
    get
    {
      return _messages;
    }
    set
    {
      __isset.messages = true;
      this._messages = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool state;
    public bool createTime;
    public bool finishTime;
    public bool userId;
    public bool name;
    public bool description;
    public bool nrOfJobs;
    public bool sharedResources;
    public bool clientRoutineId;
    public bool results;
    public bool messages;
  }

  public ProgramDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.I32) {
              State = (ExecutionState)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.I64) {
              CreateTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I64) {
              FinishTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              UserId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              Description = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              NrOfJobs = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.Map) {
              {
                SharedResources = new Dictionary<string, string>();
                TMap _map25 = iprot.ReadMapBegin();
                for( int _i26 = 0; _i26 < _map25.Count; ++_i26)
                {
                  string _key27;
                  string _val28;
                  _key27 = iprot.ReadString();
                  _val28 = iprot.ReadString();
                  SharedResources[_key27] = _val28;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              ClientRoutineId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.Map) {
              {
                Results = new Dictionary<string, ResourceDTO>();
                TMap _map29 = iprot.ReadMapBegin();
                for( int _i30 = 0; _i30 < _map29.Count; ++_i30)
                {
                  string _key31;
                  ResourceDTO _val32;
                  _key31 = iprot.ReadString();
                  _val32 = new ResourceDTO();
                  _val32.Read(iprot);
                  Results[_key31] = _val32;
                }
                iprot.ReadMapEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.List) {
              {
                Messages = new List<string>();
                TList _list33 = iprot.ReadListBegin();
                for( int _i34 = 0; _i34 < _list33.Count; ++_i34)
                {
                  string _elem35;
                  _elem35 = iprot.ReadString();
                  Messages.Add(_elem35);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ProgramDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (__isset.state) {
        field.Name = "state";
        field.Type = TType.I32;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)State);
        oprot.WriteFieldEnd();
      }
      if (__isset.createTime) {
        field.Name = "createTime";
        field.Type = TType.I64;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(CreateTime);
        oprot.WriteFieldEnd();
      }
      if (__isset.finishTime) {
        field.Name = "finishTime";
        field.Type = TType.I64;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(FinishTime);
        oprot.WriteFieldEnd();
      }
      if (UserId != null && __isset.userId) {
        field.Name = "userId";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(UserId);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (Description != null && __isset.description) {
        field.Name = "description";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Description);
        oprot.WriteFieldEnd();
      }
      if (__isset.nrOfJobs) {
        field.Name = "nrOfJobs";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NrOfJobs);
        oprot.WriteFieldEnd();
      }
      if (SharedResources != null && __isset.sharedResources) {
        field.Name = "sharedResources";
        field.Type = TType.Map;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.String, SharedResources.Count));
          foreach (string _iter36 in SharedResources.Keys)
          {
            oprot.WriteString(_iter36);
            oprot.WriteString(SharedResources[_iter36]);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (ClientRoutineId != null && __isset.clientRoutineId) {
        field.Name = "clientRoutineId";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClientRoutineId);
        oprot.WriteFieldEnd();
      }
      if (Results != null && __isset.results) {
        field.Name = "results";
        field.Type = TType.Map;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteMapBegin(new TMap(TType.String, TType.Struct, Results.Count));
          foreach (string _iter37 in Results.Keys)
          {
            oprot.WriteString(_iter37);
            Results[_iter37].Write(oprot);
          }
          oprot.WriteMapEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (Messages != null && __isset.messages) {
        field.Name = "messages";
        field.Type = TType.List;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, Messages.Count));
          foreach (string _iter38 in Messages)
          {
            oprot.WriteString(_iter38);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ProgramDTO(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (__isset.state) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("State: ");
      __sb.Append(State);
    }
    if (__isset.createTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CreateTime: ");
      __sb.Append(CreateTime);
    }
    if (__isset.finishTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("FinishTime: ");
      __sb.Append(FinishTime);
    }
    if (UserId != null && __isset.userId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("UserId: ");
      __sb.Append(UserId);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (Description != null && __isset.description) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Description: ");
      __sb.Append(Description);
    }
    if (__isset.nrOfJobs) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NrOfJobs: ");
      __sb.Append(NrOfJobs);
    }
    if (SharedResources != null && __isset.sharedResources) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SharedResources: ");
      __sb.Append(SharedResources);
    }
    if (ClientRoutineId != null && __isset.clientRoutineId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ClientRoutineId: ");
      __sb.Append(ClientRoutineId);
    }
    if (Results != null && __isset.results) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Results: ");
      __sb.Append(Results);
    }
    if (Messages != null && __isset.messages) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Messages: ");
      __sb.Append(Messages);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

