/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class ExecLogicService {
  /// <summary>
  /// Execution Service: Handles all Programs, Jobs and Tasks.
  /// </summary>
  public interface ISync {
    /// <summary>
    /// Returns all program ids which are accessable by given user id.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="userId"></param>
    string getAllPrograms(string userId);
    /// <summary>
    /// Request the creation of a new Program on a specified Cluster (clusterId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="clusterId"></param>
    /// <param name="userId"></param>
    string createProgram(string clusterId, string userId);
    /// <summary>
    /// Returns info about Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string getProgram(string pId);
    /// <summary>
    /// Delete existing Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string deleteProgram(string pId);
    /// <summary>
    /// Abort running Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string abortProgram(string pId);
    /// <summary>
    /// Update name of Programm (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="name"></param>
    string updateProgramName(string pId, string name);
    /// <summary>
    /// Update description of Programm (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="description"></param>
    string updateProgramDescription(string pId, string description);
    /// <summary>
    /// Mark Program (pId) as finished.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string markProgramAsFinished(string pId);
    /// <summary>
    /// Request the list of Jobs (jId) for a given Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string getAllJobs(string pId);
    /// <summary>
    /// Request the creation of a new Job on a specified Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string createJob(string pId);
    /// <summary>
    /// Requests info about specific Job given by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    string getJob(string pId, string jId);
    /// <summary>
    /// Requests deletion of a specific Job given by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    string deleteJob(string pId, string jId);
    /// <summary>
    /// Request the MapRoutine which is attached to the specified Job by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    string getAttachedMapRoutine(string pId, string jId);
    /// <summary>
    /// Attaches a MapRoutine (mapRoutineId) to an Job (specified by pId and jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="mapRoutineId"></param>
    string attachMapRoutine(string pId, string jId, string mapRoutineId);
    /// <summary>
    /// Returns attached ReduceRoutine (rlId) of the requested Program (pId) and Job (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    string getAttachedReduceRoutine(string pId, string jId);
    /// <summary>
    /// Attaches a ReduceRoutine (rlId) to an Job (specified by pId and jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="reduceRoutineId"></param>
    string attachReduceRoutine(string pId, string jId, string reduceRoutineId);
    /// <summary>
    /// Requests a list of all Tasks (tId) for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="sortingCriterion"></param>
    string getAllTasks(string pId, string jId, SortingCriterion sortingCriterion);
    /// <summary>
    /// Requests a list of Tasks (tId) matching with the given etate for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="state"></param>
    /// <param name="sortingCriterion"></param>
    string getAllTasksWithState(string pId, string jId, ExecutionState state, SortingCriterion sortingCriterion);
    /// <summary>
    /// Request the creation of a new Task on a specified Program (pId) and Job (jId) using
    /// given Routine Instance (= Routine Id with Parameters)
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="objectiveRoutine"></param>
    string createTask(string pId, string jId, RoutineInstanceDTO objectiveRoutine);
    /// <summary>
    /// Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    string getTask(string pId, string jId, string tId);
    /// <summary>
    /// Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
    /// Includes in- and/or out-resources (parameter) if set.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    /// <param name="includeInParameters"></param>
    /// <param name="includeOutParameters"></param>
    string getTaskPartial(string pId, string jId, string tId, bool includeInParameters, bool includeOutParameters);
    /// <summary>
    /// Mark the given Job (jId) on Program (pId) as complete. This means all Tasks are created.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    string markJobAsComplete(string pId, string jId);
    /// <summary>
    /// Abort Job (jId) on Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    string abortJob(string pId, string jId);
    /// <summary>
    /// Abort a running Task (tId) on a specified Job (jId) and Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    string abortTask(string pId, string jId, string tId);
    /// <summary>
    /// Re run a given Task (tId). This Task must be at state FAILED or SUCCESS.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    string reRunTask(string pId, string jId, string tId);
    /// <summary>
    /// Request a list of all SharedResources of a Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    string getAllSharedResources(string pId);
    /// <summary>
    /// Request the creation of a new SharedResource on a specified Program (pId) of a given DatyType (dataType) and data.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="dataTypeId"></param>
    /// <param name="data"></param>
    string createSharedResource(string pId, string dataTypeId, byte[] data);
    /// <summary>
    /// Request the SharedResource by a combination of Program (pId) and SharedResource (rId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="rId"></param>
    string getSharedResource(string pId, string rId);
    /// <summary>
    /// Request the deletion of a SharedResource by a combination of Program (pId) and SharedResource (rId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="rId"></param>
    string deleteSharedResource(string pId, string rId);
  }

  /// <summary>
  /// Execution Service: Handles all Programs, Jobs and Tasks.
  /// </summary>
  public interface Iface : ISync {
    /// <summary>
    /// Returns all program ids which are accessable by given user id.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="userId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAllPrograms(AsyncCallback callback, object state, string userId);
    string End_getAllPrograms(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the creation of a new Program on a specified Cluster (clusterId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="clusterId"></param>
    /// <param name="userId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createProgram(AsyncCallback callback, object state, string clusterId, string userId);
    string End_createProgram(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns info about Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getProgram(AsyncCallback callback, object state, string pId);
    string End_getProgram(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Delete existing Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_deleteProgram(AsyncCallback callback, object state, string pId);
    string End_deleteProgram(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Abort running Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_abortProgram(AsyncCallback callback, object state, string pId);
    string End_abortProgram(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Update name of Programm (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="name"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_updateProgramName(AsyncCallback callback, object state, string pId, string name);
    string End_updateProgramName(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Update description of Programm (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="description"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_updateProgramDescription(AsyncCallback callback, object state, string pId, string description);
    string End_updateProgramDescription(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Mark Program (pId) as finished.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_markProgramAsFinished(AsyncCallback callback, object state, string pId);
    string End_markProgramAsFinished(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the list of Jobs (jId) for a given Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAllJobs(AsyncCallback callback, object state, string pId);
    string End_getAllJobs(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the creation of a new Job on a specified Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createJob(AsyncCallback callback, object state, string pId);
    string End_createJob(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Requests info about specific Job given by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getJob(AsyncCallback callback, object state, string pId, string jId);
    string End_getJob(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Requests deletion of a specific Job given by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_deleteJob(AsyncCallback callback, object state, string pId, string jId);
    string End_deleteJob(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the MapRoutine which is attached to the specified Job by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAttachedMapRoutine(AsyncCallback callback, object state, string pId, string jId);
    string End_getAttachedMapRoutine(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Attaches a MapRoutine (mapRoutineId) to an Job (specified by pId and jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="mapRoutineId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_attachMapRoutine(AsyncCallback callback, object state, string pId, string jId, string mapRoutineId);
    string End_attachMapRoutine(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns attached ReduceRoutine (rlId) of the requested Program (pId) and Job (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAttachedReduceRoutine(AsyncCallback callback, object state, string pId, string jId);
    string End_getAttachedReduceRoutine(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Attaches a ReduceRoutine (rlId) to an Job (specified by pId and jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="reduceRoutineId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_attachReduceRoutine(AsyncCallback callback, object state, string pId, string jId, string reduceRoutineId);
    string End_attachReduceRoutine(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Requests a list of all Tasks (tId) for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="sortingCriterion"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAllTasks(AsyncCallback callback, object state, string pId, string jId, SortingCriterion sortingCriterion);
    string End_getAllTasks(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Requests a list of Tasks (tId) matching with the given etate for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="state"></param>
    /// <param name="sortingCriterion"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAllTasksWithState(AsyncCallback callback, object state, string pId, string jId, ExecutionState state, SortingCriterion sortingCriterion);
    string End_getAllTasksWithState(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the creation of a new Task on a specified Program (pId) and Job (jId) using
    /// given Routine Instance (= Routine Id with Parameters)
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="objectiveRoutine"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createTask(AsyncCallback callback, object state, string pId, string jId, RoutineInstanceDTO objectiveRoutine);
    string End_createTask(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getTask(AsyncCallback callback, object state, string pId, string jId, string tId);
    string End_getTask(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
    /// Includes in- and/or out-resources (parameter) if set.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    /// <param name="includeInParameters"></param>
    /// <param name="includeOutParameters"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getTaskPartial(AsyncCallback callback, object state, string pId, string jId, string tId, bool includeInParameters, bool includeOutParameters);
    string End_getTaskPartial(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Mark the given Job (jId) on Program (pId) as complete. This means all Tasks are created.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_markJobAsComplete(AsyncCallback callback, object state, string pId, string jId);
    string End_markJobAsComplete(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Abort Job (jId) on Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_abortJob(AsyncCallback callback, object state, string pId, string jId);
    string End_abortJob(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Abort a running Task (tId) on a specified Job (jId) and Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_abortTask(AsyncCallback callback, object state, string pId, string jId, string tId);
    string End_abortTask(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Re run a given Task (tId). This Task must be at state FAILED or SUCCESS.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_reRunTask(AsyncCallback callback, object state, string pId, string jId, string tId);
    string End_reRunTask(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request a list of all SharedResources of a Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getAllSharedResources(AsyncCallback callback, object state, string pId);
    string End_getAllSharedResources(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the creation of a new SharedResource on a specified Program (pId) of a given DatyType (dataType) and data.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="dataTypeId"></param>
    /// <param name="data"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createSharedResource(AsyncCallback callback, object state, string pId, string dataTypeId, byte[] data);
    string End_createSharedResource(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the SharedResource by a combination of Program (pId) and SharedResource (rId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="rId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getSharedResource(AsyncCallback callback, object state, string pId, string rId);
    string End_getSharedResource(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request the deletion of a SharedResource by a combination of Program (pId) and SharedResource (rId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="rId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_deleteSharedResource(AsyncCallback callback, object state, string pId, string rId);
    string End_deleteSharedResource(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// Execution Service: Handles all Programs, Jobs and Tasks.
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAllPrograms(AsyncCallback callback, object state, string userId)
    {
      return send_getAllPrograms(callback, state, userId);
    }

    public string End_getAllPrograms(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllPrograms();
    }

    #endif

    /// <summary>
    /// Returns all program ids which are accessable by given user id.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="userId"></param>
    public string getAllPrograms(string userId)
    {
      #if !SILVERLIGHT
      send_getAllPrograms(userId);
      return recv_getAllPrograms();

      #else
      var asyncResult = Begin_getAllPrograms(null, null, userId);
      return End_getAllPrograms(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllPrograms(AsyncCallback callback, object state, string userId)
    #else
    public void send_getAllPrograms(string userId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAllPrograms", TMessageType.Call, seqid_));
      getAllPrograms_args args = new getAllPrograms_args();
      args.UserId = userId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAllPrograms()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllPrograms_result result = new getAllPrograms_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllPrograms failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createProgram(AsyncCallback callback, object state, string clusterId, string userId)
    {
      return send_createProgram(callback, state, clusterId, userId);
    }

    public string End_createProgram(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createProgram();
    }

    #endif

    /// <summary>
    /// Request the creation of a new Program on a specified Cluster (clusterId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="clusterId"></param>
    /// <param name="userId"></param>
    public string createProgram(string clusterId, string userId)
    {
      #if !SILVERLIGHT
      send_createProgram(clusterId, userId);
      return recv_createProgram();

      #else
      var asyncResult = Begin_createProgram(null, null, clusterId, userId);
      return End_createProgram(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createProgram(AsyncCallback callback, object state, string clusterId, string userId)
    #else
    public void send_createProgram(string clusterId, string userId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createProgram", TMessageType.Call, seqid_));
      createProgram_args args = new createProgram_args();
      args.ClusterId = clusterId;
      args.UserId = userId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createProgram()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createProgram_result result = new createProgram_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createProgram failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getProgram(AsyncCallback callback, object state, string pId)
    {
      return send_getProgram(callback, state, pId);
    }

    public string End_getProgram(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getProgram();
    }

    #endif

    /// <summary>
    /// Returns info about Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string getProgram(string pId)
    {
      #if !SILVERLIGHT
      send_getProgram(pId);
      return recv_getProgram();

      #else
      var asyncResult = Begin_getProgram(null, null, pId);
      return End_getProgram(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getProgram(AsyncCallback callback, object state, string pId)
    #else
    public void send_getProgram(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getProgram", TMessageType.Call, seqid_));
      getProgram_args args = new getProgram_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getProgram()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getProgram_result result = new getProgram_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getProgram failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteProgram(AsyncCallback callback, object state, string pId)
    {
      return send_deleteProgram(callback, state, pId);
    }

    public string End_deleteProgram(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteProgram();
    }

    #endif

    /// <summary>
    /// Delete existing Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string deleteProgram(string pId)
    {
      #if !SILVERLIGHT
      send_deleteProgram(pId);
      return recv_deleteProgram();

      #else
      var asyncResult = Begin_deleteProgram(null, null, pId);
      return End_deleteProgram(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteProgram(AsyncCallback callback, object state, string pId)
    #else
    public void send_deleteProgram(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteProgram", TMessageType.Call, seqid_));
      deleteProgram_args args = new deleteProgram_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_deleteProgram()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteProgram_result result = new deleteProgram_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteProgram failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_abortProgram(AsyncCallback callback, object state, string pId)
    {
      return send_abortProgram(callback, state, pId);
    }

    public string End_abortProgram(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_abortProgram();
    }

    #endif

    /// <summary>
    /// Abort running Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string abortProgram(string pId)
    {
      #if !SILVERLIGHT
      send_abortProgram(pId);
      return recv_abortProgram();

      #else
      var asyncResult = Begin_abortProgram(null, null, pId);
      return End_abortProgram(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_abortProgram(AsyncCallback callback, object state, string pId)
    #else
    public void send_abortProgram(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("abortProgram", TMessageType.Call, seqid_));
      abortProgram_args args = new abortProgram_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_abortProgram()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      abortProgram_result result = new abortProgram_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "abortProgram failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updateProgramName(AsyncCallback callback, object state, string pId, string name)
    {
      return send_updateProgramName(callback, state, pId, name);
    }

    public string End_updateProgramName(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateProgramName();
    }

    #endif

    /// <summary>
    /// Update name of Programm (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="name"></param>
    public string updateProgramName(string pId, string name)
    {
      #if !SILVERLIGHT
      send_updateProgramName(pId, name);
      return recv_updateProgramName();

      #else
      var asyncResult = Begin_updateProgramName(null, null, pId, name);
      return End_updateProgramName(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateProgramName(AsyncCallback callback, object state, string pId, string name)
    #else
    public void send_updateProgramName(string pId, string name)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updateProgramName", TMessageType.Call, seqid_));
      updateProgramName_args args = new updateProgramName_args();
      args.PId = pId;
      args.Name = name;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_updateProgramName()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateProgramName_result result = new updateProgramName_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateProgramName failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_updateProgramDescription(AsyncCallback callback, object state, string pId, string description)
    {
      return send_updateProgramDescription(callback, state, pId, description);
    }

    public string End_updateProgramDescription(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_updateProgramDescription();
    }

    #endif

    /// <summary>
    /// Update description of Programm (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="description"></param>
    public string updateProgramDescription(string pId, string description)
    {
      #if !SILVERLIGHT
      send_updateProgramDescription(pId, description);
      return recv_updateProgramDescription();

      #else
      var asyncResult = Begin_updateProgramDescription(null, null, pId, description);
      return End_updateProgramDescription(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_updateProgramDescription(AsyncCallback callback, object state, string pId, string description)
    #else
    public void send_updateProgramDescription(string pId, string description)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("updateProgramDescription", TMessageType.Call, seqid_));
      updateProgramDescription_args args = new updateProgramDescription_args();
      args.PId = pId;
      args.Description = description;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_updateProgramDescription()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      updateProgramDescription_result result = new updateProgramDescription_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "updateProgramDescription failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_markProgramAsFinished(AsyncCallback callback, object state, string pId)
    {
      return send_markProgramAsFinished(callback, state, pId);
    }

    public string End_markProgramAsFinished(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_markProgramAsFinished();
    }

    #endif

    /// <summary>
    /// Mark Program (pId) as finished.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string markProgramAsFinished(string pId)
    {
      #if !SILVERLIGHT
      send_markProgramAsFinished(pId);
      return recv_markProgramAsFinished();

      #else
      var asyncResult = Begin_markProgramAsFinished(null, null, pId);
      return End_markProgramAsFinished(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_markProgramAsFinished(AsyncCallback callback, object state, string pId)
    #else
    public void send_markProgramAsFinished(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("markProgramAsFinished", TMessageType.Call, seqid_));
      markProgramAsFinished_args args = new markProgramAsFinished_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_markProgramAsFinished()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      markProgramAsFinished_result result = new markProgramAsFinished_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "markProgramAsFinished failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAllJobs(AsyncCallback callback, object state, string pId)
    {
      return send_getAllJobs(callback, state, pId);
    }

    public string End_getAllJobs(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllJobs();
    }

    #endif

    /// <summary>
    /// Request the list of Jobs (jId) for a given Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string getAllJobs(string pId)
    {
      #if !SILVERLIGHT
      send_getAllJobs(pId);
      return recv_getAllJobs();

      #else
      var asyncResult = Begin_getAllJobs(null, null, pId);
      return End_getAllJobs(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllJobs(AsyncCallback callback, object state, string pId)
    #else
    public void send_getAllJobs(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAllJobs", TMessageType.Call, seqid_));
      getAllJobs_args args = new getAllJobs_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAllJobs()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllJobs_result result = new getAllJobs_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllJobs failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createJob(AsyncCallback callback, object state, string pId)
    {
      return send_createJob(callback, state, pId);
    }

    public string End_createJob(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createJob();
    }

    #endif

    /// <summary>
    /// Request the creation of a new Job on a specified Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string createJob(string pId)
    {
      #if !SILVERLIGHT
      send_createJob(pId);
      return recv_createJob();

      #else
      var asyncResult = Begin_createJob(null, null, pId);
      return End_createJob(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createJob(AsyncCallback callback, object state, string pId)
    #else
    public void send_createJob(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createJob", TMessageType.Call, seqid_));
      createJob_args args = new createJob_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createJob()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createJob_result result = new createJob_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createJob failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getJob(AsyncCallback callback, object state, string pId, string jId)
    {
      return send_getJob(callback, state, pId, jId);
    }

    public string End_getJob(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getJob();
    }

    #endif

    /// <summary>
    /// Requests info about specific Job given by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    public string getJob(string pId, string jId)
    {
      #if !SILVERLIGHT
      send_getJob(pId, jId);
      return recv_getJob();

      #else
      var asyncResult = Begin_getJob(null, null, pId, jId);
      return End_getJob(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getJob(AsyncCallback callback, object state, string pId, string jId)
    #else
    public void send_getJob(string pId, string jId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getJob", TMessageType.Call, seqid_));
      getJob_args args = new getJob_args();
      args.PId = pId;
      args.JId = jId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getJob()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getJob_result result = new getJob_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getJob failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteJob(AsyncCallback callback, object state, string pId, string jId)
    {
      return send_deleteJob(callback, state, pId, jId);
    }

    public string End_deleteJob(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteJob();
    }

    #endif

    /// <summary>
    /// Requests deletion of a specific Job given by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    public string deleteJob(string pId, string jId)
    {
      #if !SILVERLIGHT
      send_deleteJob(pId, jId);
      return recv_deleteJob();

      #else
      var asyncResult = Begin_deleteJob(null, null, pId, jId);
      return End_deleteJob(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteJob(AsyncCallback callback, object state, string pId, string jId)
    #else
    public void send_deleteJob(string pId, string jId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteJob", TMessageType.Call, seqid_));
      deleteJob_args args = new deleteJob_args();
      args.PId = pId;
      args.JId = jId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_deleteJob()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteJob_result result = new deleteJob_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteJob failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAttachedMapRoutine(AsyncCallback callback, object state, string pId, string jId)
    {
      return send_getAttachedMapRoutine(callback, state, pId, jId);
    }

    public string End_getAttachedMapRoutine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAttachedMapRoutine();
    }

    #endif

    /// <summary>
    /// Request the MapRoutine which is attached to the specified Job by Program Id (pId) and Job Id (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    public string getAttachedMapRoutine(string pId, string jId)
    {
      #if !SILVERLIGHT
      send_getAttachedMapRoutine(pId, jId);
      return recv_getAttachedMapRoutine();

      #else
      var asyncResult = Begin_getAttachedMapRoutine(null, null, pId, jId);
      return End_getAttachedMapRoutine(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAttachedMapRoutine(AsyncCallback callback, object state, string pId, string jId)
    #else
    public void send_getAttachedMapRoutine(string pId, string jId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAttachedMapRoutine", TMessageType.Call, seqid_));
      getAttachedMapRoutine_args args = new getAttachedMapRoutine_args();
      args.PId = pId;
      args.JId = jId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAttachedMapRoutine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAttachedMapRoutine_result result = new getAttachedMapRoutine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAttachedMapRoutine failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_attachMapRoutine(AsyncCallback callback, object state, string pId, string jId, string mapRoutineId)
    {
      return send_attachMapRoutine(callback, state, pId, jId, mapRoutineId);
    }

    public string End_attachMapRoutine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_attachMapRoutine();
    }

    #endif

    /// <summary>
    /// Attaches a MapRoutine (mapRoutineId) to an Job (specified by pId and jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="mapRoutineId"></param>
    public string attachMapRoutine(string pId, string jId, string mapRoutineId)
    {
      #if !SILVERLIGHT
      send_attachMapRoutine(pId, jId, mapRoutineId);
      return recv_attachMapRoutine();

      #else
      var asyncResult = Begin_attachMapRoutine(null, null, pId, jId, mapRoutineId);
      return End_attachMapRoutine(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_attachMapRoutine(AsyncCallback callback, object state, string pId, string jId, string mapRoutineId)
    #else
    public void send_attachMapRoutine(string pId, string jId, string mapRoutineId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("attachMapRoutine", TMessageType.Call, seqid_));
      attachMapRoutine_args args = new attachMapRoutine_args();
      args.PId = pId;
      args.JId = jId;
      args.MapRoutineId = mapRoutineId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_attachMapRoutine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      attachMapRoutine_result result = new attachMapRoutine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "attachMapRoutine failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAttachedReduceRoutine(AsyncCallback callback, object state, string pId, string jId)
    {
      return send_getAttachedReduceRoutine(callback, state, pId, jId);
    }

    public string End_getAttachedReduceRoutine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAttachedReduceRoutine();
    }

    #endif

    /// <summary>
    /// Returns attached ReduceRoutine (rlId) of the requested Program (pId) and Job (jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    public string getAttachedReduceRoutine(string pId, string jId)
    {
      #if !SILVERLIGHT
      send_getAttachedReduceRoutine(pId, jId);
      return recv_getAttachedReduceRoutine();

      #else
      var asyncResult = Begin_getAttachedReduceRoutine(null, null, pId, jId);
      return End_getAttachedReduceRoutine(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAttachedReduceRoutine(AsyncCallback callback, object state, string pId, string jId)
    #else
    public void send_getAttachedReduceRoutine(string pId, string jId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAttachedReduceRoutine", TMessageType.Call, seqid_));
      getAttachedReduceRoutine_args args = new getAttachedReduceRoutine_args();
      args.PId = pId;
      args.JId = jId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAttachedReduceRoutine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAttachedReduceRoutine_result result = new getAttachedReduceRoutine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAttachedReduceRoutine failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_attachReduceRoutine(AsyncCallback callback, object state, string pId, string jId, string reduceRoutineId)
    {
      return send_attachReduceRoutine(callback, state, pId, jId, reduceRoutineId);
    }

    public string End_attachReduceRoutine(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_attachReduceRoutine();
    }

    #endif

    /// <summary>
    /// Attaches a ReduceRoutine (rlId) to an Job (specified by pId and jId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="reduceRoutineId"></param>
    public string attachReduceRoutine(string pId, string jId, string reduceRoutineId)
    {
      #if !SILVERLIGHT
      send_attachReduceRoutine(pId, jId, reduceRoutineId);
      return recv_attachReduceRoutine();

      #else
      var asyncResult = Begin_attachReduceRoutine(null, null, pId, jId, reduceRoutineId);
      return End_attachReduceRoutine(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_attachReduceRoutine(AsyncCallback callback, object state, string pId, string jId, string reduceRoutineId)
    #else
    public void send_attachReduceRoutine(string pId, string jId, string reduceRoutineId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("attachReduceRoutine", TMessageType.Call, seqid_));
      attachReduceRoutine_args args = new attachReduceRoutine_args();
      args.PId = pId;
      args.JId = jId;
      args.ReduceRoutineId = reduceRoutineId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_attachReduceRoutine()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      attachReduceRoutine_result result = new attachReduceRoutine_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "attachReduceRoutine failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAllTasks(AsyncCallback callback, object state, string pId, string jId, SortingCriterion sortingCriterion)
    {
      return send_getAllTasks(callback, state, pId, jId, sortingCriterion);
    }

    public string End_getAllTasks(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllTasks();
    }

    #endif

    /// <summary>
    /// Requests a list of all Tasks (tId) for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="sortingCriterion"></param>
    public string getAllTasks(string pId, string jId, SortingCriterion sortingCriterion)
    {
      #if !SILVERLIGHT
      send_getAllTasks(pId, jId, sortingCriterion);
      return recv_getAllTasks();

      #else
      var asyncResult = Begin_getAllTasks(null, null, pId, jId, sortingCriterion);
      return End_getAllTasks(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllTasks(AsyncCallback callback, object state, string pId, string jId, SortingCriterion sortingCriterion)
    #else
    public void send_getAllTasks(string pId, string jId, SortingCriterion sortingCriterion)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAllTasks", TMessageType.Call, seqid_));
      getAllTasks_args args = new getAllTasks_args();
      args.PId = pId;
      args.JId = jId;
      args.SortingCriterion = sortingCriterion;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAllTasks()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllTasks_result result = new getAllTasks_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllTasks failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAllTasksWithState(AsyncCallback callback, object state, string pId, string jId, ExecutionState state, SortingCriterion sortingCriterion)
    {
      return send_getAllTasksWithState(callback, state, pId, jId, state, sortingCriterion);
    }

    public string End_getAllTasksWithState(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllTasksWithState();
    }

    #endif

    /// <summary>
    /// Requests a list of Tasks (tId) matching with the given etate for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="state"></param>
    /// <param name="sortingCriterion"></param>
    public string getAllTasksWithState(string pId, string jId, ExecutionState state, SortingCriterion sortingCriterion)
    {
      #if !SILVERLIGHT
      send_getAllTasksWithState(pId, jId, state, sortingCriterion);
      return recv_getAllTasksWithState();

      #else
      var asyncResult = Begin_getAllTasksWithState(null, null, pId, jId, state, sortingCriterion);
      return End_getAllTasksWithState(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllTasksWithState(AsyncCallback callback, object state, string pId, string jId, ExecutionState state, SortingCriterion sortingCriterion)
    #else
    public void send_getAllTasksWithState(string pId, string jId, ExecutionState state, SortingCriterion sortingCriterion)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAllTasksWithState", TMessageType.Call, seqid_));
      getAllTasksWithState_args args = new getAllTasksWithState_args();
      args.PId = pId;
      args.JId = jId;
      args.State = state;
      args.SortingCriterion = sortingCriterion;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAllTasksWithState()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllTasksWithState_result result = new getAllTasksWithState_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllTasksWithState failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createTask(AsyncCallback callback, object state, string pId, string jId, RoutineInstanceDTO objectiveRoutine)
    {
      return send_createTask(callback, state, pId, jId, objectiveRoutine);
    }

    public string End_createTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createTask();
    }

    #endif

    /// <summary>
    /// Request the creation of a new Task on a specified Program (pId) and Job (jId) using
    /// given Routine Instance (= Routine Id with Parameters)
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="objectiveRoutine"></param>
    public string createTask(string pId, string jId, RoutineInstanceDTO objectiveRoutine)
    {
      #if !SILVERLIGHT
      send_createTask(pId, jId, objectiveRoutine);
      return recv_createTask();

      #else
      var asyncResult = Begin_createTask(null, null, pId, jId, objectiveRoutine);
      return End_createTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createTask(AsyncCallback callback, object state, string pId, string jId, RoutineInstanceDTO objectiveRoutine)
    #else
    public void send_createTask(string pId, string jId, RoutineInstanceDTO objectiveRoutine)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createTask", TMessageType.Call, seqid_));
      createTask_args args = new createTask_args();
      args.PId = pId;
      args.JId = jId;
      args.ObjectiveRoutine = objectiveRoutine;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createTask_result result = new createTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createTask failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTask(AsyncCallback callback, object state, string pId, string jId, string tId)
    {
      return send_getTask(callback, state, pId, jId, tId);
    }

    public string End_getTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTask();
    }

    #endif

    /// <summary>
    /// Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    public string getTask(string pId, string jId, string tId)
    {
      #if !SILVERLIGHT
      send_getTask(pId, jId, tId);
      return recv_getTask();

      #else
      var asyncResult = Begin_getTask(null, null, pId, jId, tId);
      return End_getTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTask(AsyncCallback callback, object state, string pId, string jId, string tId)
    #else
    public void send_getTask(string pId, string jId, string tId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTask", TMessageType.Call, seqid_));
      getTask_args args = new getTask_args();
      args.PId = pId;
      args.JId = jId;
      args.TId = tId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTask_result result = new getTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTask failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTaskPartial(AsyncCallback callback, object state, string pId, string jId, string tId, bool includeInParameters, bool includeOutParameters)
    {
      return send_getTaskPartial(callback, state, pId, jId, tId, includeInParameters, includeOutParameters);
    }

    public string End_getTaskPartial(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTaskPartial();
    }

    #endif

    /// <summary>
    /// Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
    /// Includes in- and/or out-resources (parameter) if set.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    /// <param name="includeInParameters"></param>
    /// <param name="includeOutParameters"></param>
    public string getTaskPartial(string pId, string jId, string tId, bool includeInParameters, bool includeOutParameters)
    {
      #if !SILVERLIGHT
      send_getTaskPartial(pId, jId, tId, includeInParameters, includeOutParameters);
      return recv_getTaskPartial();

      #else
      var asyncResult = Begin_getTaskPartial(null, null, pId, jId, tId, includeInParameters, includeOutParameters);
      return End_getTaskPartial(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTaskPartial(AsyncCallback callback, object state, string pId, string jId, string tId, bool includeInParameters, bool includeOutParameters)
    #else
    public void send_getTaskPartial(string pId, string jId, string tId, bool includeInParameters, bool includeOutParameters)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTaskPartial", TMessageType.Call, seqid_));
      getTaskPartial_args args = new getTaskPartial_args();
      args.PId = pId;
      args.JId = jId;
      args.TId = tId;
      args.IncludeInParameters = includeInParameters;
      args.IncludeOutParameters = includeOutParameters;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getTaskPartial()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTaskPartial_result result = new getTaskPartial_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTaskPartial failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_markJobAsComplete(AsyncCallback callback, object state, string pId, string jId)
    {
      return send_markJobAsComplete(callback, state, pId, jId);
    }

    public string End_markJobAsComplete(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_markJobAsComplete();
    }

    #endif

    /// <summary>
    /// Mark the given Job (jId) on Program (pId) as complete. This means all Tasks are created.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    public string markJobAsComplete(string pId, string jId)
    {
      #if !SILVERLIGHT
      send_markJobAsComplete(pId, jId);
      return recv_markJobAsComplete();

      #else
      var asyncResult = Begin_markJobAsComplete(null, null, pId, jId);
      return End_markJobAsComplete(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_markJobAsComplete(AsyncCallback callback, object state, string pId, string jId)
    #else
    public void send_markJobAsComplete(string pId, string jId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("markJobAsComplete", TMessageType.Call, seqid_));
      markJobAsComplete_args args = new markJobAsComplete_args();
      args.PId = pId;
      args.JId = jId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_markJobAsComplete()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      markJobAsComplete_result result = new markJobAsComplete_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "markJobAsComplete failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_abortJob(AsyncCallback callback, object state, string pId, string jId)
    {
      return send_abortJob(callback, state, pId, jId);
    }

    public string End_abortJob(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_abortJob();
    }

    #endif

    /// <summary>
    /// Abort Job (jId) on Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    public string abortJob(string pId, string jId)
    {
      #if !SILVERLIGHT
      send_abortJob(pId, jId);
      return recv_abortJob();

      #else
      var asyncResult = Begin_abortJob(null, null, pId, jId);
      return End_abortJob(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_abortJob(AsyncCallback callback, object state, string pId, string jId)
    #else
    public void send_abortJob(string pId, string jId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("abortJob", TMessageType.Call, seqid_));
      abortJob_args args = new abortJob_args();
      args.PId = pId;
      args.JId = jId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_abortJob()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      abortJob_result result = new abortJob_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "abortJob failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_abortTask(AsyncCallback callback, object state, string pId, string jId, string tId)
    {
      return send_abortTask(callback, state, pId, jId, tId);
    }

    public string End_abortTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_abortTask();
    }

    #endif

    /// <summary>
    /// Abort a running Task (tId) on a specified Job (jId) and Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    public string abortTask(string pId, string jId, string tId)
    {
      #if !SILVERLIGHT
      send_abortTask(pId, jId, tId);
      return recv_abortTask();

      #else
      var asyncResult = Begin_abortTask(null, null, pId, jId, tId);
      return End_abortTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_abortTask(AsyncCallback callback, object state, string pId, string jId, string tId)
    #else
    public void send_abortTask(string pId, string jId, string tId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("abortTask", TMessageType.Call, seqid_));
      abortTask_args args = new abortTask_args();
      args.PId = pId;
      args.JId = jId;
      args.TId = tId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_abortTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      abortTask_result result = new abortTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "abortTask failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_reRunTask(AsyncCallback callback, object state, string pId, string jId, string tId)
    {
      return send_reRunTask(callback, state, pId, jId, tId);
    }

    public string End_reRunTask(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_reRunTask();
    }

    #endif

    /// <summary>
    /// Re run a given Task (tId). This Task must be at state FAILED or SUCCESS.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="jId"></param>
    /// <param name="tId"></param>
    public string reRunTask(string pId, string jId, string tId)
    {
      #if !SILVERLIGHT
      send_reRunTask(pId, jId, tId);
      return recv_reRunTask();

      #else
      var asyncResult = Begin_reRunTask(null, null, pId, jId, tId);
      return End_reRunTask(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_reRunTask(AsyncCallback callback, object state, string pId, string jId, string tId)
    #else
    public void send_reRunTask(string pId, string jId, string tId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("reRunTask", TMessageType.Call, seqid_));
      reRunTask_args args = new reRunTask_args();
      args.PId = pId;
      args.JId = jId;
      args.TId = tId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_reRunTask()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      reRunTask_result result = new reRunTask_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "reRunTask failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getAllSharedResources(AsyncCallback callback, object state, string pId)
    {
      return send_getAllSharedResources(callback, state, pId);
    }

    public string End_getAllSharedResources(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getAllSharedResources();
    }

    #endif

    /// <summary>
    /// Request a list of all SharedResources of a Program (pId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    public string getAllSharedResources(string pId)
    {
      #if !SILVERLIGHT
      send_getAllSharedResources(pId);
      return recv_getAllSharedResources();

      #else
      var asyncResult = Begin_getAllSharedResources(null, null, pId);
      return End_getAllSharedResources(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getAllSharedResources(AsyncCallback callback, object state, string pId)
    #else
    public void send_getAllSharedResources(string pId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getAllSharedResources", TMessageType.Call, seqid_));
      getAllSharedResources_args args = new getAllSharedResources_args();
      args.PId = pId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getAllSharedResources()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getAllSharedResources_result result = new getAllSharedResources_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getAllSharedResources failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_createSharedResource(AsyncCallback callback, object state, string pId, string dataTypeId, byte[] data)
    {
      return send_createSharedResource(callback, state, pId, dataTypeId, data);
    }

    public string End_createSharedResource(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createSharedResource();
    }

    #endif

    /// <summary>
    /// Request the creation of a new SharedResource on a specified Program (pId) of a given DatyType (dataType) and data.
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="dataTypeId"></param>
    /// <param name="data"></param>
    public string createSharedResource(string pId, string dataTypeId, byte[] data)
    {
      #if !SILVERLIGHT
      send_createSharedResource(pId, dataTypeId, data);
      return recv_createSharedResource();

      #else
      var asyncResult = Begin_createSharedResource(null, null, pId, dataTypeId, data);
      return End_createSharedResource(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createSharedResource(AsyncCallback callback, object state, string pId, string dataTypeId, byte[] data)
    #else
    public void send_createSharedResource(string pId, string dataTypeId, byte[] data)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createSharedResource", TMessageType.Call, seqid_));
      createSharedResource_args args = new createSharedResource_args();
      args.PId = pId;
      args.DataTypeId = dataTypeId;
      args.Data = data;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createSharedResource()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createSharedResource_result result = new createSharedResource_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createSharedResource failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getSharedResource(AsyncCallback callback, object state, string pId, string rId)
    {
      return send_getSharedResource(callback, state, pId, rId);
    }

    public string End_getSharedResource(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getSharedResource();
    }

    #endif

    /// <summary>
    /// Request the SharedResource by a combination of Program (pId) and SharedResource (rId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="rId"></param>
    public string getSharedResource(string pId, string rId)
    {
      #if !SILVERLIGHT
      send_getSharedResource(pId, rId);
      return recv_getSharedResource();

      #else
      var asyncResult = Begin_getSharedResource(null, null, pId, rId);
      return End_getSharedResource(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getSharedResource(AsyncCallback callback, object state, string pId, string rId)
    #else
    public void send_getSharedResource(string pId, string rId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getSharedResource", TMessageType.Call, seqid_));
      getSharedResource_args args = new getSharedResource_args();
      args.PId = pId;
      args.RId = rId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getSharedResource()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getSharedResource_result result = new getSharedResource_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getSharedResource failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_deleteSharedResource(AsyncCallback callback, object state, string pId, string rId)
    {
      return send_deleteSharedResource(callback, state, pId, rId);
    }

    public string End_deleteSharedResource(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_deleteSharedResource();
    }

    #endif

    /// <summary>
    /// Request the deletion of a SharedResource by a combination of Program (pId) and SharedResource (rId).
    /// Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
    /// </summary>
    /// <param name="pId"></param>
    /// <param name="rId"></param>
    public string deleteSharedResource(string pId, string rId)
    {
      #if !SILVERLIGHT
      send_deleteSharedResource(pId, rId);
      return recv_deleteSharedResource();

      #else
      var asyncResult = Begin_deleteSharedResource(null, null, pId, rId);
      return End_deleteSharedResource(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_deleteSharedResource(AsyncCallback callback, object state, string pId, string rId)
    #else
    public void send_deleteSharedResource(string pId, string rId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("deleteSharedResource", TMessageType.Call, seqid_));
      deleteSharedResource_args args = new deleteSharedResource_args();
      args.PId = pId;
      args.RId = rId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_deleteSharedResource()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      deleteSharedResource_result result = new deleteSharedResource_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "deleteSharedResource failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getAllPrograms"] = getAllPrograms_Process;
      processMap_["createProgram"] = createProgram_Process;
      processMap_["getProgram"] = getProgram_Process;
      processMap_["deleteProgram"] = deleteProgram_Process;
      processMap_["abortProgram"] = abortProgram_Process;
      processMap_["updateProgramName"] = updateProgramName_Process;
      processMap_["updateProgramDescription"] = updateProgramDescription_Process;
      processMap_["markProgramAsFinished"] = markProgramAsFinished_Process;
      processMap_["getAllJobs"] = getAllJobs_Process;
      processMap_["createJob"] = createJob_Process;
      processMap_["getJob"] = getJob_Process;
      processMap_["deleteJob"] = deleteJob_Process;
      processMap_["getAttachedMapRoutine"] = getAttachedMapRoutine_Process;
      processMap_["attachMapRoutine"] = attachMapRoutine_Process;
      processMap_["getAttachedReduceRoutine"] = getAttachedReduceRoutine_Process;
      processMap_["attachReduceRoutine"] = attachReduceRoutine_Process;
      processMap_["getAllTasks"] = getAllTasks_Process;
      processMap_["getAllTasksWithState"] = getAllTasksWithState_Process;
      processMap_["createTask"] = createTask_Process;
      processMap_["getTask"] = getTask_Process;
      processMap_["getTaskPartial"] = getTaskPartial_Process;
      processMap_["markJobAsComplete"] = markJobAsComplete_Process;
      processMap_["abortJob"] = abortJob_Process;
      processMap_["abortTask"] = abortTask_Process;
      processMap_["reRunTask"] = reRunTask_Process;
      processMap_["getAllSharedResources"] = getAllSharedResources_Process;
      processMap_["createSharedResource"] = createSharedResource_Process;
      processMap_["getSharedResource"] = getSharedResource_Process;
      processMap_["deleteSharedResource"] = deleteSharedResource_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getAllPrograms_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllPrograms_args args = new getAllPrograms_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllPrograms_result result = new getAllPrograms_result();
      try
      {
        result.Success = iface_.getAllPrograms(args.UserId);
        oprot.WriteMessageBegin(new TMessage("getAllPrograms", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllPrograms", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createProgram_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createProgram_args args = new createProgram_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createProgram_result result = new createProgram_result();
      try
      {
        result.Success = iface_.createProgram(args.ClusterId, args.UserId);
        oprot.WriteMessageBegin(new TMessage("createProgram", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createProgram", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getProgram_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getProgram_args args = new getProgram_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getProgram_result result = new getProgram_result();
      try
      {
        result.Success = iface_.getProgram(args.PId);
        oprot.WriteMessageBegin(new TMessage("getProgram", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getProgram", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteProgram_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteProgram_args args = new deleteProgram_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteProgram_result result = new deleteProgram_result();
      try
      {
        result.Success = iface_.deleteProgram(args.PId);
        oprot.WriteMessageBegin(new TMessage("deleteProgram", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteProgram", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void abortProgram_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      abortProgram_args args = new abortProgram_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      abortProgram_result result = new abortProgram_result();
      try
      {
        result.Success = iface_.abortProgram(args.PId);
        oprot.WriteMessageBegin(new TMessage("abortProgram", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("abortProgram", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateProgramName_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateProgramName_args args = new updateProgramName_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateProgramName_result result = new updateProgramName_result();
      try
      {
        result.Success = iface_.updateProgramName(args.PId, args.Name);
        oprot.WriteMessageBegin(new TMessage("updateProgramName", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateProgramName", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void updateProgramDescription_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      updateProgramDescription_args args = new updateProgramDescription_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      updateProgramDescription_result result = new updateProgramDescription_result();
      try
      {
        result.Success = iface_.updateProgramDescription(args.PId, args.Description);
        oprot.WriteMessageBegin(new TMessage("updateProgramDescription", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("updateProgramDescription", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void markProgramAsFinished_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      markProgramAsFinished_args args = new markProgramAsFinished_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      markProgramAsFinished_result result = new markProgramAsFinished_result();
      try
      {
        result.Success = iface_.markProgramAsFinished(args.PId);
        oprot.WriteMessageBegin(new TMessage("markProgramAsFinished", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("markProgramAsFinished", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllJobs_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllJobs_args args = new getAllJobs_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllJobs_result result = new getAllJobs_result();
      try
      {
        result.Success = iface_.getAllJobs(args.PId);
        oprot.WriteMessageBegin(new TMessage("getAllJobs", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllJobs", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createJob_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createJob_args args = new createJob_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createJob_result result = new createJob_result();
      try
      {
        result.Success = iface_.createJob(args.PId);
        oprot.WriteMessageBegin(new TMessage("createJob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createJob", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getJob_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getJob_args args = new getJob_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getJob_result result = new getJob_result();
      try
      {
        result.Success = iface_.getJob(args.PId, args.JId);
        oprot.WriteMessageBegin(new TMessage("getJob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getJob", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteJob_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteJob_args args = new deleteJob_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteJob_result result = new deleteJob_result();
      try
      {
        result.Success = iface_.deleteJob(args.PId, args.JId);
        oprot.WriteMessageBegin(new TMessage("deleteJob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteJob", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAttachedMapRoutine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAttachedMapRoutine_args args = new getAttachedMapRoutine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAttachedMapRoutine_result result = new getAttachedMapRoutine_result();
      try
      {
        result.Success = iface_.getAttachedMapRoutine(args.PId, args.JId);
        oprot.WriteMessageBegin(new TMessage("getAttachedMapRoutine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAttachedMapRoutine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void attachMapRoutine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      attachMapRoutine_args args = new attachMapRoutine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      attachMapRoutine_result result = new attachMapRoutine_result();
      try
      {
        result.Success = iface_.attachMapRoutine(args.PId, args.JId, args.MapRoutineId);
        oprot.WriteMessageBegin(new TMessage("attachMapRoutine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("attachMapRoutine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAttachedReduceRoutine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAttachedReduceRoutine_args args = new getAttachedReduceRoutine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAttachedReduceRoutine_result result = new getAttachedReduceRoutine_result();
      try
      {
        result.Success = iface_.getAttachedReduceRoutine(args.PId, args.JId);
        oprot.WriteMessageBegin(new TMessage("getAttachedReduceRoutine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAttachedReduceRoutine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void attachReduceRoutine_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      attachReduceRoutine_args args = new attachReduceRoutine_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      attachReduceRoutine_result result = new attachReduceRoutine_result();
      try
      {
        result.Success = iface_.attachReduceRoutine(args.PId, args.JId, args.ReduceRoutineId);
        oprot.WriteMessageBegin(new TMessage("attachReduceRoutine", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("attachReduceRoutine", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllTasks_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllTasks_args args = new getAllTasks_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllTasks_result result = new getAllTasks_result();
      try
      {
        result.Success = iface_.getAllTasks(args.PId, args.JId, args.SortingCriterion);
        oprot.WriteMessageBegin(new TMessage("getAllTasks", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllTasks", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllTasksWithState_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllTasksWithState_args args = new getAllTasksWithState_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllTasksWithState_result result = new getAllTasksWithState_result();
      try
      {
        result.Success = iface_.getAllTasksWithState(args.PId, args.JId, args.State, args.SortingCriterion);
        oprot.WriteMessageBegin(new TMessage("getAllTasksWithState", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllTasksWithState", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createTask_args args = new createTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createTask_result result = new createTask_result();
      try
      {
        result.Success = iface_.createTask(args.PId, args.JId, args.ObjectiveRoutine);
        oprot.WriteMessageBegin(new TMessage("createTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTask_args args = new getTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTask_result result = new getTask_result();
      try
      {
        result.Success = iface_.getTask(args.PId, args.JId, args.TId);
        oprot.WriteMessageBegin(new TMessage("getTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getTaskPartial_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTaskPartial_args args = new getTaskPartial_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTaskPartial_result result = new getTaskPartial_result();
      try
      {
        result.Success = iface_.getTaskPartial(args.PId, args.JId, args.TId, args.IncludeInParameters, args.IncludeOutParameters);
        oprot.WriteMessageBegin(new TMessage("getTaskPartial", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getTaskPartial", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void markJobAsComplete_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      markJobAsComplete_args args = new markJobAsComplete_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      markJobAsComplete_result result = new markJobAsComplete_result();
      try
      {
        result.Success = iface_.markJobAsComplete(args.PId, args.JId);
        oprot.WriteMessageBegin(new TMessage("markJobAsComplete", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("markJobAsComplete", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void abortJob_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      abortJob_args args = new abortJob_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      abortJob_result result = new abortJob_result();
      try
      {
        result.Success = iface_.abortJob(args.PId, args.JId);
        oprot.WriteMessageBegin(new TMessage("abortJob", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("abortJob", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void abortTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      abortTask_args args = new abortTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      abortTask_result result = new abortTask_result();
      try
      {
        result.Success = iface_.abortTask(args.PId, args.JId, args.TId);
        oprot.WriteMessageBegin(new TMessage("abortTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("abortTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void reRunTask_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      reRunTask_args args = new reRunTask_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      reRunTask_result result = new reRunTask_result();
      try
      {
        result.Success = iface_.reRunTask(args.PId, args.JId, args.TId);
        oprot.WriteMessageBegin(new TMessage("reRunTask", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("reRunTask", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getAllSharedResources_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getAllSharedResources_args args = new getAllSharedResources_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getAllSharedResources_result result = new getAllSharedResources_result();
      try
      {
        result.Success = iface_.getAllSharedResources(args.PId);
        oprot.WriteMessageBegin(new TMessage("getAllSharedResources", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getAllSharedResources", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void createSharedResource_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createSharedResource_args args = new createSharedResource_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createSharedResource_result result = new createSharedResource_result();
      try
      {
        result.Success = iface_.createSharedResource(args.PId, args.DataTypeId, args.Data);
        oprot.WriteMessageBegin(new TMessage("createSharedResource", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createSharedResource", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getSharedResource_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getSharedResource_args args = new getSharedResource_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getSharedResource_result result = new getSharedResource_result();
      try
      {
        result.Success = iface_.getSharedResource(args.PId, args.RId);
        oprot.WriteMessageBegin(new TMessage("getSharedResource", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getSharedResource", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void deleteSharedResource_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      deleteSharedResource_args args = new deleteSharedResource_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      deleteSharedResource_result result = new deleteSharedResource_result();
      try
      {
        result.Success = iface_.deleteSharedResource(args.PId, args.RId);
        oprot.WriteMessageBegin(new TMessage("deleteSharedResource", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("deleteSharedResource", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllPrograms_args : TBase
  {
    private string _userId;

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool userId;
    }

    public getAllPrograms_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllPrograms_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllPrograms_args(");
      bool __first = true;
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllPrograms_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAllPrograms_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllPrograms_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllPrograms_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createProgram_args : TBase
  {
    private string _clusterId;
    private string _userId;

    public string ClusterId
    {
      get
      {
        return _clusterId;
      }
      set
      {
        __isset.clusterId = true;
        this._clusterId = value;
      }
    }

    public string UserId
    {
      get
      {
        return _userId;
      }
      set
      {
        __isset.userId = true;
        this._userId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool clusterId;
      public bool userId;
    }

    public createProgram_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                ClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                UserId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createProgram_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (ClusterId != null && __isset.clusterId) {
          field.Name = "clusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ClusterId);
          oprot.WriteFieldEnd();
        }
        if (UserId != null && __isset.userId) {
          field.Name = "userId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(UserId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createProgram_args(");
      bool __first = true;
      if (ClusterId != null && __isset.clusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ClusterId: ");
        __sb.Append(ClusterId);
      }
      if (UserId != null && __isset.userId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("UserId: ");
        __sb.Append(UserId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createProgram_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createProgram_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createProgram_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createProgram_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProgram_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public getProgram_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProgram_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProgram_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getProgram_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getProgram_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getProgram_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getProgram_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteProgram_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public deleteProgram_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteProgram_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteProgram_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteProgram_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteProgram_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteProgram_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteProgram_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class abortProgram_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public abortProgram_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("abortProgram_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("abortProgram_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class abortProgram_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public abortProgram_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("abortProgram_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("abortProgram_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProgramName_args : TBase
  {
    private string _pId;
    private string _name;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string Name
    {
      get
      {
        return _name;
      }
      set
      {
        __isset.name = true;
        this._name = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool name;
    }

    public updateProgramName_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Name = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProgramName_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (Name != null && __isset.name) {
          field.Name = "name";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Name);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProgramName_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (Name != null && __isset.name) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Name: ");
        __sb.Append(Name);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProgramName_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public updateProgramName_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProgramName_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProgramName_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProgramDescription_args : TBase
  {
    private string _pId;
    private string _description;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string Description
    {
      get
      {
        return _description;
      }
      set
      {
        __isset.description = true;
        this._description = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool description;
    }

    public updateProgramDescription_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                Description = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProgramDescription_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (Description != null && __isset.description) {
          field.Name = "description";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(Description);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProgramDescription_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (Description != null && __isset.description) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Description: ");
        __sb.Append(Description);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class updateProgramDescription_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public updateProgramDescription_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("updateProgramDescription_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("updateProgramDescription_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markProgramAsFinished_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public markProgramAsFinished_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markProgramAsFinished_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markProgramAsFinished_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markProgramAsFinished_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public markProgramAsFinished_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markProgramAsFinished_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markProgramAsFinished_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllJobs_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public getAllJobs_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllJobs_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllJobs_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllJobs_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAllJobs_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllJobs_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllJobs_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createJob_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public createJob_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createJob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createJob_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createJob_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createJob_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createJob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createJob_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJob_args : TBase
  {
    private string _pId;
    private string _jId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
    }

    public getJob_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJob_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getJob_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getJob_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getJob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getJob_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteJob_args : TBase
  {
    private string _pId;
    private string _jId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
    }

    public deleteJob_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteJob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteJob_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteJob_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteJob_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteJob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteJob_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAttachedMapRoutine_args : TBase
  {
    private string _pId;
    private string _jId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
    }

    public getAttachedMapRoutine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAttachedMapRoutine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAttachedMapRoutine_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAttachedMapRoutine_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAttachedMapRoutine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAttachedMapRoutine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAttachedMapRoutine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class attachMapRoutine_args : TBase
  {
    private string _pId;
    private string _jId;
    private string _mapRoutineId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public string MapRoutineId
    {
      get
      {
        return _mapRoutineId;
      }
      set
      {
        __isset.mapRoutineId = true;
        this._mapRoutineId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool mapRoutineId;
    }

    public attachMapRoutine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                MapRoutineId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("attachMapRoutine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (MapRoutineId != null && __isset.mapRoutineId) {
          field.Name = "mapRoutineId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(MapRoutineId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("attachMapRoutine_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (MapRoutineId != null && __isset.mapRoutineId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MapRoutineId: ");
        __sb.Append(MapRoutineId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class attachMapRoutine_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public attachMapRoutine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("attachMapRoutine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("attachMapRoutine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAttachedReduceRoutine_args : TBase
  {
    private string _pId;
    private string _jId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
    }

    public getAttachedReduceRoutine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAttachedReduceRoutine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAttachedReduceRoutine_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAttachedReduceRoutine_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAttachedReduceRoutine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAttachedReduceRoutine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAttachedReduceRoutine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class attachReduceRoutine_args : TBase
  {
    private string _pId;
    private string _jId;
    private string _reduceRoutineId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public string ReduceRoutineId
    {
      get
      {
        return _reduceRoutineId;
      }
      set
      {
        __isset.reduceRoutineId = true;
        this._reduceRoutineId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool reduceRoutineId;
    }

    public attachReduceRoutine_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                ReduceRoutineId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("attachReduceRoutine_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (ReduceRoutineId != null && __isset.reduceRoutineId) {
          field.Name = "reduceRoutineId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(ReduceRoutineId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("attachReduceRoutine_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (ReduceRoutineId != null && __isset.reduceRoutineId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ReduceRoutineId: ");
        __sb.Append(ReduceRoutineId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class attachReduceRoutine_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public attachReduceRoutine_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("attachReduceRoutine_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("attachReduceRoutine_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllTasks_args : TBase
  {
    private string _pId;
    private string _jId;
    private SortingCriterion _sortingCriterion;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref=".SortingCriterion"/>
    /// </summary>
    public SortingCriterion SortingCriterion
    {
      get
      {
        return _sortingCriterion;
      }
      set
      {
        __isset.sortingCriterion = true;
        this._sortingCriterion = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool sortingCriterion;
    }

    public getAllTasks_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                SortingCriterion = (SortingCriterion)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllTasks_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (__isset.sortingCriterion) {
          field.Name = "sortingCriterion";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SortingCriterion);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllTasks_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (__isset.sortingCriterion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SortingCriterion: ");
        __sb.Append(SortingCriterion);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllTasks_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAllTasks_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllTasks_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllTasks_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllTasksWithState_args : TBase
  {
    private string _pId;
    private string _jId;
    private ExecutionState _state;
    private SortingCriterion _sortingCriterion;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref=".ExecutionState"/>
    /// </summary>
    public ExecutionState State
    {
      get
      {
        return _state;
      }
      set
      {
        __isset.state = true;
        this._state = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref=".SortingCriterion"/>
    /// </summary>
    public SortingCriterion SortingCriterion
    {
      get
      {
        return _sortingCriterion;
      }
      set
      {
        __isset.sortingCriterion = true;
        this._sortingCriterion = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool state;
      public bool sortingCriterion;
    }

    public getAllTasksWithState_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                State = (ExecutionState)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.I32) {
                SortingCriterion = (SortingCriterion)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllTasksWithState_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (__isset.state) {
          field.Name = "state";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)State);
          oprot.WriteFieldEnd();
        }
        if (__isset.sortingCriterion) {
          field.Name = "sortingCriterion";
          field.Type = TType.I32;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)SortingCriterion);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllTasksWithState_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (__isset.state) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("State: ");
        __sb.Append(State);
      }
      if (__isset.sortingCriterion) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("SortingCriterion: ");
        __sb.Append(SortingCriterion);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllTasksWithState_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAllTasksWithState_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllTasksWithState_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllTasksWithState_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTask_args : TBase
  {
    private string _pId;
    private string _jId;
    private RoutineInstanceDTO _objectiveRoutine;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public RoutineInstanceDTO ObjectiveRoutine
    {
      get
      {
        return _objectiveRoutine;
      }
      set
      {
        __isset.objectiveRoutine = true;
        this._objectiveRoutine = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool objectiveRoutine;
    }

    public createTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.Struct) {
                ObjectiveRoutine = new RoutineInstanceDTO();
                ObjectiveRoutine.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (ObjectiveRoutine != null && __isset.objectiveRoutine) {
          field.Name = "objectiveRoutine";
          field.Type = TType.Struct;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          ObjectiveRoutine.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createTask_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (ObjectiveRoutine != null && __isset.objectiveRoutine) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("ObjectiveRoutine: ");
        __sb.Append(ObjectiveRoutine== null ? "<null>" : ObjectiveRoutine.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createTask_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createTask_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTask_args : TBase
  {
    private string _pId;
    private string _jId;
    private string _tId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public string TId
    {
      get
      {
        return _tId;
      }
      set
      {
        __isset.tId = true;
        this._tId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool tId;
    }

    public getTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (TId != null && __isset.tId) {
          field.Name = "tId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTask_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (TId != null && __isset.tId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TId: ");
        __sb.Append(TId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTask_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTask_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTaskPartial_args : TBase
  {
    private string _pId;
    private string _jId;
    private string _tId;
    private bool _includeInParameters;
    private bool _includeOutParameters;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public string TId
    {
      get
      {
        return _tId;
      }
      set
      {
        __isset.tId = true;
        this._tId = value;
      }
    }

    public bool IncludeInParameters
    {
      get
      {
        return _includeInParameters;
      }
      set
      {
        __isset.includeInParameters = true;
        this._includeInParameters = value;
      }
    }

    public bool IncludeOutParameters
    {
      get
      {
        return _includeOutParameters;
      }
      set
      {
        __isset.includeOutParameters = true;
        this._includeOutParameters = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool tId;
      public bool includeInParameters;
      public bool includeOutParameters;
    }

    public getTaskPartial_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 4:
              if (field.Type == TType.Bool) {
                IncludeInParameters = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 5:
              if (field.Type == TType.Bool) {
                IncludeOutParameters = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTaskPartial_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (TId != null && __isset.tId) {
          field.Name = "tId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TId);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeInParameters) {
          field.Name = "includeInParameters";
          field.Type = TType.Bool;
          field.ID = 4;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeInParameters);
          oprot.WriteFieldEnd();
        }
        if (__isset.includeOutParameters) {
          field.Name = "includeOutParameters";
          field.Type = TType.Bool;
          field.ID = 5;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(IncludeOutParameters);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTaskPartial_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (TId != null && __isset.tId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TId: ");
        __sb.Append(TId);
      }
      if (__isset.includeInParameters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeInParameters: ");
        __sb.Append(IncludeInParameters);
      }
      if (__isset.includeOutParameters) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("IncludeOutParameters: ");
        __sb.Append(IncludeOutParameters);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTaskPartial_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getTaskPartial_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTaskPartial_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTaskPartial_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markJobAsComplete_args : TBase
  {
    private string _pId;
    private string _jId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
    }

    public markJobAsComplete_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markJobAsComplete_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markJobAsComplete_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class markJobAsComplete_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public markJobAsComplete_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("markJobAsComplete_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("markJobAsComplete_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class abortJob_args : TBase
  {
    private string _pId;
    private string _jId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
    }

    public abortJob_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("abortJob_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("abortJob_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class abortJob_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public abortJob_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("abortJob_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("abortJob_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class abortTask_args : TBase
  {
    private string _pId;
    private string _jId;
    private string _tId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public string TId
    {
      get
      {
        return _tId;
      }
      set
      {
        __isset.tId = true;
        this._tId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool tId;
    }

    public abortTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("abortTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (TId != null && __isset.tId) {
          field.Name = "tId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("abortTask_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (TId != null && __isset.tId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TId: ");
        __sb.Append(TId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class abortTask_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public abortTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("abortTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("abortTask_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reRunTask_args : TBase
  {
    private string _pId;
    private string _jId;
    private string _tId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string JId
    {
      get
      {
        return _jId;
      }
      set
      {
        __isset.jId = true;
        this._jId = value;
      }
    }

    public string TId
    {
      get
      {
        return _tId;
      }
      set
      {
        __isset.tId = true;
        this._tId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool jId;
      public bool tId;
    }

    public reRunTask_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                JId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                TId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reRunTask_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (JId != null && __isset.jId) {
          field.Name = "jId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(JId);
          oprot.WriteFieldEnd();
        }
        if (TId != null && __isset.tId) {
          field.Name = "tId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reRunTask_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (JId != null && __isset.jId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("JId: ");
        __sb.Append(JId);
      }
      if (TId != null && __isset.tId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TId: ");
        __sb.Append(TId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class reRunTask_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public reRunTask_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("reRunTask_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("reRunTask_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllSharedResources_args : TBase
  {
    private string _pId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
    }

    public getAllSharedResources_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllSharedResources_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllSharedResources_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getAllSharedResources_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getAllSharedResources_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getAllSharedResources_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getAllSharedResources_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSharedResource_args : TBase
  {
    private string _pId;
    private string _dataTypeId;
    private byte[] _data;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string DataTypeId
    {
      get
      {
        return _dataTypeId;
      }
      set
      {
        __isset.dataTypeId = true;
        this._dataTypeId = value;
      }
    }

    public byte[] Data
    {
      get
      {
        return _data;
      }
      set
      {
        __isset.data = true;
        this._data = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool dataTypeId;
      public bool data;
    }

    public createSharedResource_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DataTypeId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                Data = iprot.ReadBinary();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSharedResource_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (DataTypeId != null && __isset.dataTypeId) {
          field.Name = "dataTypeId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DataTypeId);
          oprot.WriteFieldEnd();
        }
        if (Data != null && __isset.data) {
          field.Name = "data";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteBinary(Data);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSharedResource_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (DataTypeId != null && __isset.dataTypeId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DataTypeId: ");
        __sb.Append(DataTypeId);
      }
      if (Data != null && __isset.data) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Data: ");
        __sb.Append(Data);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createSharedResource_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createSharedResource_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createSharedResource_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createSharedResource_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSharedResource_args : TBase
  {
    private string _pId;
    private string _rId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string RId
    {
      get
      {
        return _rId;
      }
      set
      {
        __isset.rId = true;
        this._rId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool rId;
    }

    public getSharedResource_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSharedResource_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (RId != null && __isset.rId) {
          field.Name = "rId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSharedResource_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (RId != null && __isset.rId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RId: ");
        __sb.Append(RId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getSharedResource_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getSharedResource_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getSharedResource_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getSharedResource_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSharedResource_args : TBase
  {
    private string _pId;
    private string _rId;

    public string PId
    {
      get
      {
        return _pId;
      }
      set
      {
        __isset.pId = true;
        this._pId = value;
      }
    }

    public string RId
    {
      get
      {
        return _rId;
      }
      set
      {
        __isset.rId = true;
        this._rId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool pId;
      public bool rId;
    }

    public deleteSharedResource_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                PId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                RId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSharedResource_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (PId != null && __isset.pId) {
          field.Name = "pId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(PId);
          oprot.WriteFieldEnd();
        }
        if (RId != null && __isset.rId) {
          field.Name = "rId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(RId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSharedResource_args(");
      bool __first = true;
      if (PId != null && __isset.pId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("PId: ");
        __sb.Append(PId);
      }
      if (RId != null && __isset.rId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("RId: ");
        __sb.Append(RId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class deleteSharedResource_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public deleteSharedResource_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("deleteSharedResource_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("deleteSharedResource_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
