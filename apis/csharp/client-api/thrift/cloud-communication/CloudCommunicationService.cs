/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class CloudCommunicationService {
  public interface ISync {
    /// <summary>
    /// Creates a new cloud cluster object that communicates with the AWS environment including some AWS specific actions
    /// for setting up the specific AWS environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="specification"></param>
    string createAWSCluster(AWSSpecificationDTO specification);
    /// <summary>
    /// Boots a DEF cluster instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    string bootClusterInstance(string cloudClusterId);
    /// <summary>
    /// Boots a given number of DEF nodes (worker or reducers) in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="instanceType"></param>
    /// <param name="nrOfNodes"></param>
    string bootNodes(string cloudClusterId, InstanceTypeDTO instanceType, int nrOfNodes);
    /// <summary>
    /// Terminates the DEF nodes with the given IDs in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceIds"></param>
    string terminateNodes(string cloudClusterId, List<string> cloudInstanceIds);
    /// <summary>
    /// Returns the public IP address of a DEF instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceId"></param>
    string getPublicIPAddressOfCloudInstance(string cloudClusterId, string cloudInstanceId);
    /// <summary>
    /// Returns the private IP address of a DEF instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceId"></param>
    string getPrivateIPAddressOfCloudInstance(string cloudClusterId, string cloudInstanceId);
    /// <summary>
    /// Shuts down the cloud cluster with the given ID by terminating all DEF nodes and cluster instances in the specific
    /// cloud environment. Executes also some cloud specific actions for clearing the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    string shutdownCloudCluster(string cloudClusterId);
    /// <summary>
    /// Maps an ID of a cluster or node instance to an ID of a cloud instance.
    /// Returns a ticket id, state of the ticket is availabe over TicketService interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="defId"></param>
    /// <param name="cloudInstanceId"></param>
    string mapDEFIdToCloudInstanceId(string cloudClusterId, string defId, string cloudInstanceId);
  }

  public interface Iface : ISync {
    /// <summary>
    /// Creates a new cloud cluster object that communicates with the AWS environment including some AWS specific actions
    /// for setting up the specific AWS environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="specification"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_createAWSCluster(AsyncCallback callback, object state, AWSSpecificationDTO specification);
    string End_createAWSCluster(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Boots a DEF cluster instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_bootClusterInstance(AsyncCallback callback, object state, string cloudClusterId);
    string End_bootClusterInstance(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Boots a given number of DEF nodes (worker or reducers) in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="instanceType"></param>
    /// <param name="nrOfNodes"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_bootNodes(AsyncCallback callback, object state, string cloudClusterId, InstanceTypeDTO instanceType, int nrOfNodes);
    string End_bootNodes(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Terminates the DEF nodes with the given IDs in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceIds"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_terminateNodes(AsyncCallback callback, object state, string cloudClusterId, List<string> cloudInstanceIds);
    string End_terminateNodes(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the public IP address of a DEF instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getPublicIPAddressOfCloudInstance(AsyncCallback callback, object state, string cloudClusterId, string cloudInstanceId);
    string End_getPublicIPAddressOfCloudInstance(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns the private IP address of a DEF instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getPrivateIPAddressOfCloudInstance(AsyncCallback callback, object state, string cloudClusterId, string cloudInstanceId);
    string End_getPrivateIPAddressOfCloudInstance(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Shuts down the cloud cluster with the given ID by terminating all DEF nodes and cluster instances in the specific
    /// cloud environment. Executes also some cloud specific actions for clearing the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_shutdownCloudCluster(AsyncCallback callback, object state, string cloudClusterId);
    string End_shutdownCloudCluster(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Maps an ID of a cluster or node instance to an ID of a cloud instance.
    /// Returns a ticket id, state of the ticket is availabe over TicketService interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="defId"></param>
    /// <param name="cloudInstanceId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_mapDEFIdToCloudInstanceId(AsyncCallback callback, object state, string cloudClusterId, string defId, string cloudInstanceId);
    string End_mapDEFIdToCloudInstanceId(IAsyncResult asyncResult);
    #endif
  }

  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_createAWSCluster(AsyncCallback callback, object state, AWSSpecificationDTO specification)
    {
      return send_createAWSCluster(callback, state, specification);
    }

    public string End_createAWSCluster(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_createAWSCluster();
    }

    #endif

    /// <summary>
    /// Creates a new cloud cluster object that communicates with the AWS environment including some AWS specific actions
    /// for setting up the specific AWS environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="specification"></param>
    public string createAWSCluster(AWSSpecificationDTO specification)
    {
      #if !SILVERLIGHT
      send_createAWSCluster(specification);
      return recv_createAWSCluster();

      #else
      var asyncResult = Begin_createAWSCluster(null, null, specification);
      return End_createAWSCluster(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_createAWSCluster(AsyncCallback callback, object state, AWSSpecificationDTO specification)
    #else
    public void send_createAWSCluster(AWSSpecificationDTO specification)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("createAWSCluster", TMessageType.Call, seqid_));
      createAWSCluster_args args = new createAWSCluster_args();
      args.Specification = specification;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_createAWSCluster()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      createAWSCluster_result result = new createAWSCluster_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "createAWSCluster failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_bootClusterInstance(AsyncCallback callback, object state, string cloudClusterId)
    {
      return send_bootClusterInstance(callback, state, cloudClusterId);
    }

    public string End_bootClusterInstance(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_bootClusterInstance();
    }

    #endif

    /// <summary>
    /// Boots a DEF cluster instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    public string bootClusterInstance(string cloudClusterId)
    {
      #if !SILVERLIGHT
      send_bootClusterInstance(cloudClusterId);
      return recv_bootClusterInstance();

      #else
      var asyncResult = Begin_bootClusterInstance(null, null, cloudClusterId);
      return End_bootClusterInstance(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_bootClusterInstance(AsyncCallback callback, object state, string cloudClusterId)
    #else
    public void send_bootClusterInstance(string cloudClusterId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("bootClusterInstance", TMessageType.Call, seqid_));
      bootClusterInstance_args args = new bootClusterInstance_args();
      args.CloudClusterId = cloudClusterId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_bootClusterInstance()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      bootClusterInstance_result result = new bootClusterInstance_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bootClusterInstance failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_bootNodes(AsyncCallback callback, object state, string cloudClusterId, InstanceTypeDTO instanceType, int nrOfNodes)
    {
      return send_bootNodes(callback, state, cloudClusterId, instanceType, nrOfNodes);
    }

    public string End_bootNodes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_bootNodes();
    }

    #endif

    /// <summary>
    /// Boots a given number of DEF nodes (worker or reducers) in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="instanceType"></param>
    /// <param name="nrOfNodes"></param>
    public string bootNodes(string cloudClusterId, InstanceTypeDTO instanceType, int nrOfNodes)
    {
      #if !SILVERLIGHT
      send_bootNodes(cloudClusterId, instanceType, nrOfNodes);
      return recv_bootNodes();

      #else
      var asyncResult = Begin_bootNodes(null, null, cloudClusterId, instanceType, nrOfNodes);
      return End_bootNodes(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_bootNodes(AsyncCallback callback, object state, string cloudClusterId, InstanceTypeDTO instanceType, int nrOfNodes)
    #else
    public void send_bootNodes(string cloudClusterId, InstanceTypeDTO instanceType, int nrOfNodes)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("bootNodes", TMessageType.Call, seqid_));
      bootNodes_args args = new bootNodes_args();
      args.CloudClusterId = cloudClusterId;
      args.InstanceType = instanceType;
      args.NrOfNodes = nrOfNodes;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_bootNodes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      bootNodes_result result = new bootNodes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "bootNodes failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_terminateNodes(AsyncCallback callback, object state, string cloudClusterId, List<string> cloudInstanceIds)
    {
      return send_terminateNodes(callback, state, cloudClusterId, cloudInstanceIds);
    }

    public string End_terminateNodes(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_terminateNodes();
    }

    #endif

    /// <summary>
    /// Terminates the DEF nodes with the given IDs in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceIds"></param>
    public string terminateNodes(string cloudClusterId, List<string> cloudInstanceIds)
    {
      #if !SILVERLIGHT
      send_terminateNodes(cloudClusterId, cloudInstanceIds);
      return recv_terminateNodes();

      #else
      var asyncResult = Begin_terminateNodes(null, null, cloudClusterId, cloudInstanceIds);
      return End_terminateNodes(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_terminateNodes(AsyncCallback callback, object state, string cloudClusterId, List<string> cloudInstanceIds)
    #else
    public void send_terminateNodes(string cloudClusterId, List<string> cloudInstanceIds)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("terminateNodes", TMessageType.Call, seqid_));
      terminateNodes_args args = new terminateNodes_args();
      args.CloudClusterId = cloudClusterId;
      args.CloudInstanceIds = cloudInstanceIds;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_terminateNodes()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      terminateNodes_result result = new terminateNodes_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "terminateNodes failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPublicIPAddressOfCloudInstance(AsyncCallback callback, object state, string cloudClusterId, string cloudInstanceId)
    {
      return send_getPublicIPAddressOfCloudInstance(callback, state, cloudClusterId, cloudInstanceId);
    }

    public string End_getPublicIPAddressOfCloudInstance(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPublicIPAddressOfCloudInstance();
    }

    #endif

    /// <summary>
    /// Returns the public IP address of a DEF instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceId"></param>
    public string getPublicIPAddressOfCloudInstance(string cloudClusterId, string cloudInstanceId)
    {
      #if !SILVERLIGHT
      send_getPublicIPAddressOfCloudInstance(cloudClusterId, cloudInstanceId);
      return recv_getPublicIPAddressOfCloudInstance();

      #else
      var asyncResult = Begin_getPublicIPAddressOfCloudInstance(null, null, cloudClusterId, cloudInstanceId);
      return End_getPublicIPAddressOfCloudInstance(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPublicIPAddressOfCloudInstance(AsyncCallback callback, object state, string cloudClusterId, string cloudInstanceId)
    #else
    public void send_getPublicIPAddressOfCloudInstance(string cloudClusterId, string cloudInstanceId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPublicIPAddressOfCloudInstance", TMessageType.Call, seqid_));
      getPublicIPAddressOfCloudInstance_args args = new getPublicIPAddressOfCloudInstance_args();
      args.CloudClusterId = cloudClusterId;
      args.CloudInstanceId = cloudInstanceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getPublicIPAddressOfCloudInstance()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPublicIPAddressOfCloudInstance_result result = new getPublicIPAddressOfCloudInstance_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPublicIPAddressOfCloudInstance failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getPrivateIPAddressOfCloudInstance(AsyncCallback callback, object state, string cloudClusterId, string cloudInstanceId)
    {
      return send_getPrivateIPAddressOfCloudInstance(callback, state, cloudClusterId, cloudInstanceId);
    }

    public string End_getPrivateIPAddressOfCloudInstance(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getPrivateIPAddressOfCloudInstance();
    }

    #endif

    /// <summary>
    /// Returns the private IP address of a DEF instance in the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="cloudInstanceId"></param>
    public string getPrivateIPAddressOfCloudInstance(string cloudClusterId, string cloudInstanceId)
    {
      #if !SILVERLIGHT
      send_getPrivateIPAddressOfCloudInstance(cloudClusterId, cloudInstanceId);
      return recv_getPrivateIPAddressOfCloudInstance();

      #else
      var asyncResult = Begin_getPrivateIPAddressOfCloudInstance(null, null, cloudClusterId, cloudInstanceId);
      return End_getPrivateIPAddressOfCloudInstance(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getPrivateIPAddressOfCloudInstance(AsyncCallback callback, object state, string cloudClusterId, string cloudInstanceId)
    #else
    public void send_getPrivateIPAddressOfCloudInstance(string cloudClusterId, string cloudInstanceId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getPrivateIPAddressOfCloudInstance", TMessageType.Call, seqid_));
      getPrivateIPAddressOfCloudInstance_args args = new getPrivateIPAddressOfCloudInstance_args();
      args.CloudClusterId = cloudClusterId;
      args.CloudInstanceId = cloudInstanceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getPrivateIPAddressOfCloudInstance()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getPrivateIPAddressOfCloudInstance_result result = new getPrivateIPAddressOfCloudInstance_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getPrivateIPAddressOfCloudInstance failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_shutdownCloudCluster(AsyncCallback callback, object state, string cloudClusterId)
    {
      return send_shutdownCloudCluster(callback, state, cloudClusterId);
    }

    public string End_shutdownCloudCluster(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_shutdownCloudCluster();
    }

    #endif

    /// <summary>
    /// Shuts down the cloud cluster with the given ID by terminating all DEF nodes and cluster instances in the specific
    /// cloud environment. Executes also some cloud specific actions for clearing the specific cloud environment.
    /// Returns a ticket id, state of ticket is available over TicketSerivce interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    public string shutdownCloudCluster(string cloudClusterId)
    {
      #if !SILVERLIGHT
      send_shutdownCloudCluster(cloudClusterId);
      return recv_shutdownCloudCluster();

      #else
      var asyncResult = Begin_shutdownCloudCluster(null, null, cloudClusterId);
      return End_shutdownCloudCluster(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_shutdownCloudCluster(AsyncCallback callback, object state, string cloudClusterId)
    #else
    public void send_shutdownCloudCluster(string cloudClusterId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("shutdownCloudCluster", TMessageType.Call, seqid_));
      shutdownCloudCluster_args args = new shutdownCloudCluster_args();
      args.CloudClusterId = cloudClusterId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_shutdownCloudCluster()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      shutdownCloudCluster_result result = new shutdownCloudCluster_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "shutdownCloudCluster failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_mapDEFIdToCloudInstanceId(AsyncCallback callback, object state, string cloudClusterId, string defId, string cloudInstanceId)
    {
      return send_mapDEFIdToCloudInstanceId(callback, state, cloudClusterId, defId, cloudInstanceId);
    }

    public string End_mapDEFIdToCloudInstanceId(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_mapDEFIdToCloudInstanceId();
    }

    #endif

    /// <summary>
    /// Maps an ID of a cluster or node instance to an ID of a cloud instance.
    /// Returns a ticket id, state of the ticket is availabe over TicketService interface.
    /// 
    /// </summary>
    /// <param name="cloudClusterId"></param>
    /// <param name="defId"></param>
    /// <param name="cloudInstanceId"></param>
    public string mapDEFIdToCloudInstanceId(string cloudClusterId, string defId, string cloudInstanceId)
    {
      #if !SILVERLIGHT
      send_mapDEFIdToCloudInstanceId(cloudClusterId, defId, cloudInstanceId);
      return recv_mapDEFIdToCloudInstanceId();

      #else
      var asyncResult = Begin_mapDEFIdToCloudInstanceId(null, null, cloudClusterId, defId, cloudInstanceId);
      return End_mapDEFIdToCloudInstanceId(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_mapDEFIdToCloudInstanceId(AsyncCallback callback, object state, string cloudClusterId, string defId, string cloudInstanceId)
    #else
    public void send_mapDEFIdToCloudInstanceId(string cloudClusterId, string defId, string cloudInstanceId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("mapDEFIdToCloudInstanceId", TMessageType.Call, seqid_));
      mapDEFIdToCloudInstanceId_args args = new mapDEFIdToCloudInstanceId_args();
      args.CloudClusterId = cloudClusterId;
      args.DefId = defId;
      args.CloudInstanceId = cloudInstanceId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_mapDEFIdToCloudInstanceId()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      mapDEFIdToCloudInstanceId_result result = new mapDEFIdToCloudInstanceId_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "mapDEFIdToCloudInstanceId failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["createAWSCluster"] = createAWSCluster_Process;
      processMap_["bootClusterInstance"] = bootClusterInstance_Process;
      processMap_["bootNodes"] = bootNodes_Process;
      processMap_["terminateNodes"] = terminateNodes_Process;
      processMap_["getPublicIPAddressOfCloudInstance"] = getPublicIPAddressOfCloudInstance_Process;
      processMap_["getPrivateIPAddressOfCloudInstance"] = getPrivateIPAddressOfCloudInstance_Process;
      processMap_["shutdownCloudCluster"] = shutdownCloudCluster_Process;
      processMap_["mapDEFIdToCloudInstanceId"] = mapDEFIdToCloudInstanceId_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void createAWSCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      createAWSCluster_args args = new createAWSCluster_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      createAWSCluster_result result = new createAWSCluster_result();
      try
      {
        result.Success = iface_.createAWSCluster(args.Specification);
        oprot.WriteMessageBegin(new TMessage("createAWSCluster", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("createAWSCluster", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void bootClusterInstance_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      bootClusterInstance_args args = new bootClusterInstance_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      bootClusterInstance_result result = new bootClusterInstance_result();
      try
      {
        result.Success = iface_.bootClusterInstance(args.CloudClusterId);
        oprot.WriteMessageBegin(new TMessage("bootClusterInstance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("bootClusterInstance", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void bootNodes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      bootNodes_args args = new bootNodes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      bootNodes_result result = new bootNodes_result();
      try
      {
        result.Success = iface_.bootNodes(args.CloudClusterId, args.InstanceType, args.NrOfNodes);
        oprot.WriteMessageBegin(new TMessage("bootNodes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("bootNodes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void terminateNodes_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      terminateNodes_args args = new terminateNodes_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      terminateNodes_result result = new terminateNodes_result();
      try
      {
        result.Success = iface_.terminateNodes(args.CloudClusterId, args.CloudInstanceIds);
        oprot.WriteMessageBegin(new TMessage("terminateNodes", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("terminateNodes", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPublicIPAddressOfCloudInstance_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPublicIPAddressOfCloudInstance_args args = new getPublicIPAddressOfCloudInstance_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPublicIPAddressOfCloudInstance_result result = new getPublicIPAddressOfCloudInstance_result();
      try
      {
        result.Success = iface_.getPublicIPAddressOfCloudInstance(args.CloudClusterId, args.CloudInstanceId);
        oprot.WriteMessageBegin(new TMessage("getPublicIPAddressOfCloudInstance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPublicIPAddressOfCloudInstance", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getPrivateIPAddressOfCloudInstance_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getPrivateIPAddressOfCloudInstance_args args = new getPrivateIPAddressOfCloudInstance_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getPrivateIPAddressOfCloudInstance_result result = new getPrivateIPAddressOfCloudInstance_result();
      try
      {
        result.Success = iface_.getPrivateIPAddressOfCloudInstance(args.CloudClusterId, args.CloudInstanceId);
        oprot.WriteMessageBegin(new TMessage("getPrivateIPAddressOfCloudInstance", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getPrivateIPAddressOfCloudInstance", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void shutdownCloudCluster_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      shutdownCloudCluster_args args = new shutdownCloudCluster_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      shutdownCloudCluster_result result = new shutdownCloudCluster_result();
      try
      {
        result.Success = iface_.shutdownCloudCluster(args.CloudClusterId);
        oprot.WriteMessageBegin(new TMessage("shutdownCloudCluster", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("shutdownCloudCluster", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void mapDEFIdToCloudInstanceId_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      mapDEFIdToCloudInstanceId_args args = new mapDEFIdToCloudInstanceId_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      mapDEFIdToCloudInstanceId_result result = new mapDEFIdToCloudInstanceId_result();
      try
      {
        result.Success = iface_.mapDEFIdToCloudInstanceId(args.CloudClusterId, args.DefId, args.CloudInstanceId);
        oprot.WriteMessageBegin(new TMessage("mapDEFIdToCloudInstanceId", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("mapDEFIdToCloudInstanceId", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createAWSCluster_args : TBase
  {
    private AWSSpecificationDTO _specification;

    public AWSSpecificationDTO Specification
    {
      get
      {
        return _specification;
      }
      set
      {
        __isset.specification = true;
        this._specification = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool specification;
    }

    public createAWSCluster_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.Struct) {
                Specification = new AWSSpecificationDTO();
                Specification.Read(iprot);
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createAWSCluster_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (Specification != null && __isset.specification) {
          field.Name = "specification";
          field.Type = TType.Struct;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          Specification.Write(oprot);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createAWSCluster_args(");
      bool __first = true;
      if (Specification != null && __isset.specification) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Specification: ");
        __sb.Append(Specification== null ? "<null>" : Specification.ToString());
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class createAWSCluster_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public createAWSCluster_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("createAWSCluster_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("createAWSCluster_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bootClusterInstance_args : TBase
  {
    private string _cloudClusterId;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
    }

    public bootClusterInstance_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bootClusterInstance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bootClusterInstance_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bootClusterInstance_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public bootClusterInstance_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bootClusterInstance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bootClusterInstance_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bootNodes_args : TBase
  {
    private string _cloudClusterId;
    private InstanceTypeDTO _instanceType;
    private int _nrOfNodes;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }

    /// <summary>
    /// 
    /// <seealso cref=".InstanceTypeDTO"/>
    /// </summary>
    public InstanceTypeDTO InstanceType
    {
      get
      {
        return _instanceType;
      }
      set
      {
        __isset.instanceType = true;
        this._instanceType = value;
      }
    }

    public int NrOfNodes
    {
      get
      {
        return _nrOfNodes;
      }
      set
      {
        __isset.nrOfNodes = true;
        this._nrOfNodes = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
      public bool instanceType;
      public bool nrOfNodes;
    }

    public bootNodes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.I32) {
                InstanceType = (InstanceTypeDTO)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.I32) {
                NrOfNodes = iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bootNodes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        if (__isset.instanceType) {
          field.Name = "instanceType";
          field.Type = TType.I32;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)InstanceType);
          oprot.WriteFieldEnd();
        }
        if (__isset.nrOfNodes) {
          field.Name = "nrOfNodes";
          field.Type = TType.I32;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32(NrOfNodes);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bootNodes_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      if (__isset.instanceType) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("InstanceType: ");
        __sb.Append(InstanceType);
      }
      if (__isset.nrOfNodes) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("NrOfNodes: ");
        __sb.Append(NrOfNodes);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class bootNodes_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public bootNodes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("bootNodes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("bootNodes_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class terminateNodes_args : TBase
  {
    private string _cloudClusterId;
    private List<string> _cloudInstanceIds;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }

    public List<string> CloudInstanceIds
    {
      get
      {
        return _cloudInstanceIds;
      }
      set
      {
        __isset.cloudInstanceIds = true;
        this._cloudInstanceIds = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
      public bool cloudInstanceIds;
    }

    public terminateNodes_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.List) {
                {
                  CloudInstanceIds = new List<string>();
                  TList _list0 = iprot.ReadListBegin();
                  for( int _i1 = 0; _i1 < _list0.Count; ++_i1)
                  {
                    string _elem2;
                    _elem2 = iprot.ReadString();
                    CloudInstanceIds.Add(_elem2);
                  }
                  iprot.ReadListEnd();
                }
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("terminateNodes_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        if (CloudInstanceIds != null && __isset.cloudInstanceIds) {
          field.Name = "cloudInstanceIds";
          field.Type = TType.List;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          {
            oprot.WriteListBegin(new TList(TType.String, CloudInstanceIds.Count));
            foreach (string _iter3 in CloudInstanceIds)
            {
              oprot.WriteString(_iter3);
            }
            oprot.WriteListEnd();
          }
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("terminateNodes_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      if (CloudInstanceIds != null && __isset.cloudInstanceIds) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudInstanceIds: ");
        __sb.Append(CloudInstanceIds);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class terminateNodes_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public terminateNodes_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("terminateNodes_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("terminateNodes_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPublicIPAddressOfCloudInstance_args : TBase
  {
    private string _cloudClusterId;
    private string _cloudInstanceId;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }

    public string CloudInstanceId
    {
      get
      {
        return _cloudInstanceId;
      }
      set
      {
        __isset.cloudInstanceId = true;
        this._cloudInstanceId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
      public bool cloudInstanceId;
    }

    public getPublicIPAddressOfCloudInstance_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CloudInstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPublicIPAddressOfCloudInstance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        if (CloudInstanceId != null && __isset.cloudInstanceId) {
          field.Name = "cloudInstanceId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudInstanceId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPublicIPAddressOfCloudInstance_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      if (CloudInstanceId != null && __isset.cloudInstanceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudInstanceId: ");
        __sb.Append(CloudInstanceId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPublicIPAddressOfCloudInstance_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPublicIPAddressOfCloudInstance_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPublicIPAddressOfCloudInstance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPublicIPAddressOfCloudInstance_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrivateIPAddressOfCloudInstance_args : TBase
  {
    private string _cloudClusterId;
    private string _cloudInstanceId;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }

    public string CloudInstanceId
    {
      get
      {
        return _cloudInstanceId;
      }
      set
      {
        __isset.cloudInstanceId = true;
        this._cloudInstanceId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
      public bool cloudInstanceId;
    }

    public getPrivateIPAddressOfCloudInstance_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                CloudInstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrivateIPAddressOfCloudInstance_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        if (CloudInstanceId != null && __isset.cloudInstanceId) {
          field.Name = "cloudInstanceId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudInstanceId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrivateIPAddressOfCloudInstance_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      if (CloudInstanceId != null && __isset.cloudInstanceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudInstanceId: ");
        __sb.Append(CloudInstanceId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getPrivateIPAddressOfCloudInstance_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getPrivateIPAddressOfCloudInstance_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getPrivateIPAddressOfCloudInstance_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getPrivateIPAddressOfCloudInstance_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class shutdownCloudCluster_args : TBase
  {
    private string _cloudClusterId;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
    }

    public shutdownCloudCluster_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("shutdownCloudCluster_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("shutdownCloudCluster_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class shutdownCloudCluster_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public shutdownCloudCluster_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("shutdownCloudCluster_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("shutdownCloudCluster_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mapDEFIdToCloudInstanceId_args : TBase
  {
    private string _cloudClusterId;
    private string _defId;
    private string _cloudInstanceId;

    public string CloudClusterId
    {
      get
      {
        return _cloudClusterId;
      }
      set
      {
        __isset.cloudClusterId = true;
        this._cloudClusterId = value;
      }
    }

    public string DefId
    {
      get
      {
        return _defId;
      }
      set
      {
        __isset.defId = true;
        this._defId = value;
      }
    }

    public string CloudInstanceId
    {
      get
      {
        return _cloudInstanceId;
      }
      set
      {
        __isset.cloudInstanceId = true;
        this._cloudInstanceId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool cloudClusterId;
      public bool defId;
      public bool cloudInstanceId;
    }

    public mapDEFIdToCloudInstanceId_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                CloudClusterId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.String) {
                DefId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 3:
              if (field.Type == TType.String) {
                CloudInstanceId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("mapDEFIdToCloudInstanceId_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (CloudClusterId != null && __isset.cloudClusterId) {
          field.Name = "cloudClusterId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudClusterId);
          oprot.WriteFieldEnd();
        }
        if (DefId != null && __isset.defId) {
          field.Name = "defId";
          field.Type = TType.String;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(DefId);
          oprot.WriteFieldEnd();
        }
        if (CloudInstanceId != null && __isset.cloudInstanceId) {
          field.Name = "cloudInstanceId";
          field.Type = TType.String;
          field.ID = 3;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(CloudInstanceId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("mapDEFIdToCloudInstanceId_args(");
      bool __first = true;
      if (CloudClusterId != null && __isset.cloudClusterId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudClusterId: ");
        __sb.Append(CloudClusterId);
      }
      if (DefId != null && __isset.defId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("DefId: ");
        __sb.Append(DefId);
      }
      if (CloudInstanceId != null && __isset.cloudInstanceId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("CloudInstanceId: ");
        __sb.Append(CloudInstanceId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class mapDEFIdToCloudInstanceId_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public mapDEFIdToCloudInstanceId_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("mapDEFIdToCloudInstanceId_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("mapDEFIdToCloudInstanceId_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
