/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class AWSSpecificationDTO : TBase
{
  private string _accessKeyID;
  private string _secretKey;
  private string _region;
  private string _publicSubnetId;
  private string _privateSubnetId;
  private string _vpcId;
  private string _keypairName;
  private string _vpnDynamicIpNetworkAddress;
  private int _vpnDynamicIpSubnetMaskSuffix;
  private string _clusterImageId;
  private string _clusterInstanceSize;
  private string _workerImageId;
  private string _workerInstanceSize;
  private string _reducerImageId;
  private string _reducerInstanceSize;

  public string AccessKeyID
  {
    get
    {
      return _accessKeyID;
    }
    set
    {
      __isset.accessKeyID = true;
      this._accessKeyID = value;
    }
  }

  public string SecretKey
  {
    get
    {
      return _secretKey;
    }
    set
    {
      __isset.secretKey = true;
      this._secretKey = value;
    }
  }

  public string Region
  {
    get
    {
      return _region;
    }
    set
    {
      __isset.region = true;
      this._region = value;
    }
  }

  public string PublicSubnetId
  {
    get
    {
      return _publicSubnetId;
    }
    set
    {
      __isset.publicSubnetId = true;
      this._publicSubnetId = value;
    }
  }

  public string PrivateSubnetId
  {
    get
    {
      return _privateSubnetId;
    }
    set
    {
      __isset.privateSubnetId = true;
      this._privateSubnetId = value;
    }
  }

  public string VpcId
  {
    get
    {
      return _vpcId;
    }
    set
    {
      __isset.vpcId = true;
      this._vpcId = value;
    }
  }

  public string KeypairName
  {
    get
    {
      return _keypairName;
    }
    set
    {
      __isset.keypairName = true;
      this._keypairName = value;
    }
  }

  public string VpnDynamicIpNetworkAddress
  {
    get
    {
      return _vpnDynamicIpNetworkAddress;
    }
    set
    {
      __isset.vpnDynamicIpNetworkAddress = true;
      this._vpnDynamicIpNetworkAddress = value;
    }
  }

  public int VpnDynamicIpSubnetMaskSuffix
  {
    get
    {
      return _vpnDynamicIpSubnetMaskSuffix;
    }
    set
    {
      __isset.vpnDynamicIpSubnetMaskSuffix = true;
      this._vpnDynamicIpSubnetMaskSuffix = value;
    }
  }

  public string ClusterImageId
  {
    get
    {
      return _clusterImageId;
    }
    set
    {
      __isset.clusterImageId = true;
      this._clusterImageId = value;
    }
  }

  public string ClusterInstanceSize
  {
    get
    {
      return _clusterInstanceSize;
    }
    set
    {
      __isset.clusterInstanceSize = true;
      this._clusterInstanceSize = value;
    }
  }

  public string WorkerImageId
  {
    get
    {
      return _workerImageId;
    }
    set
    {
      __isset.workerImageId = true;
      this._workerImageId = value;
    }
  }

  public string WorkerInstanceSize
  {
    get
    {
      return _workerInstanceSize;
    }
    set
    {
      __isset.workerInstanceSize = true;
      this._workerInstanceSize = value;
    }
  }

  public string ReducerImageId
  {
    get
    {
      return _reducerImageId;
    }
    set
    {
      __isset.reducerImageId = true;
      this._reducerImageId = value;
    }
  }

  public string ReducerInstanceSize
  {
    get
    {
      return _reducerInstanceSize;
    }
    set
    {
      __isset.reducerInstanceSize = true;
      this._reducerInstanceSize = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool accessKeyID;
    public bool secretKey;
    public bool region;
    public bool publicSubnetId;
    public bool privateSubnetId;
    public bool vpcId;
    public bool keypairName;
    public bool vpnDynamicIpNetworkAddress;
    public bool vpnDynamicIpSubnetMaskSuffix;
    public bool clusterImageId;
    public bool clusterInstanceSize;
    public bool workerImageId;
    public bool workerInstanceSize;
    public bool reducerImageId;
    public bool reducerInstanceSize;
  }

  public AWSSpecificationDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              AccessKeyID = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              SecretKey = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              Region = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.String) {
              PublicSubnetId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.String) {
              PrivateSubnetId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.String) {
              VpcId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.String) {
              KeypairName = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.String) {
              VpnDynamicIpNetworkAddress = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.I32) {
              VpnDynamicIpSubnetMaskSuffix = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              ClusterImageId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              ClusterInstanceSize = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 12:
            if (field.Type == TType.String) {
              WorkerImageId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 13:
            if (field.Type == TType.String) {
              WorkerInstanceSize = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 14:
            if (field.Type == TType.String) {
              ReducerImageId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 15:
            if (field.Type == TType.String) {
              ReducerInstanceSize = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("AWSSpecificationDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (AccessKeyID != null && __isset.accessKeyID) {
        field.Name = "accessKeyID";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(AccessKeyID);
        oprot.WriteFieldEnd();
      }
      if (SecretKey != null && __isset.secretKey) {
        field.Name = "secretKey";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(SecretKey);
        oprot.WriteFieldEnd();
      }
      if (Region != null && __isset.region) {
        field.Name = "region";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Region);
        oprot.WriteFieldEnd();
      }
      if (PublicSubnetId != null && __isset.publicSubnetId) {
        field.Name = "publicSubnetId";
        field.Type = TType.String;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PublicSubnetId);
        oprot.WriteFieldEnd();
      }
      if (PrivateSubnetId != null && __isset.privateSubnetId) {
        field.Name = "privateSubnetId";
        field.Type = TType.String;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(PrivateSubnetId);
        oprot.WriteFieldEnd();
      }
      if (VpcId != null && __isset.vpcId) {
        field.Name = "vpcId";
        field.Type = TType.String;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VpcId);
        oprot.WriteFieldEnd();
      }
      if (KeypairName != null && __isset.keypairName) {
        field.Name = "keypairName";
        field.Type = TType.String;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(KeypairName);
        oprot.WriteFieldEnd();
      }
      if (VpnDynamicIpNetworkAddress != null && __isset.vpnDynamicIpNetworkAddress) {
        field.Name = "vpnDynamicIpNetworkAddress";
        field.Type = TType.String;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(VpnDynamicIpNetworkAddress);
        oprot.WriteFieldEnd();
      }
      if (__isset.vpnDynamicIpSubnetMaskSuffix) {
        field.Name = "vpnDynamicIpSubnetMaskSuffix";
        field.Type = TType.I32;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(VpnDynamicIpSubnetMaskSuffix);
        oprot.WriteFieldEnd();
      }
      if (ClusterImageId != null && __isset.clusterImageId) {
        field.Name = "clusterImageId";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClusterImageId);
        oprot.WriteFieldEnd();
      }
      if (ClusterInstanceSize != null && __isset.clusterInstanceSize) {
        field.Name = "clusterInstanceSize";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ClusterInstanceSize);
        oprot.WriteFieldEnd();
      }
      if (WorkerImageId != null && __isset.workerImageId) {
        field.Name = "workerImageId";
        field.Type = TType.String;
        field.ID = 12;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(WorkerImageId);
        oprot.WriteFieldEnd();
      }
      if (WorkerInstanceSize != null && __isset.workerInstanceSize) {
        field.Name = "workerInstanceSize";
        field.Type = TType.String;
        field.ID = 13;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(WorkerInstanceSize);
        oprot.WriteFieldEnd();
      }
      if (ReducerImageId != null && __isset.reducerImageId) {
        field.Name = "reducerImageId";
        field.Type = TType.String;
        field.ID = 14;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReducerImageId);
        oprot.WriteFieldEnd();
      }
      if (ReducerInstanceSize != null && __isset.reducerInstanceSize) {
        field.Name = "reducerInstanceSize";
        field.Type = TType.String;
        field.ID = 15;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ReducerInstanceSize);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("AWSSpecificationDTO(");
    bool __first = true;
    if (AccessKeyID != null && __isset.accessKeyID) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("AccessKeyID: ");
      __sb.Append(AccessKeyID);
    }
    if (SecretKey != null && __isset.secretKey) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("SecretKey: ");
      __sb.Append(SecretKey);
    }
    if (Region != null && __isset.region) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Region: ");
      __sb.Append(Region);
    }
    if (PublicSubnetId != null && __isset.publicSubnetId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PublicSubnetId: ");
      __sb.Append(PublicSubnetId);
    }
    if (PrivateSubnetId != null && __isset.privateSubnetId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("PrivateSubnetId: ");
      __sb.Append(PrivateSubnetId);
    }
    if (VpcId != null && __isset.vpcId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VpcId: ");
      __sb.Append(VpcId);
    }
    if (KeypairName != null && __isset.keypairName) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("KeypairName: ");
      __sb.Append(KeypairName);
    }
    if (VpnDynamicIpNetworkAddress != null && __isset.vpnDynamicIpNetworkAddress) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VpnDynamicIpNetworkAddress: ");
      __sb.Append(VpnDynamicIpNetworkAddress);
    }
    if (__isset.vpnDynamicIpSubnetMaskSuffix) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("VpnDynamicIpSubnetMaskSuffix: ");
      __sb.Append(VpnDynamicIpSubnetMaskSuffix);
    }
    if (ClusterImageId != null && __isset.clusterImageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ClusterImageId: ");
      __sb.Append(ClusterImageId);
    }
    if (ClusterInstanceSize != null && __isset.clusterInstanceSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ClusterInstanceSize: ");
      __sb.Append(ClusterInstanceSize);
    }
    if (WorkerImageId != null && __isset.workerImageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("WorkerImageId: ");
      __sb.Append(WorkerImageId);
    }
    if (WorkerInstanceSize != null && __isset.workerInstanceSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("WorkerInstanceSize: ");
      __sb.Append(WorkerInstanceSize);
    }
    if (ReducerImageId != null && __isset.reducerImageId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ReducerImageId: ");
      __sb.Append(ReducerImageId);
    }
    if (ReducerInstanceSize != null && __isset.reducerInstanceSize) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ReducerInstanceSize: ");
      __sb.Append(ReducerInstanceSize);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

