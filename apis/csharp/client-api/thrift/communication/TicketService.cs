/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;

public partial class TicketService {
  /// <summary>
  /// Ticket Status Resource Interface
  /// </summary>
  public interface ISync {
    /// <summary>
    /// Request status of the ticket by its id.
    /// </summary>
    /// <param name="ticketId"></param>
    TicketStatusDTO getTicketStatus(string ticketId);
    /// <summary>
    /// Wait for ticket reaches state SUCCESS or FAILED.
    /// </summary>
    /// <param name="ticketId"></param>
    TicketStatusDTO waitForTicket(string ticketId);
    /// <summary>
    /// Request ticket cancelation by its id. Returns ticket status 'CANCELED' on successfull cancelation.
    /// </summary>
    /// <param name="ticketId"></param>
    /// <param name="mayInterruptIfRunning"></param>
    TicketStatusDTO cancelTicketExecution(string ticketId, bool mayInterruptIfRunning);
    /// <summary>
    /// Returns error/failed message (stack trace) of a failed ticket
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    string getFailedMessage(string ticketId);
  }

  /// <summary>
  /// Ticket Status Resource Interface
  /// </summary>
  public interface Iface : ISync {
    /// <summary>
    /// Request status of the ticket by its id.
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getTicketStatus(AsyncCallback callback, object state, string ticketId);
    TicketStatusDTO End_getTicketStatus(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Wait for ticket reaches state SUCCESS or FAILED.
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_waitForTicket(AsyncCallback callback, object state, string ticketId);
    TicketStatusDTO End_waitForTicket(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Request ticket cancelation by its id. Returns ticket status 'CANCELED' on successfull cancelation.
    /// </summary>
    /// <param name="ticketId"></param>
    /// <param name="mayInterruptIfRunning"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_cancelTicketExecution(AsyncCallback callback, object state, string ticketId, bool mayInterruptIfRunning);
    TicketStatusDTO End_cancelTicketExecution(IAsyncResult asyncResult);
    #endif
    /// <summary>
    /// Returns error/failed message (stack trace) of a failed ticket
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    #if SILVERLIGHT
    IAsyncResult Begin_getFailedMessage(AsyncCallback callback, object state, string ticketId);
    string End_getFailedMessage(IAsyncResult asyncResult);
    #endif
  }

  /// <summary>
  /// Ticket Status Resource Interface
  /// </summary>
  public class Client : IDisposable, Iface {
    public Client(TProtocol prot) : this(prot, prot)
    {
    }

    public Client(TProtocol iprot, TProtocol oprot)
    {
      iprot_ = iprot;
      oprot_ = oprot;
    }

    protected TProtocol iprot_;
    protected TProtocol oprot_;
    protected int seqid_;

    public TProtocol InputProtocol
    {
      get { return iprot_; }
    }
    public TProtocol OutputProtocol
    {
      get { return oprot_; }
    }


    #region " IDisposable Support "
    private bool _IsDisposed;

    // IDisposable
    public void Dispose()
    {
      Dispose(true);
    }
    

    protected virtual void Dispose(bool disposing)
    {
      if (!_IsDisposed)
      {
        if (disposing)
        {
          if (iprot_ != null)
          {
            ((IDisposable)iprot_).Dispose();
          }
          if (oprot_ != null)
          {
            ((IDisposable)oprot_).Dispose();
          }
        }
      }
      _IsDisposed = true;
    }
    #endregion


    
    #if SILVERLIGHT
    public IAsyncResult Begin_getTicketStatus(AsyncCallback callback, object state, string ticketId)
    {
      return send_getTicketStatus(callback, state, ticketId);
    }

    public TicketStatusDTO End_getTicketStatus(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getTicketStatus();
    }

    #endif

    /// <summary>
    /// Request status of the ticket by its id.
    /// </summary>
    /// <param name="ticketId"></param>
    public TicketStatusDTO getTicketStatus(string ticketId)
    {
      #if !SILVERLIGHT
      send_getTicketStatus(ticketId);
      return recv_getTicketStatus();

      #else
      var asyncResult = Begin_getTicketStatus(null, null, ticketId);
      return End_getTicketStatus(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getTicketStatus(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_getTicketStatus(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getTicketStatus", TMessageType.Call, seqid_));
      getTicketStatus_args args = new getTicketStatus_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TicketStatusDTO recv_getTicketStatus()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getTicketStatus_result result = new getTicketStatus_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getTicketStatus failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_waitForTicket(AsyncCallback callback, object state, string ticketId)
    {
      return send_waitForTicket(callback, state, ticketId);
    }

    public TicketStatusDTO End_waitForTicket(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_waitForTicket();
    }

    #endif

    /// <summary>
    /// Wait for ticket reaches state SUCCESS or FAILED.
    /// </summary>
    /// <param name="ticketId"></param>
    public TicketStatusDTO waitForTicket(string ticketId)
    {
      #if !SILVERLIGHT
      send_waitForTicket(ticketId);
      return recv_waitForTicket();

      #else
      var asyncResult = Begin_waitForTicket(null, null, ticketId);
      return End_waitForTicket(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_waitForTicket(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_waitForTicket(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("waitForTicket", TMessageType.Call, seqid_));
      waitForTicket_args args = new waitForTicket_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TicketStatusDTO recv_waitForTicket()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      waitForTicket_result result = new waitForTicket_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "waitForTicket failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_cancelTicketExecution(AsyncCallback callback, object state, string ticketId, bool mayInterruptIfRunning)
    {
      return send_cancelTicketExecution(callback, state, ticketId, mayInterruptIfRunning);
    }

    public TicketStatusDTO End_cancelTicketExecution(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_cancelTicketExecution();
    }

    #endif

    /// <summary>
    /// Request ticket cancelation by its id. Returns ticket status 'CANCELED' on successfull cancelation.
    /// </summary>
    /// <param name="ticketId"></param>
    /// <param name="mayInterruptIfRunning"></param>
    public TicketStatusDTO cancelTicketExecution(string ticketId, bool mayInterruptIfRunning)
    {
      #if !SILVERLIGHT
      send_cancelTicketExecution(ticketId, mayInterruptIfRunning);
      return recv_cancelTicketExecution();

      #else
      var asyncResult = Begin_cancelTicketExecution(null, null, ticketId, mayInterruptIfRunning);
      return End_cancelTicketExecution(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_cancelTicketExecution(AsyncCallback callback, object state, string ticketId, bool mayInterruptIfRunning)
    #else
    public void send_cancelTicketExecution(string ticketId, bool mayInterruptIfRunning)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("cancelTicketExecution", TMessageType.Call, seqid_));
      cancelTicketExecution_args args = new cancelTicketExecution_args();
      args.TicketId = ticketId;
      args.MayInterruptIfRunning = mayInterruptIfRunning;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public TicketStatusDTO recv_cancelTicketExecution()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      cancelTicketExecution_result result = new cancelTicketExecution_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "cancelTicketExecution failed: unknown result");
    }

    
    #if SILVERLIGHT
    public IAsyncResult Begin_getFailedMessage(AsyncCallback callback, object state, string ticketId)
    {
      return send_getFailedMessage(callback, state, ticketId);
    }

    public string End_getFailedMessage(IAsyncResult asyncResult)
    {
      oprot_.Transport.EndFlush(asyncResult);
      return recv_getFailedMessage();
    }

    #endif

    /// <summary>
    /// Returns error/failed message (stack trace) of a failed ticket
    /// 
    /// </summary>
    /// <param name="ticketId"></param>
    public string getFailedMessage(string ticketId)
    {
      #if !SILVERLIGHT
      send_getFailedMessage(ticketId);
      return recv_getFailedMessage();

      #else
      var asyncResult = Begin_getFailedMessage(null, null, ticketId);
      return End_getFailedMessage(asyncResult);

      #endif
    }
    #if SILVERLIGHT
    public IAsyncResult send_getFailedMessage(AsyncCallback callback, object state, string ticketId)
    #else
    public void send_getFailedMessage(string ticketId)
    #endif
    {
      oprot_.WriteMessageBegin(new TMessage("getFailedMessage", TMessageType.Call, seqid_));
      getFailedMessage_args args = new getFailedMessage_args();
      args.TicketId = ticketId;
      args.Write(oprot_);
      oprot_.WriteMessageEnd();
      #if SILVERLIGHT
      return oprot_.Transport.BeginFlush(callback, state);
      #else
      oprot_.Transport.Flush();
      #endif
    }

    public string recv_getFailedMessage()
    {
      TMessage msg = iprot_.ReadMessageBegin();
      if (msg.Type == TMessageType.Exception) {
        TApplicationException x = TApplicationException.Read(iprot_);
        iprot_.ReadMessageEnd();
        throw x;
      }
      getFailedMessage_result result = new getFailedMessage_result();
      result.Read(iprot_);
      iprot_.ReadMessageEnd();
      if (result.__isset.success) {
        return result.Success;
      }
      throw new TApplicationException(TApplicationException.ExceptionType.MissingResult, "getFailedMessage failed: unknown result");
    }

  }
  public class Processor : TProcessor {
    public Processor(ISync iface)
    {
      iface_ = iface;
      processMap_["getTicketStatus"] = getTicketStatus_Process;
      processMap_["waitForTicket"] = waitForTicket_Process;
      processMap_["cancelTicketExecution"] = cancelTicketExecution_Process;
      processMap_["getFailedMessage"] = getFailedMessage_Process;
    }

    protected delegate void ProcessFunction(int seqid, TProtocol iprot, TProtocol oprot);
    private ISync iface_;
    protected Dictionary<string, ProcessFunction> processMap_ = new Dictionary<string, ProcessFunction>();

    public bool Process(TProtocol iprot, TProtocol oprot)
    {
      try
      {
        TMessage msg = iprot.ReadMessageBegin();
        ProcessFunction fn;
        processMap_.TryGetValue(msg.Name, out fn);
        if (fn == null) {
          TProtocolUtil.Skip(iprot, TType.Struct);
          iprot.ReadMessageEnd();
          TApplicationException x = new TApplicationException (TApplicationException.ExceptionType.UnknownMethod, "Invalid method name: '" + msg.Name + "'");
          oprot.WriteMessageBegin(new TMessage(msg.Name, TMessageType.Exception, msg.SeqID));
          x.Write(oprot);
          oprot.WriteMessageEnd();
          oprot.Transport.Flush();
          return true;
        }
        fn(msg.SeqID, iprot, oprot);
      }
      catch (IOException)
      {
        return false;
      }
      return true;
    }

    public void getTicketStatus_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getTicketStatus_args args = new getTicketStatus_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getTicketStatus_result result = new getTicketStatus_result();
      try
      {
        result.Success = iface_.getTicketStatus(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("getTicketStatus", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getTicketStatus", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void waitForTicket_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      waitForTicket_args args = new waitForTicket_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      waitForTicket_result result = new waitForTicket_result();
      try
      {
        result.Success = iface_.waitForTicket(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("waitForTicket", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("waitForTicket", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void cancelTicketExecution_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      cancelTicketExecution_args args = new cancelTicketExecution_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      cancelTicketExecution_result result = new cancelTicketExecution_result();
      try
      {
        result.Success = iface_.cancelTicketExecution(args.TicketId, args.MayInterruptIfRunning);
        oprot.WriteMessageBegin(new TMessage("cancelTicketExecution", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("cancelTicketExecution", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

    public void getFailedMessage_Process(int seqid, TProtocol iprot, TProtocol oprot)
    {
      getFailedMessage_args args = new getFailedMessage_args();
      args.Read(iprot);
      iprot.ReadMessageEnd();
      getFailedMessage_result result = new getFailedMessage_result();
      try
      {
        result.Success = iface_.getFailedMessage(args.TicketId);
        oprot.WriteMessageBegin(new TMessage("getFailedMessage", TMessageType.Reply, seqid)); 
        result.Write(oprot);
      }
      catch (TTransportException)
      {
        throw;
      }
      catch (Exception ex)
      {
        Console.Error.WriteLine("Error occurred in processor:");
        Console.Error.WriteLine(ex.ToString());
        TApplicationException x = new TApplicationException      (TApplicationException.ExceptionType.InternalError," Internal error.");
        oprot.WriteMessageBegin(new TMessage("getFailedMessage", TMessageType.Exception, seqid));
        x.Write(oprot);
      }
      oprot.WriteMessageEnd();
      oprot.Transport.Flush();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTicketStatus_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public getTicketStatus_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTicketStatus_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTicketStatus_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getTicketStatus_result : TBase
  {
    private TicketStatusDTO _success;

    /// <summary>
    /// 
    /// <seealso cref=".TicketStatusDTO"/>
    /// </summary>
    public TicketStatusDTO Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getTicketStatus_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TicketStatusDTO)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getTicketStatus_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getTicketStatus_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class waitForTicket_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public waitForTicket_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("waitForTicket_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("waitForTicket_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class waitForTicket_result : TBase
  {
    private TicketStatusDTO _success;

    /// <summary>
    /// 
    /// <seealso cref=".TicketStatusDTO"/>
    /// </summary>
    public TicketStatusDTO Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public waitForTicket_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TicketStatusDTO)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("waitForTicket_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("waitForTicket_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelTicketExecution_args : TBase
  {
    private string _ticketId;
    private bool _mayInterruptIfRunning;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }

    public bool MayInterruptIfRunning
    {
      get
      {
        return _mayInterruptIfRunning;
      }
      set
      {
        __isset.mayInterruptIfRunning = true;
        this._mayInterruptIfRunning = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
      public bool mayInterruptIfRunning;
    }

    public cancelTicketExecution_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            case 2:
              if (field.Type == TType.Bool) {
                MayInterruptIfRunning = iprot.ReadBool();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelTicketExecution_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        if (__isset.mayInterruptIfRunning) {
          field.Name = "mayInterruptIfRunning";
          field.Type = TType.Bool;
          field.ID = 2;
          oprot.WriteFieldBegin(field);
          oprot.WriteBool(MayInterruptIfRunning);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelTicketExecution_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      if (__isset.mayInterruptIfRunning) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("MayInterruptIfRunning: ");
        __sb.Append(MayInterruptIfRunning);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class cancelTicketExecution_result : TBase
  {
    private TicketStatusDTO _success;

    /// <summary>
    /// 
    /// <seealso cref=".TicketStatusDTO"/>
    /// </summary>
    public TicketStatusDTO Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public cancelTicketExecution_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.I32) {
                Success = (TicketStatusDTO)iprot.ReadI32();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("cancelTicketExecution_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          field.Name = "Success";
          field.Type = TType.I32;
          field.ID = 0;
          oprot.WriteFieldBegin(field);
          oprot.WriteI32((int)Success);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("cancelTicketExecution_result(");
      bool __first = true;
      if (__isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFailedMessage_args : TBase
  {
    private string _ticketId;

    public string TicketId
    {
      get
      {
        return _ticketId;
      }
      set
      {
        __isset.ticketId = true;
        this._ticketId = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool ticketId;
    }

    public getFailedMessage_args() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 1:
              if (field.Type == TType.String) {
                TicketId = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFailedMessage_args");
        oprot.WriteStructBegin(struc);
        TField field = new TField();
        if (TicketId != null && __isset.ticketId) {
          field.Name = "ticketId";
          field.Type = TType.String;
          field.ID = 1;
          oprot.WriteFieldBegin(field);
          oprot.WriteString(TicketId);
          oprot.WriteFieldEnd();
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFailedMessage_args(");
      bool __first = true;
      if (TicketId != null && __isset.ticketId) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("TicketId: ");
        __sb.Append(TicketId);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }


  #if !SILVERLIGHT
  [Serializable]
  #endif
  public partial class getFailedMessage_result : TBase
  {
    private string _success;

    public string Success
    {
      get
      {
        return _success;
      }
      set
      {
        __isset.success = true;
        this._success = value;
      }
    }


    public Isset __isset;
    #if !SILVERLIGHT
    [Serializable]
    #endif
    public struct Isset {
      public bool success;
    }

    public getFailedMessage_result() {
    }

    public void Read (TProtocol iprot)
    {
      iprot.IncrementRecursionDepth();
      try
      {
        TField field;
        iprot.ReadStructBegin();
        while (true)
        {
          field = iprot.ReadFieldBegin();
          if (field.Type == TType.Stop) { 
            break;
          }
          switch (field.ID)
          {
            case 0:
              if (field.Type == TType.String) {
                Success = iprot.ReadString();
              } else { 
                TProtocolUtil.Skip(iprot, field.Type);
              }
              break;
            default: 
              TProtocolUtil.Skip(iprot, field.Type);
              break;
          }
          iprot.ReadFieldEnd();
        }
        iprot.ReadStructEnd();
      }
      finally
      {
        iprot.DecrementRecursionDepth();
      }
    }

    public void Write(TProtocol oprot) {
      oprot.IncrementRecursionDepth();
      try
      {
        TStruct struc = new TStruct("getFailedMessage_result");
        oprot.WriteStructBegin(struc);
        TField field = new TField();

        if (this.__isset.success) {
          if (Success != null) {
            field.Name = "Success";
            field.Type = TType.String;
            field.ID = 0;
            oprot.WriteFieldBegin(field);
            oprot.WriteString(Success);
            oprot.WriteFieldEnd();
          }
        }
        oprot.WriteFieldStop();
        oprot.WriteStructEnd();
      }
      finally
      {
        oprot.DecrementRecursionDepth();
      }
    }

    public override string ToString() {
      StringBuilder __sb = new StringBuilder("getFailedMessage_result(");
      bool __first = true;
      if (Success != null && __isset.success) {
        if(!__first) { __sb.Append(", "); }
        __first = false;
        __sb.Append("Success: ");
        __sb.Append(Success);
      }
      __sb.Append(")");
      return __sb.ToString();
    }

  }

}
