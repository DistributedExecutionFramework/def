/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
using System;
using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.IO;
using Thrift;
using Thrift.Collections;
using System.Runtime.Serialization;
using Thrift.Protocol;
using Thrift.Transport;


#if !SILVERLIGHT
[Serializable]
#endif
public partial class ClusterInfoDTO : TBase
{
  private string _id;
  private string _name;
  private string _managerId;
  private CloudType _cloudType;
  private long _startTime;
  private List<string> _activePrograms;
  private int _numberOfWorkers;
  private int _numberOfReducers;
  private string _defaultMapRoutineId;
  private string _storeRoutineId;
  private string _host;

  public string Id
  {
    get
    {
      return _id;
    }
    set
    {
      __isset.id = true;
      this._id = value;
    }
  }

  public string Name
  {
    get
    {
      return _name;
    }
    set
    {
      __isset.name = true;
      this._name = value;
    }
  }

  public string ManagerId
  {
    get
    {
      return _managerId;
    }
    set
    {
      __isset.managerId = true;
      this._managerId = value;
    }
  }

  /// <summary>
  /// 
  /// <seealso cref="CloudType"/>
  /// </summary>
  public CloudType CloudType
  {
    get
    {
      return _cloudType;
    }
    set
    {
      __isset.cloudType = true;
      this._cloudType = value;
    }
  }

  public long StartTime
  {
    get
    {
      return _startTime;
    }
    set
    {
      __isset.startTime = true;
      this._startTime = value;
    }
  }

  public List<string> ActivePrograms
  {
    get
    {
      return _activePrograms;
    }
    set
    {
      __isset.activePrograms = true;
      this._activePrograms = value;
    }
  }

  public int NumberOfWorkers
  {
    get
    {
      return _numberOfWorkers;
    }
    set
    {
      __isset.numberOfWorkers = true;
      this._numberOfWorkers = value;
    }
  }

  public int NumberOfReducers
  {
    get
    {
      return _numberOfReducers;
    }
    set
    {
      __isset.numberOfReducers = true;
      this._numberOfReducers = value;
    }
  }

  public string DefaultMapRoutineId
  {
    get
    {
      return _defaultMapRoutineId;
    }
    set
    {
      __isset.defaultMapRoutineId = true;
      this._defaultMapRoutineId = value;
    }
  }

  public string StoreRoutineId
  {
    get
    {
      return _storeRoutineId;
    }
    set
    {
      __isset.storeRoutineId = true;
      this._storeRoutineId = value;
    }
  }

  public string Host
  {
    get
    {
      return _host;
    }
    set
    {
      __isset.host = true;
      this._host = value;
    }
  }


  public Isset __isset;
  #if !SILVERLIGHT
  [Serializable]
  #endif
  public struct Isset {
    public bool id;
    public bool name;
    public bool managerId;
    public bool cloudType;
    public bool startTime;
    public bool activePrograms;
    public bool numberOfWorkers;
    public bool numberOfReducers;
    public bool defaultMapRoutineId;
    public bool storeRoutineId;
    public bool host;
  }

  public ClusterInfoDTO() {
  }

  public void Read (TProtocol iprot)
  {
    iprot.IncrementRecursionDepth();
    try
    {
      TField field;
      iprot.ReadStructBegin();
      while (true)
      {
        field = iprot.ReadFieldBegin();
        if (field.Type == TType.Stop) { 
          break;
        }
        switch (field.ID)
        {
          case 1:
            if (field.Type == TType.String) {
              Id = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 2:
            if (field.Type == TType.String) {
              Name = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 3:
            if (field.Type == TType.String) {
              ManagerId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 4:
            if (field.Type == TType.I32) {
              CloudType = (CloudType)iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 5:
            if (field.Type == TType.I64) {
              StartTime = iprot.ReadI64();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 6:
            if (field.Type == TType.List) {
              {
                ActivePrograms = new List<string>();
                TList _list47 = iprot.ReadListBegin();
                for( int _i48 = 0; _i48 < _list47.Count; ++_i48)
                {
                  string _elem49;
                  _elem49 = iprot.ReadString();
                  ActivePrograms.Add(_elem49);
                }
                iprot.ReadListEnd();
              }
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 7:
            if (field.Type == TType.I32) {
              NumberOfWorkers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 8:
            if (field.Type == TType.I32) {
              NumberOfReducers = iprot.ReadI32();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 9:
            if (field.Type == TType.String) {
              DefaultMapRoutineId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 10:
            if (field.Type == TType.String) {
              StoreRoutineId = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          case 11:
            if (field.Type == TType.String) {
              Host = iprot.ReadString();
            } else { 
              TProtocolUtil.Skip(iprot, field.Type);
            }
            break;
          default: 
            TProtocolUtil.Skip(iprot, field.Type);
            break;
        }
        iprot.ReadFieldEnd();
      }
      iprot.ReadStructEnd();
    }
    finally
    {
      iprot.DecrementRecursionDepth();
    }
  }

  public void Write(TProtocol oprot) {
    oprot.IncrementRecursionDepth();
    try
    {
      TStruct struc = new TStruct("ClusterInfoDTO");
      oprot.WriteStructBegin(struc);
      TField field = new TField();
      if (Id != null && __isset.id) {
        field.Name = "id";
        field.Type = TType.String;
        field.ID = 1;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Id);
        oprot.WriteFieldEnd();
      }
      if (Name != null && __isset.name) {
        field.Name = "name";
        field.Type = TType.String;
        field.ID = 2;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Name);
        oprot.WriteFieldEnd();
      }
      if (ManagerId != null && __isset.managerId) {
        field.Name = "managerId";
        field.Type = TType.String;
        field.ID = 3;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(ManagerId);
        oprot.WriteFieldEnd();
      }
      if (__isset.cloudType) {
        field.Name = "cloudType";
        field.Type = TType.I32;
        field.ID = 4;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32((int)CloudType);
        oprot.WriteFieldEnd();
      }
      if (__isset.startTime) {
        field.Name = "startTime";
        field.Type = TType.I64;
        field.ID = 5;
        oprot.WriteFieldBegin(field);
        oprot.WriteI64(StartTime);
        oprot.WriteFieldEnd();
      }
      if (ActivePrograms != null && __isset.activePrograms) {
        field.Name = "activePrograms";
        field.Type = TType.List;
        field.ID = 6;
        oprot.WriteFieldBegin(field);
        {
          oprot.WriteListBegin(new TList(TType.String, ActivePrograms.Count));
          foreach (string _iter50 in ActivePrograms)
          {
            oprot.WriteString(_iter50);
          }
          oprot.WriteListEnd();
        }
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfWorkers) {
        field.Name = "numberOfWorkers";
        field.Type = TType.I32;
        field.ID = 7;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumberOfWorkers);
        oprot.WriteFieldEnd();
      }
      if (__isset.numberOfReducers) {
        field.Name = "numberOfReducers";
        field.Type = TType.I32;
        field.ID = 8;
        oprot.WriteFieldBegin(field);
        oprot.WriteI32(NumberOfReducers);
        oprot.WriteFieldEnd();
      }
      if (DefaultMapRoutineId != null && __isset.defaultMapRoutineId) {
        field.Name = "defaultMapRoutineId";
        field.Type = TType.String;
        field.ID = 9;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(DefaultMapRoutineId);
        oprot.WriteFieldEnd();
      }
      if (StoreRoutineId != null && __isset.storeRoutineId) {
        field.Name = "storeRoutineId";
        field.Type = TType.String;
        field.ID = 10;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(StoreRoutineId);
        oprot.WriteFieldEnd();
      }
      if (Host != null && __isset.host) {
        field.Name = "host";
        field.Type = TType.String;
        field.ID = 11;
        oprot.WriteFieldBegin(field);
        oprot.WriteString(Host);
        oprot.WriteFieldEnd();
      }
      oprot.WriteFieldStop();
      oprot.WriteStructEnd();
    }
    finally
    {
      oprot.DecrementRecursionDepth();
    }
  }

  public override string ToString() {
    StringBuilder __sb = new StringBuilder("ClusterInfoDTO(");
    bool __first = true;
    if (Id != null && __isset.id) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Id: ");
      __sb.Append(Id);
    }
    if (Name != null && __isset.name) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Name: ");
      __sb.Append(Name);
    }
    if (ManagerId != null && __isset.managerId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ManagerId: ");
      __sb.Append(ManagerId);
    }
    if (__isset.cloudType) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("CloudType: ");
      __sb.Append(CloudType);
    }
    if (__isset.startTime) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StartTime: ");
      __sb.Append(StartTime);
    }
    if (ActivePrograms != null && __isset.activePrograms) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("ActivePrograms: ");
      __sb.Append(ActivePrograms);
    }
    if (__isset.numberOfWorkers) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NumberOfWorkers: ");
      __sb.Append(NumberOfWorkers);
    }
    if (__isset.numberOfReducers) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("NumberOfReducers: ");
      __sb.Append(NumberOfReducers);
    }
    if (DefaultMapRoutineId != null && __isset.defaultMapRoutineId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("DefaultMapRoutineId: ");
      __sb.Append(DefaultMapRoutineId);
    }
    if (StoreRoutineId != null && __isset.storeRoutineId) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("StoreRoutineId: ");
      __sb.Append(StoreRoutineId);
    }
    if (Host != null && __isset.host) {
      if(!__first) { __sb.Append(", "); }
      __first = false;
      __sb.Append("Host: ");
      __sb.Append(Host);
    }
    __sb.Append(")");
    return __sb.ToString();
  }

}

