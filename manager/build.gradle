apply plugin: 'application'
apply plugin: 'org.hidetake.ssh'

dependencies {
	compile project(':cluster-api')
	compile project(':manager-api')
    compile project(':cloud-communication-api')
	compile project(':execlogic')
    compile project(':persistence')
}

mainClassName = 'at.enfilo.def.manager.server.Manager'

shadowJar {
	exclude 'manager.yml'
	exclude 'log4j2.xml'
}

remotes {
	defHost {
		host = 'localhost'
		user = 'def'
		password = 'def'
	}
}

// run 'gradle deploy -Phost=<ip>'
task deploy {
	doLast {
		ssh.run {
			settings {
				knownHosts = allowAnyHosts
			}

			String host = project.getProperties().get('host')
			remotes.defHost.host = host

			String persistenceBuildDir = project(':persistence').buildDir.path

			println 'Try to deploy on ' + remotes.defHost

			session(remotes.defHost) {
				executeScript file('src/main/sh/stop.sh')
				executeScript file('src/main/sh/clean.sh')
				copy {
					from "$buildDir/libs"
					from "$buildDir/resources/main"
                    from "$persistenceBuildDir/resources/main/database.yml"
					into "$buildDir/manager/"
				}
				put from: "$buildDir/manager", into: "."
				executeScript file('src/main/sh/start.sh')
			}
		}
	}
}

task restart {
	doLast {
		ssh.run {
			settings {
				knownHosts = allowAnyHosts
			}

			String host = project.getProperties().get('host')
			remotes.defHost.host = host

			println 'Try to restart on ' + remotes.defHost
			session(remotes.defHost) {
				executeScript file('src/main/sh/stop.sh')
				executeScript file('src/main/sh/start.sh')
			}
		}
	}
}

deploy.dependsOn shadowJar
