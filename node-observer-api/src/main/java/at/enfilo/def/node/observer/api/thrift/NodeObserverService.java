/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.node.observer.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-06")
public class NodeObserverService {

  /**
   * Node Observer Service interface.
   * A node notifies all registered observers, which must implement this interface.
   * 
   */
  public interface Iface {

    /**
     * Notification that a list of tasks changed a new execution state.
     * 
     * @param nId
     * @param taskIds
     * @param newState
     */
    public java.lang.String notifyTasksNewState(java.lang.String nId, java.util.List<java.lang.String> taskIds, at.enfilo.def.transfer.dto.ExecutionState newState) throws org.apache.thrift.TException;

    /**
     * Notification that a node received a list of tasks.
     * 
     * @param nId
     * @param taskIds
     */
    public java.lang.String notifyTasksReceived(java.lang.String nId, java.util.List<java.lang.String> taskIds) throws org.apache.thrift.TException;

    /**
     * Notification over Node state.
     * 
     * @param nId
     * @param nodeInfo
     */
    public java.lang.String notifyNodeInfo(java.lang.String nId, at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void notifyTasksNewState(java.lang.String nId, java.util.List<java.lang.String> taskIds, at.enfilo.def.transfer.dto.ExecutionState newState, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void notifyTasksReceived(java.lang.String nId, java.util.List<java.lang.String> taskIds, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void notifyNodeInfo(java.lang.String nId, at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String notifyTasksNewState(java.lang.String nId, java.util.List<java.lang.String> taskIds, at.enfilo.def.transfer.dto.ExecutionState newState) throws org.apache.thrift.TException
    {
      send_notifyTasksNewState(nId, taskIds, newState);
      return recv_notifyTasksNewState();
    }

    public void send_notifyTasksNewState(java.lang.String nId, java.util.List<java.lang.String> taskIds, at.enfilo.def.transfer.dto.ExecutionState newState) throws org.apache.thrift.TException
    {
      notifyTasksNewState_args args = new notifyTasksNewState_args();
      args.setNId(nId);
      args.setTaskIds(taskIds);
      args.setNewState(newState);
      sendBase("notifyTasksNewState", args);
    }

    public java.lang.String recv_notifyTasksNewState() throws org.apache.thrift.TException
    {
      notifyTasksNewState_result result = new notifyTasksNewState_result();
      receiveBase(result, "notifyTasksNewState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifyTasksNewState failed: unknown result");
    }

    public java.lang.String notifyTasksReceived(java.lang.String nId, java.util.List<java.lang.String> taskIds) throws org.apache.thrift.TException
    {
      send_notifyTasksReceived(nId, taskIds);
      return recv_notifyTasksReceived();
    }

    public void send_notifyTasksReceived(java.lang.String nId, java.util.List<java.lang.String> taskIds) throws org.apache.thrift.TException
    {
      notifyTasksReceived_args args = new notifyTasksReceived_args();
      args.setNId(nId);
      args.setTaskIds(taskIds);
      sendBase("notifyTasksReceived", args);
    }

    public java.lang.String recv_notifyTasksReceived() throws org.apache.thrift.TException
    {
      notifyTasksReceived_result result = new notifyTasksReceived_result();
      receiveBase(result, "notifyTasksReceived");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifyTasksReceived failed: unknown result");
    }

    public java.lang.String notifyNodeInfo(java.lang.String nId, at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo) throws org.apache.thrift.TException
    {
      send_notifyNodeInfo(nId, nodeInfo);
      return recv_notifyNodeInfo();
    }

    public void send_notifyNodeInfo(java.lang.String nId, at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo) throws org.apache.thrift.TException
    {
      notifyNodeInfo_args args = new notifyNodeInfo_args();
      args.setNId(nId);
      args.setNodeInfo(nodeInfo);
      sendBase("notifyNodeInfo", args);
    }

    public java.lang.String recv_notifyNodeInfo() throws org.apache.thrift.TException
    {
      notifyNodeInfo_result result = new notifyNodeInfo_result();
      receiveBase(result, "notifyNodeInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "notifyNodeInfo failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void notifyTasksNewState(java.lang.String nId, java.util.List<java.lang.String> taskIds, at.enfilo.def.transfer.dto.ExecutionState newState, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyTasksNewState_call method_call = new notifyTasksNewState_call(nId, taskIds, newState, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyTasksNewState_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String nId;
      private java.util.List<java.lang.String> taskIds;
      private at.enfilo.def.transfer.dto.ExecutionState newState;
      public notifyTasksNewState_call(java.lang.String nId, java.util.List<java.lang.String> taskIds, at.enfilo.def.transfer.dto.ExecutionState newState, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nId = nId;
        this.taskIds = taskIds;
        this.newState = newState;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyTasksNewState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyTasksNewState_args args = new notifyTasksNewState_args();
        args.setNId(nId);
        args.setTaskIds(taskIds);
        args.setNewState(newState);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifyTasksNewState();
      }
    }

    public void notifyTasksReceived(java.lang.String nId, java.util.List<java.lang.String> taskIds, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyTasksReceived_call method_call = new notifyTasksReceived_call(nId, taskIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyTasksReceived_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String nId;
      private java.util.List<java.lang.String> taskIds;
      public notifyTasksReceived_call(java.lang.String nId, java.util.List<java.lang.String> taskIds, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nId = nId;
        this.taskIds = taskIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyTasksReceived", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyTasksReceived_args args = new notifyTasksReceived_args();
        args.setNId(nId);
        args.setTaskIds(taskIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifyTasksReceived();
      }
    }

    public void notifyNodeInfo(java.lang.String nId, at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      notifyNodeInfo_call method_call = new notifyNodeInfo_call(nId, nodeInfo, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class notifyNodeInfo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String nId;
      private at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo;
      public notifyNodeInfo_call(java.lang.String nId, at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.nId = nId;
        this.nodeInfo = nodeInfo;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("notifyNodeInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        notifyNodeInfo_args args = new notifyNodeInfo_args();
        args.setNId(nId);
        args.setNodeInfo(nodeInfo);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_notifyNodeInfo();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("notifyTasksNewState", new notifyTasksNewState());
      processMap.put("notifyTasksReceived", new notifyTasksReceived());
      processMap.put("notifyNodeInfo", new notifyNodeInfo());
      return processMap;
    }

    public static class notifyTasksNewState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyTasksNewState_args> {
      public notifyTasksNewState() {
        super("notifyTasksNewState");
      }

      public notifyTasksNewState_args getEmptyArgsInstance() {
        return new notifyTasksNewState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public notifyTasksNewState_result getResult(I iface, notifyTasksNewState_args args) throws org.apache.thrift.TException {
        notifyTasksNewState_result result = new notifyTasksNewState_result();
        result.success = iface.notifyTasksNewState(args.nId, args.taskIds, args.newState);
        return result;
      }
    }

    public static class notifyTasksReceived<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyTasksReceived_args> {
      public notifyTasksReceived() {
        super("notifyTasksReceived");
      }

      public notifyTasksReceived_args getEmptyArgsInstance() {
        return new notifyTasksReceived_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public notifyTasksReceived_result getResult(I iface, notifyTasksReceived_args args) throws org.apache.thrift.TException {
        notifyTasksReceived_result result = new notifyTasksReceived_result();
        result.success = iface.notifyTasksReceived(args.nId, args.taskIds);
        return result;
      }
    }

    public static class notifyNodeInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, notifyNodeInfo_args> {
      public notifyNodeInfo() {
        super("notifyNodeInfo");
      }

      public notifyNodeInfo_args getEmptyArgsInstance() {
        return new notifyNodeInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public notifyNodeInfo_result getResult(I iface, notifyNodeInfo_args args) throws org.apache.thrift.TException {
        notifyNodeInfo_result result = new notifyNodeInfo_result();
        result.success = iface.notifyNodeInfo(args.nId, args.nodeInfo);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("notifyTasksNewState", new notifyTasksNewState());
      processMap.put("notifyTasksReceived", new notifyTasksReceived());
      processMap.put("notifyNodeInfo", new notifyNodeInfo());
      return processMap;
    }

    public static class notifyTasksNewState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyTasksNewState_args, java.lang.String> {
      public notifyTasksNewState() {
        super("notifyTasksNewState");
      }

      public notifyTasksNewState_args getEmptyArgsInstance() {
        return new notifyTasksNewState_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            notifyTasksNewState_result result = new notifyTasksNewState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyTasksNewState_result result = new notifyTasksNewState_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyTasksNewState_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.notifyTasksNewState(args.nId, args.taskIds, args.newState,resultHandler);
      }
    }

    public static class notifyTasksReceived<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyTasksReceived_args, java.lang.String> {
      public notifyTasksReceived() {
        super("notifyTasksReceived");
      }

      public notifyTasksReceived_args getEmptyArgsInstance() {
        return new notifyTasksReceived_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            notifyTasksReceived_result result = new notifyTasksReceived_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyTasksReceived_result result = new notifyTasksReceived_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyTasksReceived_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.notifyTasksReceived(args.nId, args.taskIds,resultHandler);
      }
    }

    public static class notifyNodeInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, notifyNodeInfo_args, java.lang.String> {
      public notifyNodeInfo() {
        super("notifyNodeInfo");
      }

      public notifyNodeInfo_args getEmptyArgsInstance() {
        return new notifyNodeInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            notifyNodeInfo_result result = new notifyNodeInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            notifyNodeInfo_result result = new notifyNodeInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, notifyNodeInfo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.notifyNodeInfo(args.nId, args.nodeInfo,resultHandler);
      }
    }

  }

  public static class notifyTasksNewState_args implements org.apache.thrift.TBase<notifyTasksNewState_args, notifyTasksNewState_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyTasksNewState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyTasksNewState_args");

    private static final org.apache.thrift.protocol.TField N_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField NEW_STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("newState", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyTasksNewState_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyTasksNewState_argsTupleSchemeFactory();

    public java.lang.String nId; // required
    public java.util.List<java.lang.String> taskIds; // required
    /**
     * 
     * @see at.enfilo.def.transfer.dto.ExecutionState
     */
    public at.enfilo.def.transfer.dto.ExecutionState newState; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N_ID((short)1, "nId"),
      TASK_IDS((short)2, "taskIds"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ExecutionState
       */
      NEW_STATE((short)3, "newState");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N_ID
            return N_ID;
          case 2: // TASK_IDS
            return TASK_IDS;
          case 3: // NEW_STATE
            return NEW_STATE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N_ID, new org.apache.thrift.meta_data.FieldMetaData("nId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "Id"))));
      tmpMap.put(_Fields.NEW_STATE, new org.apache.thrift.meta_data.FieldMetaData("newState", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ExecutionState.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyTasksNewState_args.class, metaDataMap);
    }

    public notifyTasksNewState_args() {
    }

    public notifyTasksNewState_args(
      java.lang.String nId,
      java.util.List<java.lang.String> taskIds,
      at.enfilo.def.transfer.dto.ExecutionState newState)
    {
      this();
      this.nId = nId;
      this.taskIds = taskIds;
      this.newState = newState;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyTasksNewState_args(notifyTasksNewState_args other) {
      if (other.isSetNId()) {
        this.nId = other.nId;
      }
      if (other.isSetTaskIds()) {
        java.util.List<java.lang.String> __this__taskIds = new java.util.ArrayList<java.lang.String>(other.taskIds.size());
        for (java.lang.String other_element : other.taskIds) {
          __this__taskIds.add(other_element);
        }
        this.taskIds = __this__taskIds;
      }
      if (other.isSetNewState()) {
        this.newState = other.newState;
      }
    }

    public notifyTasksNewState_args deepCopy() {
      return new notifyTasksNewState_args(this);
    }

    @Override
    public void clear() {
      this.nId = null;
      this.taskIds = null;
      this.newState = null;
    }

    public java.lang.String getNId() {
      return this.nId;
    }

    public notifyTasksNewState_args setNId(java.lang.String nId) {
      this.nId = nId;
      return this;
    }

    public void unsetNId() {
      this.nId = null;
    }

    /** Returns true if field nId is set (has been assigned a value) and false otherwise */
    public boolean isSetNId() {
      return this.nId != null;
    }

    public void setNIdIsSet(boolean value) {
      if (!value) {
        this.nId = null;
      }
    }

    public int getTaskIdsSize() {
      return (this.taskIds == null) ? 0 : this.taskIds.size();
    }

    public java.util.Iterator<java.lang.String> getTaskIdsIterator() {
      return (this.taskIds == null) ? null : this.taskIds.iterator();
    }

    public void addToTaskIds(java.lang.String elem) {
      if (this.taskIds == null) {
        this.taskIds = new java.util.ArrayList<java.lang.String>();
      }
      this.taskIds.add(elem);
    }

    public java.util.List<java.lang.String> getTaskIds() {
      return this.taskIds;
    }

    public notifyTasksNewState_args setTaskIds(java.util.List<java.lang.String> taskIds) {
      this.taskIds = taskIds;
      return this;
    }

    public void unsetTaskIds() {
      this.taskIds = null;
    }

    /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskIds() {
      return this.taskIds != null;
    }

    public void setTaskIdsIsSet(boolean value) {
      if (!value) {
        this.taskIds = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ExecutionState
     */
    public at.enfilo.def.transfer.dto.ExecutionState getNewState() {
      return this.newState;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ExecutionState
     */
    public notifyTasksNewState_args setNewState(at.enfilo.def.transfer.dto.ExecutionState newState) {
      this.newState = newState;
      return this;
    }

    public void unsetNewState() {
      this.newState = null;
    }

    /** Returns true if field newState is set (has been assigned a value) and false otherwise */
    public boolean isSetNewState() {
      return this.newState != null;
    }

    public void setNewStateIsSet(boolean value) {
      if (!value) {
        this.newState = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case N_ID:
        if (value == null) {
          unsetNId();
        } else {
          setNId((java.lang.String)value);
        }
        break;

      case TASK_IDS:
        if (value == null) {
          unsetTaskIds();
        } else {
          setTaskIds((java.util.List<java.lang.String>)value);
        }
        break;

      case NEW_STATE:
        if (value == null) {
          unsetNewState();
        } else {
          setNewState((at.enfilo.def.transfer.dto.ExecutionState)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case N_ID:
        return getNId();

      case TASK_IDS:
        return getTaskIds();

      case NEW_STATE:
        return getNewState();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case N_ID:
        return isSetNId();
      case TASK_IDS:
        return isSetTaskIds();
      case NEW_STATE:
        return isSetNewState();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyTasksNewState_args)
        return this.equals((notifyTasksNewState_args)that);
      return false;
    }

    public boolean equals(notifyTasksNewState_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nId = true && this.isSetNId();
      boolean that_present_nId = true && that.isSetNId();
      if (this_present_nId || that_present_nId) {
        if (!(this_present_nId && that_present_nId))
          return false;
        if (!this.nId.equals(that.nId))
          return false;
      }

      boolean this_present_taskIds = true && this.isSetTaskIds();
      boolean that_present_taskIds = true && that.isSetTaskIds();
      if (this_present_taskIds || that_present_taskIds) {
        if (!(this_present_taskIds && that_present_taskIds))
          return false;
        if (!this.taskIds.equals(that.taskIds))
          return false;
      }

      boolean this_present_newState = true && this.isSetNewState();
      boolean that_present_newState = true && that.isSetNewState();
      if (this_present_newState || that_present_newState) {
        if (!(this_present_newState && that_present_newState))
          return false;
        if (!this.newState.equals(that.newState))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNId()) ? 131071 : 524287);
      if (isSetNId())
        hashCode = hashCode * 8191 + nId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTaskIds()) ? 131071 : 524287);
      if (isSetTaskIds())
        hashCode = hashCode * 8191 + taskIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetNewState()) ? 131071 : 524287);
      if (isSetNewState())
        hashCode = hashCode * 8191 + newState.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(notifyTasksNewState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNId()).compareTo(other.isSetNId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nId, other.nId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewState()).compareTo(other.isSetNewState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newState, other.newState);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyTasksNewState_args(");
      boolean first = true;

      sb.append("nId:");
      if (this.nId == null) {
        sb.append("null");
      } else {
        sb.append(this.nId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskIds:");
      if (this.taskIds == null) {
        sb.append("null");
      } else {
        sb.append(this.taskIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newState:");
      if (this.newState == null) {
        sb.append("null");
      } else {
        sb.append(this.newState);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyTasksNewState_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksNewState_argsStandardScheme getScheme() {
        return new notifyTasksNewState_argsStandardScheme();
      }
    }

    private static class notifyTasksNewState_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyTasksNewState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyTasksNewState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nId = iprot.readString();
                struct.setNIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.taskIds = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.taskIds.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NEW_STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newState = at.enfilo.def.transfer.dto.ExecutionState.findByValue(iprot.readI32());
                struct.setNewStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyTasksNewState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nId != null) {
          oprot.writeFieldBegin(N_ID_FIELD_DESC);
          oprot.writeString(struct.nId);
          oprot.writeFieldEnd();
        }
        if (struct.taskIds != null) {
          oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taskIds.size()));
            for (java.lang.String _iter3 : struct.taskIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.newState != null) {
          oprot.writeFieldBegin(NEW_STATE_FIELD_DESC);
          oprot.writeI32(struct.newState.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyTasksNewState_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksNewState_argsTupleScheme getScheme() {
        return new notifyTasksNewState_argsTupleScheme();
      }
    }

    private static class notifyTasksNewState_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyTasksNewState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyTasksNewState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNId()) {
          optionals.set(0);
        }
        if (struct.isSetTaskIds()) {
          optionals.set(1);
        }
        if (struct.isSetNewState()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNId()) {
          oprot.writeString(struct.nId);
        }
        if (struct.isSetTaskIds()) {
          {
            oprot.writeI32(struct.taskIds.size());
            for (java.lang.String _iter4 : struct.taskIds)
            {
              oprot.writeString(_iter4);
            }
          }
        }
        if (struct.isSetNewState()) {
          oprot.writeI32(struct.newState.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyTasksNewState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.nId = iprot.readString();
          struct.setNIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.taskIds = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.taskIds.add(_elem6);
            }
          }
          struct.setTaskIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.newState = at.enfilo.def.transfer.dto.ExecutionState.findByValue(iprot.readI32());
          struct.setNewStateIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyTasksNewState_result implements org.apache.thrift.TBase<notifyTasksNewState_result, notifyTasksNewState_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyTasksNewState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyTasksNewState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyTasksNewState_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyTasksNewState_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyTasksNewState_result.class, metaDataMap);
    }

    public notifyTasksNewState_result() {
    }

    public notifyTasksNewState_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyTasksNewState_result(notifyTasksNewState_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public notifyTasksNewState_result deepCopy() {
      return new notifyTasksNewState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public notifyTasksNewState_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyTasksNewState_result)
        return this.equals((notifyTasksNewState_result)that);
      return false;
    }

    public boolean equals(notifyTasksNewState_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyTasksNewState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyTasksNewState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyTasksNewState_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksNewState_resultStandardScheme getScheme() {
        return new notifyTasksNewState_resultStandardScheme();
      }
    }

    private static class notifyTasksNewState_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyTasksNewState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyTasksNewState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyTasksNewState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyTasksNewState_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksNewState_resultTupleScheme getScheme() {
        return new notifyTasksNewState_resultTupleScheme();
      }
    }

    private static class notifyTasksNewState_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyTasksNewState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyTasksNewState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyTasksNewState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyTasksReceived_args implements org.apache.thrift.TBase<notifyTasksReceived_args, notifyTasksReceived_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyTasksReceived_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyTasksReceived_args");

    private static final org.apache.thrift.protocol.TField N_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField TASK_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("taskIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyTasksReceived_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyTasksReceived_argsTupleSchemeFactory();

    public java.lang.String nId; // required
    public java.util.List<java.lang.String> taskIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N_ID((short)1, "nId"),
      TASK_IDS((short)2, "taskIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N_ID
            return N_ID;
          case 2: // TASK_IDS
            return TASK_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N_ID, new org.apache.thrift.meta_data.FieldMetaData("nId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.TASK_IDS, new org.apache.thrift.meta_data.FieldMetaData("taskIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "Id"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyTasksReceived_args.class, metaDataMap);
    }

    public notifyTasksReceived_args() {
    }

    public notifyTasksReceived_args(
      java.lang.String nId,
      java.util.List<java.lang.String> taskIds)
    {
      this();
      this.nId = nId;
      this.taskIds = taskIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyTasksReceived_args(notifyTasksReceived_args other) {
      if (other.isSetNId()) {
        this.nId = other.nId;
      }
      if (other.isSetTaskIds()) {
        java.util.List<java.lang.String> __this__taskIds = new java.util.ArrayList<java.lang.String>(other.taskIds.size());
        for (java.lang.String other_element : other.taskIds) {
          __this__taskIds.add(other_element);
        }
        this.taskIds = __this__taskIds;
      }
    }

    public notifyTasksReceived_args deepCopy() {
      return new notifyTasksReceived_args(this);
    }

    @Override
    public void clear() {
      this.nId = null;
      this.taskIds = null;
    }

    public java.lang.String getNId() {
      return this.nId;
    }

    public notifyTasksReceived_args setNId(java.lang.String nId) {
      this.nId = nId;
      return this;
    }

    public void unsetNId() {
      this.nId = null;
    }

    /** Returns true if field nId is set (has been assigned a value) and false otherwise */
    public boolean isSetNId() {
      return this.nId != null;
    }

    public void setNIdIsSet(boolean value) {
      if (!value) {
        this.nId = null;
      }
    }

    public int getTaskIdsSize() {
      return (this.taskIds == null) ? 0 : this.taskIds.size();
    }

    public java.util.Iterator<java.lang.String> getTaskIdsIterator() {
      return (this.taskIds == null) ? null : this.taskIds.iterator();
    }

    public void addToTaskIds(java.lang.String elem) {
      if (this.taskIds == null) {
        this.taskIds = new java.util.ArrayList<java.lang.String>();
      }
      this.taskIds.add(elem);
    }

    public java.util.List<java.lang.String> getTaskIds() {
      return this.taskIds;
    }

    public notifyTasksReceived_args setTaskIds(java.util.List<java.lang.String> taskIds) {
      this.taskIds = taskIds;
      return this;
    }

    public void unsetTaskIds() {
      this.taskIds = null;
    }

    /** Returns true if field taskIds is set (has been assigned a value) and false otherwise */
    public boolean isSetTaskIds() {
      return this.taskIds != null;
    }

    public void setTaskIdsIsSet(boolean value) {
      if (!value) {
        this.taskIds = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case N_ID:
        if (value == null) {
          unsetNId();
        } else {
          setNId((java.lang.String)value);
        }
        break;

      case TASK_IDS:
        if (value == null) {
          unsetTaskIds();
        } else {
          setTaskIds((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case N_ID:
        return getNId();

      case TASK_IDS:
        return getTaskIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case N_ID:
        return isSetNId();
      case TASK_IDS:
        return isSetTaskIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyTasksReceived_args)
        return this.equals((notifyTasksReceived_args)that);
      return false;
    }

    public boolean equals(notifyTasksReceived_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nId = true && this.isSetNId();
      boolean that_present_nId = true && that.isSetNId();
      if (this_present_nId || that_present_nId) {
        if (!(this_present_nId && that_present_nId))
          return false;
        if (!this.nId.equals(that.nId))
          return false;
      }

      boolean this_present_taskIds = true && this.isSetTaskIds();
      boolean that_present_taskIds = true && that.isSetTaskIds();
      if (this_present_taskIds || that_present_taskIds) {
        if (!(this_present_taskIds && that_present_taskIds))
          return false;
        if (!this.taskIds.equals(that.taskIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNId()) ? 131071 : 524287);
      if (isSetNId())
        hashCode = hashCode * 8191 + nId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTaskIds()) ? 131071 : 524287);
      if (isSetTaskIds())
        hashCode = hashCode * 8191 + taskIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyTasksReceived_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNId()).compareTo(other.isSetNId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nId, other.nId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTaskIds()).compareTo(other.isSetTaskIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTaskIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.taskIds, other.taskIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyTasksReceived_args(");
      boolean first = true;

      sb.append("nId:");
      if (this.nId == null) {
        sb.append("null");
      } else {
        sb.append(this.nId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("taskIds:");
      if (this.taskIds == null) {
        sb.append("null");
      } else {
        sb.append(this.taskIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyTasksReceived_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksReceived_argsStandardScheme getScheme() {
        return new notifyTasksReceived_argsStandardScheme();
      }
    }

    private static class notifyTasksReceived_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyTasksReceived_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyTasksReceived_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nId = iprot.readString();
                struct.setNIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // TASK_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.taskIds = new java.util.ArrayList<java.lang.String>(_list8.size);
                  java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.taskIds.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setTaskIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyTasksReceived_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nId != null) {
          oprot.writeFieldBegin(N_ID_FIELD_DESC);
          oprot.writeString(struct.nId);
          oprot.writeFieldEnd();
        }
        if (struct.taskIds != null) {
          oprot.writeFieldBegin(TASK_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.taskIds.size()));
            for (java.lang.String _iter11 : struct.taskIds)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyTasksReceived_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksReceived_argsTupleScheme getScheme() {
        return new notifyTasksReceived_argsTupleScheme();
      }
    }

    private static class notifyTasksReceived_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyTasksReceived_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyTasksReceived_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNId()) {
          optionals.set(0);
        }
        if (struct.isSetTaskIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNId()) {
          oprot.writeString(struct.nId);
        }
        if (struct.isSetTaskIds()) {
          {
            oprot.writeI32(struct.taskIds.size());
            for (java.lang.String _iter12 : struct.taskIds)
            {
              oprot.writeString(_iter12);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyTasksReceived_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nId = iprot.readString();
          struct.setNIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.taskIds = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.taskIds.add(_elem14);
            }
          }
          struct.setTaskIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyTasksReceived_result implements org.apache.thrift.TBase<notifyTasksReceived_result, notifyTasksReceived_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyTasksReceived_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyTasksReceived_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyTasksReceived_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyTasksReceived_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyTasksReceived_result.class, metaDataMap);
    }

    public notifyTasksReceived_result() {
    }

    public notifyTasksReceived_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyTasksReceived_result(notifyTasksReceived_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public notifyTasksReceived_result deepCopy() {
      return new notifyTasksReceived_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public notifyTasksReceived_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyTasksReceived_result)
        return this.equals((notifyTasksReceived_result)that);
      return false;
    }

    public boolean equals(notifyTasksReceived_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyTasksReceived_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyTasksReceived_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyTasksReceived_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksReceived_resultStandardScheme getScheme() {
        return new notifyTasksReceived_resultStandardScheme();
      }
    }

    private static class notifyTasksReceived_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyTasksReceived_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyTasksReceived_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyTasksReceived_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyTasksReceived_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyTasksReceived_resultTupleScheme getScheme() {
        return new notifyTasksReceived_resultTupleScheme();
      }
    }

    private static class notifyTasksReceived_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyTasksReceived_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyTasksReceived_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyTasksReceived_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyNodeInfo_args implements org.apache.thrift.TBase<notifyNodeInfo_args, notifyNodeInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<notifyNodeInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyNodeInfo_args");

    private static final org.apache.thrift.protocol.TField N_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("nId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NODE_INFO_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeInfo", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyNodeInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyNodeInfo_argsTupleSchemeFactory();

    public java.lang.String nId; // required
    public at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      N_ID((short)1, "nId"),
      NODE_INFO((short)2, "nodeInfo");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // N_ID
            return N_ID;
          case 2: // NODE_INFO
            return NODE_INFO;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.N_ID, new org.apache.thrift.meta_data.FieldMetaData("nId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.NODE_INFO, new org.apache.thrift.meta_data.FieldMetaData("nodeInfo", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.NodeInfoDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyNodeInfo_args.class, metaDataMap);
    }

    public notifyNodeInfo_args() {
    }

    public notifyNodeInfo_args(
      java.lang.String nId,
      at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo)
    {
      this();
      this.nId = nId;
      this.nodeInfo = nodeInfo;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyNodeInfo_args(notifyNodeInfo_args other) {
      if (other.isSetNId()) {
        this.nId = other.nId;
      }
      if (other.isSetNodeInfo()) {
        this.nodeInfo = new at.enfilo.def.transfer.dto.NodeInfoDTO(other.nodeInfo);
      }
    }

    public notifyNodeInfo_args deepCopy() {
      return new notifyNodeInfo_args(this);
    }

    @Override
    public void clear() {
      this.nId = null;
      this.nodeInfo = null;
    }

    public java.lang.String getNId() {
      return this.nId;
    }

    public notifyNodeInfo_args setNId(java.lang.String nId) {
      this.nId = nId;
      return this;
    }

    public void unsetNId() {
      this.nId = null;
    }

    /** Returns true if field nId is set (has been assigned a value) and false otherwise */
    public boolean isSetNId() {
      return this.nId != null;
    }

    public void setNIdIsSet(boolean value) {
      if (!value) {
        this.nId = null;
      }
    }

    public at.enfilo.def.transfer.dto.NodeInfoDTO getNodeInfo() {
      return this.nodeInfo;
    }

    public notifyNodeInfo_args setNodeInfo(at.enfilo.def.transfer.dto.NodeInfoDTO nodeInfo) {
      this.nodeInfo = nodeInfo;
      return this;
    }

    public void unsetNodeInfo() {
      this.nodeInfo = null;
    }

    /** Returns true if field nodeInfo is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeInfo() {
      return this.nodeInfo != null;
    }

    public void setNodeInfoIsSet(boolean value) {
      if (!value) {
        this.nodeInfo = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case N_ID:
        if (value == null) {
          unsetNId();
        } else {
          setNId((java.lang.String)value);
        }
        break;

      case NODE_INFO:
        if (value == null) {
          unsetNodeInfo();
        } else {
          setNodeInfo((at.enfilo.def.transfer.dto.NodeInfoDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case N_ID:
        return getNId();

      case NODE_INFO:
        return getNodeInfo();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case N_ID:
        return isSetNId();
      case NODE_INFO:
        return isSetNodeInfo();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyNodeInfo_args)
        return this.equals((notifyNodeInfo_args)that);
      return false;
    }

    public boolean equals(notifyNodeInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_nId = true && this.isSetNId();
      boolean that_present_nId = true && that.isSetNId();
      if (this_present_nId || that_present_nId) {
        if (!(this_present_nId && that_present_nId))
          return false;
        if (!this.nId.equals(that.nId))
          return false;
      }

      boolean this_present_nodeInfo = true && this.isSetNodeInfo();
      boolean that_present_nodeInfo = true && that.isSetNodeInfo();
      if (this_present_nodeInfo || that_present_nodeInfo) {
        if (!(this_present_nodeInfo && that_present_nodeInfo))
          return false;
        if (!this.nodeInfo.equals(that.nodeInfo))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetNId()) ? 131071 : 524287);
      if (isSetNId())
        hashCode = hashCode * 8191 + nId.hashCode();

      hashCode = hashCode * 8191 + ((isSetNodeInfo()) ? 131071 : 524287);
      if (isSetNodeInfo())
        hashCode = hashCode * 8191 + nodeInfo.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyNodeInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNId()).compareTo(other.isSetNId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nId, other.nId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeInfo()).compareTo(other.isSetNodeInfo());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeInfo()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeInfo, other.nodeInfo);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyNodeInfo_args(");
      boolean first = true;

      sb.append("nId:");
      if (this.nId == null) {
        sb.append("null");
      } else {
        sb.append(this.nId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeInfo:");
      if (this.nodeInfo == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeInfo);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (nodeInfo != null) {
        nodeInfo.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyNodeInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyNodeInfo_argsStandardScheme getScheme() {
        return new notifyNodeInfo_argsStandardScheme();
      }
    }

    private static class notifyNodeInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyNodeInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyNodeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // N_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.nId = iprot.readString();
                struct.setNIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NODE_INFO
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.nodeInfo = new at.enfilo.def.transfer.dto.NodeInfoDTO();
                struct.nodeInfo.read(iprot);
                struct.setNodeInfoIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyNodeInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.nId != null) {
          oprot.writeFieldBegin(N_ID_FIELD_DESC);
          oprot.writeString(struct.nId);
          oprot.writeFieldEnd();
        }
        if (struct.nodeInfo != null) {
          oprot.writeFieldBegin(NODE_INFO_FIELD_DESC);
          struct.nodeInfo.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyNodeInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyNodeInfo_argsTupleScheme getScheme() {
        return new notifyNodeInfo_argsTupleScheme();
      }
    }

    private static class notifyNodeInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyNodeInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyNodeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNId()) {
          optionals.set(0);
        }
        if (struct.isSetNodeInfo()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetNId()) {
          oprot.writeString(struct.nId);
        }
        if (struct.isSetNodeInfo()) {
          struct.nodeInfo.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyNodeInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.nId = iprot.readString();
          struct.setNIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.nodeInfo = new at.enfilo.def.transfer.dto.NodeInfoDTO();
          struct.nodeInfo.read(iprot);
          struct.setNodeInfoIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class notifyNodeInfo_result implements org.apache.thrift.TBase<notifyNodeInfo_result, notifyNodeInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<notifyNodeInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("notifyNodeInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new notifyNodeInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new notifyNodeInfo_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(notifyNodeInfo_result.class, metaDataMap);
    }

    public notifyNodeInfo_result() {
    }

    public notifyNodeInfo_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public notifyNodeInfo_result(notifyNodeInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public notifyNodeInfo_result deepCopy() {
      return new notifyNodeInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public notifyNodeInfo_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof notifyNodeInfo_result)
        return this.equals((notifyNodeInfo_result)that);
      return false;
    }

    public boolean equals(notifyNodeInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(notifyNodeInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("notifyNodeInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class notifyNodeInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyNodeInfo_resultStandardScheme getScheme() {
        return new notifyNodeInfo_resultStandardScheme();
      }
    }

    private static class notifyNodeInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<notifyNodeInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, notifyNodeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, notifyNodeInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class notifyNodeInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public notifyNodeInfo_resultTupleScheme getScheme() {
        return new notifyNodeInfo_resultTupleScheme();
      }
    }

    private static class notifyNodeInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<notifyNodeInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, notifyNodeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, notifyNodeInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
