/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.execlogic.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-21")
public class ExecLogicService {

  /**
   * Execution Service: Handles all Programs, Jobs and Tasks.
   */
  public interface Iface {

    /**
     * Returns all program ids which are accessable by given user id.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param userId
     */
    public java.lang.String getAllPrograms(java.lang.String userId) throws org.apache.thrift.TException;

    /**
     * Request the creation of a new Program on a specified Cluster (clusterId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param clusterId
     * @param userId
     */
    public java.lang.String createProgram(java.lang.String clusterId, java.lang.String userId) throws org.apache.thrift.TException;

    /**
     * Returns info about Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String getProgram(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Delete existing Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String deleteProgram(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Abort running Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String abortProgram(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Update name of Programm (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param pId
     * @param name
     */
    public java.lang.String updateProgramName(java.lang.String pId, java.lang.String name) throws org.apache.thrift.TException;

    /**
     * Update description of Programm (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param pId
     * @param description
     */
    public java.lang.String updateProgramDescription(java.lang.String pId, java.lang.String description) throws org.apache.thrift.TException;

    /**
     * Mark Program (pId) as finished.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String markProgramAsFinished(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Request the list of Jobs (jId) for a given Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String getAllJobs(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Request the creation of a new Job on a specified Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String createJob(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Requests info about specific Job given by Program Id (pId) and Job Id (jId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     */
    public java.lang.String getJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException;

    /**
     * Requests deletion of a specific Job given by Program Id (pId) and Job Id (jId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     */
    public java.lang.String deleteJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException;

    /**
     * Request the MapRoutine which is attached to the specified Job by Program Id (pId) and Job Id (jId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     */
    public java.lang.String getAttachedMapRoutine(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException;

    /**
     * Attaches a MapRoutine (mapRoutineId) to an Job (specified by pId and jId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param mapRoutineId
     */
    public java.lang.String attachMapRoutine(java.lang.String pId, java.lang.String jId, java.lang.String mapRoutineId) throws org.apache.thrift.TException;

    /**
     * Returns attached ReduceRoutine (rlId) of the requested Program (pId) and Job (jId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     */
    public java.lang.String getAttachedReduceRoutine(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException;

    /**
     * Attaches a ReduceRoutine (rlId) to an Job (specified by pId and jId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param reduceRoutineId
     */
    public java.lang.String attachReduceRoutine(java.lang.String pId, java.lang.String jId, java.lang.String reduceRoutineId) throws org.apache.thrift.TException;

    /**
     * Requests a list of all Tasks (tId) for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param pId
     * @param jId
     * @param sortingCriterion
     */
    public java.lang.String getAllTasks(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) throws org.apache.thrift.TException;

    /**
     * Requests a list of Tasks (tId) matching with the given etate for a given Program (pId) and Job (jId) sorted by the given sorting criterion.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param state
     * @param sortingCriterion
     */
    public java.lang.String getAllTasksWithState(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.ExecutionState state, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) throws org.apache.thrift.TException;

    /**
     * Request the creation of a new Task on a specified Program (pId) and Job (jId) using
     * given Routine Instance (= Routine Id with Parameters)
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param objectiveRoutine
     */
    public java.lang.String createTask(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine) throws org.apache.thrift.TException;

    /**
     * Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param tId
     */
    public java.lang.String getTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException;

    /**
     * Returns info about Task by a combination of Program (pId), Job (jId) and Task (tId).
     * Includes in- and/or out-resources (parameter) if set.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param tId
     * @param includeInParameters
     * @param includeOutParameters
     */
    public java.lang.String getTaskPartial(java.lang.String pId, java.lang.String jId, java.lang.String tId, boolean includeInParameters, boolean includeOutParameters) throws org.apache.thrift.TException;

    /**
     * Mark the given Job (jId) on Program (pId) as complete. This means all Tasks are created.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     */
    public java.lang.String markJobAsComplete(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException;

    /**
     * Abort Job (jId) on Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     */
    public java.lang.String abortJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException;

    /**
     * Abort a running Task (tId) on a specified Job (jId) and Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param jId
     * @param tId
     */
    public java.lang.String abortTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException;

    /**
     * Re run a given Task (tId). This Task must be at state FAILED or SUCCESS.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param pId
     * @param jId
     * @param tId
     */
    public java.lang.String reRunTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException;

    /**
     * Request a list of all SharedResources of a Program (pId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     */
    public java.lang.String getAllSharedResources(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Request the creation of a new SharedResource on a specified Program (pId) of a given DatyType (dataType) and data.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param dataTypeId
     * @param data
     */
    public java.lang.String createSharedResource(java.lang.String pId, java.lang.String dataTypeId, java.nio.ByteBuffer data) throws org.apache.thrift.TException;

    /**
     * Request the SharedResource by a combination of Program (pId) and SharedResource (rId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param rId
     */
    public java.lang.String getSharedResource(java.lang.String pId, java.lang.String rId) throws org.apache.thrift.TException;

    /**
     * Request the deletion of a SharedResource by a combination of Program (pId) and SharedResource (rId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param pId
     * @param rId
     */
    public java.lang.String deleteSharedResource(java.lang.String pId, java.lang.String rId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getAllPrograms(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createProgram(java.lang.String clusterId, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void deleteProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void abortProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updateProgramName(java.lang.String pId, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void updateProgramDescription(java.lang.String pId, java.lang.String description, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void markProgramAsFinished(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getAllJobs(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createJob(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getJob(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void deleteJob(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getAttachedMapRoutine(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void attachMapRoutine(java.lang.String pId, java.lang.String jId, java.lang.String mapRoutineId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getAttachedReduceRoutine(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void attachReduceRoutine(java.lang.String pId, java.lang.String jId, java.lang.String reduceRoutineId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getAllTasks(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getAllTasksWithState(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.ExecutionState state, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createTask(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getTask(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getTaskPartial(java.lang.String pId, java.lang.String jId, java.lang.String tId, boolean includeInParameters, boolean includeOutParameters, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void markJobAsComplete(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void abortJob(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void abortTask(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void reRunTask(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getAllSharedResources(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createSharedResource(java.lang.String pId, java.lang.String dataTypeId, java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getSharedResource(java.lang.String pId, java.lang.String rId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void deleteSharedResource(java.lang.String pId, java.lang.String rId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getAllPrograms(java.lang.String userId) throws org.apache.thrift.TException
    {
      send_getAllPrograms(userId);
      return recv_getAllPrograms();
    }

    public void send_getAllPrograms(java.lang.String userId) throws org.apache.thrift.TException
    {
      getAllPrograms_args args = new getAllPrograms_args();
      args.setUserId(userId);
      sendBase("getAllPrograms", args);
    }

    public java.lang.String recv_getAllPrograms() throws org.apache.thrift.TException
    {
      getAllPrograms_result result = new getAllPrograms_result();
      receiveBase(result, "getAllPrograms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllPrograms failed: unknown result");
    }

    public java.lang.String createProgram(java.lang.String clusterId, java.lang.String userId) throws org.apache.thrift.TException
    {
      send_createProgram(clusterId, userId);
      return recv_createProgram();
    }

    public void send_createProgram(java.lang.String clusterId, java.lang.String userId) throws org.apache.thrift.TException
    {
      createProgram_args args = new createProgram_args();
      args.setClusterId(clusterId);
      args.setUserId(userId);
      sendBase("createProgram", args);
    }

    public java.lang.String recv_createProgram() throws org.apache.thrift.TException
    {
      createProgram_result result = new createProgram_result();
      receiveBase(result, "createProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createProgram failed: unknown result");
    }

    public java.lang.String getProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_getProgram(pId);
      return recv_getProgram();
    }

    public void send_getProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      getProgram_args args = new getProgram_args();
      args.setPId(pId);
      sendBase("getProgram", args);
    }

    public java.lang.String recv_getProgram() throws org.apache.thrift.TException
    {
      getProgram_result result = new getProgram_result();
      receiveBase(result, "getProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getProgram failed: unknown result");
    }

    public java.lang.String deleteProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_deleteProgram(pId);
      return recv_deleteProgram();
    }

    public void send_deleteProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      deleteProgram_args args = new deleteProgram_args();
      args.setPId(pId);
      sendBase("deleteProgram", args);
    }

    public java.lang.String recv_deleteProgram() throws org.apache.thrift.TException
    {
      deleteProgram_result result = new deleteProgram_result();
      receiveBase(result, "deleteProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteProgram failed: unknown result");
    }

    public java.lang.String abortProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_abortProgram(pId);
      return recv_abortProgram();
    }

    public void send_abortProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      abortProgram_args args = new abortProgram_args();
      args.setPId(pId);
      sendBase("abortProgram", args);
    }

    public java.lang.String recv_abortProgram() throws org.apache.thrift.TException
    {
      abortProgram_result result = new abortProgram_result();
      receiveBase(result, "abortProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "abortProgram failed: unknown result");
    }

    public java.lang.String updateProgramName(java.lang.String pId, java.lang.String name) throws org.apache.thrift.TException
    {
      send_updateProgramName(pId, name);
      return recv_updateProgramName();
    }

    public void send_updateProgramName(java.lang.String pId, java.lang.String name) throws org.apache.thrift.TException
    {
      updateProgramName_args args = new updateProgramName_args();
      args.setPId(pId);
      args.setName(name);
      sendBase("updateProgramName", args);
    }

    public java.lang.String recv_updateProgramName() throws org.apache.thrift.TException
    {
      updateProgramName_result result = new updateProgramName_result();
      receiveBase(result, "updateProgramName");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProgramName failed: unknown result");
    }

    public java.lang.String updateProgramDescription(java.lang.String pId, java.lang.String description) throws org.apache.thrift.TException
    {
      send_updateProgramDescription(pId, description);
      return recv_updateProgramDescription();
    }

    public void send_updateProgramDescription(java.lang.String pId, java.lang.String description) throws org.apache.thrift.TException
    {
      updateProgramDescription_args args = new updateProgramDescription_args();
      args.setPId(pId);
      args.setDescription(description);
      sendBase("updateProgramDescription", args);
    }

    public java.lang.String recv_updateProgramDescription() throws org.apache.thrift.TException
    {
      updateProgramDescription_result result = new updateProgramDescription_result();
      receiveBase(result, "updateProgramDescription");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "updateProgramDescription failed: unknown result");
    }

    public java.lang.String markProgramAsFinished(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_markProgramAsFinished(pId);
      return recv_markProgramAsFinished();
    }

    public void send_markProgramAsFinished(java.lang.String pId) throws org.apache.thrift.TException
    {
      markProgramAsFinished_args args = new markProgramAsFinished_args();
      args.setPId(pId);
      sendBase("markProgramAsFinished", args);
    }

    public java.lang.String recv_markProgramAsFinished() throws org.apache.thrift.TException
    {
      markProgramAsFinished_result result = new markProgramAsFinished_result();
      receiveBase(result, "markProgramAsFinished");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markProgramAsFinished failed: unknown result");
    }

    public java.lang.String getAllJobs(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_getAllJobs(pId);
      return recv_getAllJobs();
    }

    public void send_getAllJobs(java.lang.String pId) throws org.apache.thrift.TException
    {
      getAllJobs_args args = new getAllJobs_args();
      args.setPId(pId);
      sendBase("getAllJobs", args);
    }

    public java.lang.String recv_getAllJobs() throws org.apache.thrift.TException
    {
      getAllJobs_result result = new getAllJobs_result();
      receiveBase(result, "getAllJobs");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllJobs failed: unknown result");
    }

    public java.lang.String createJob(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_createJob(pId);
      return recv_createJob();
    }

    public void send_createJob(java.lang.String pId) throws org.apache.thrift.TException
    {
      createJob_args args = new createJob_args();
      args.setPId(pId);
      sendBase("createJob", args);
    }

    public java.lang.String recv_createJob() throws org.apache.thrift.TException
    {
      createJob_result result = new createJob_result();
      receiveBase(result, "createJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createJob failed: unknown result");
    }

    public java.lang.String getJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      send_getJob(pId, jId);
      return recv_getJob();
    }

    public void send_getJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      getJob_args args = new getJob_args();
      args.setPId(pId);
      args.setJId(jId);
      sendBase("getJob", args);
    }

    public java.lang.String recv_getJob() throws org.apache.thrift.TException
    {
      getJob_result result = new getJob_result();
      receiveBase(result, "getJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getJob failed: unknown result");
    }

    public java.lang.String deleteJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      send_deleteJob(pId, jId);
      return recv_deleteJob();
    }

    public void send_deleteJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      deleteJob_args args = new deleteJob_args();
      args.setPId(pId);
      args.setJId(jId);
      sendBase("deleteJob", args);
    }

    public java.lang.String recv_deleteJob() throws org.apache.thrift.TException
    {
      deleteJob_result result = new deleteJob_result();
      receiveBase(result, "deleteJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteJob failed: unknown result");
    }

    public java.lang.String getAttachedMapRoutine(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      send_getAttachedMapRoutine(pId, jId);
      return recv_getAttachedMapRoutine();
    }

    public void send_getAttachedMapRoutine(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      getAttachedMapRoutine_args args = new getAttachedMapRoutine_args();
      args.setPId(pId);
      args.setJId(jId);
      sendBase("getAttachedMapRoutine", args);
    }

    public java.lang.String recv_getAttachedMapRoutine() throws org.apache.thrift.TException
    {
      getAttachedMapRoutine_result result = new getAttachedMapRoutine_result();
      receiveBase(result, "getAttachedMapRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAttachedMapRoutine failed: unknown result");
    }

    public java.lang.String attachMapRoutine(java.lang.String pId, java.lang.String jId, java.lang.String mapRoutineId) throws org.apache.thrift.TException
    {
      send_attachMapRoutine(pId, jId, mapRoutineId);
      return recv_attachMapRoutine();
    }

    public void send_attachMapRoutine(java.lang.String pId, java.lang.String jId, java.lang.String mapRoutineId) throws org.apache.thrift.TException
    {
      attachMapRoutine_args args = new attachMapRoutine_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setMapRoutineId(mapRoutineId);
      sendBase("attachMapRoutine", args);
    }

    public java.lang.String recv_attachMapRoutine() throws org.apache.thrift.TException
    {
      attachMapRoutine_result result = new attachMapRoutine_result();
      receiveBase(result, "attachMapRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "attachMapRoutine failed: unknown result");
    }

    public java.lang.String getAttachedReduceRoutine(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      send_getAttachedReduceRoutine(pId, jId);
      return recv_getAttachedReduceRoutine();
    }

    public void send_getAttachedReduceRoutine(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      getAttachedReduceRoutine_args args = new getAttachedReduceRoutine_args();
      args.setPId(pId);
      args.setJId(jId);
      sendBase("getAttachedReduceRoutine", args);
    }

    public java.lang.String recv_getAttachedReduceRoutine() throws org.apache.thrift.TException
    {
      getAttachedReduceRoutine_result result = new getAttachedReduceRoutine_result();
      receiveBase(result, "getAttachedReduceRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAttachedReduceRoutine failed: unknown result");
    }

    public java.lang.String attachReduceRoutine(java.lang.String pId, java.lang.String jId, java.lang.String reduceRoutineId) throws org.apache.thrift.TException
    {
      send_attachReduceRoutine(pId, jId, reduceRoutineId);
      return recv_attachReduceRoutine();
    }

    public void send_attachReduceRoutine(java.lang.String pId, java.lang.String jId, java.lang.String reduceRoutineId) throws org.apache.thrift.TException
    {
      attachReduceRoutine_args args = new attachReduceRoutine_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setReduceRoutineId(reduceRoutineId);
      sendBase("attachReduceRoutine", args);
    }

    public java.lang.String recv_attachReduceRoutine() throws org.apache.thrift.TException
    {
      attachReduceRoutine_result result = new attachReduceRoutine_result();
      receiveBase(result, "attachReduceRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "attachReduceRoutine failed: unknown result");
    }

    public java.lang.String getAllTasks(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) throws org.apache.thrift.TException
    {
      send_getAllTasks(pId, jId, sortingCriterion);
      return recv_getAllTasks();
    }

    public void send_getAllTasks(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) throws org.apache.thrift.TException
    {
      getAllTasks_args args = new getAllTasks_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setSortingCriterion(sortingCriterion);
      sendBase("getAllTasks", args);
    }

    public java.lang.String recv_getAllTasks() throws org.apache.thrift.TException
    {
      getAllTasks_result result = new getAllTasks_result();
      receiveBase(result, "getAllTasks");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllTasks failed: unknown result");
    }

    public java.lang.String getAllTasksWithState(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.ExecutionState state, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) throws org.apache.thrift.TException
    {
      send_getAllTasksWithState(pId, jId, state, sortingCriterion);
      return recv_getAllTasksWithState();
    }

    public void send_getAllTasksWithState(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.ExecutionState state, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) throws org.apache.thrift.TException
    {
      getAllTasksWithState_args args = new getAllTasksWithState_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setState(state);
      args.setSortingCriterion(sortingCriterion);
      sendBase("getAllTasksWithState", args);
    }

    public java.lang.String recv_getAllTasksWithState() throws org.apache.thrift.TException
    {
      getAllTasksWithState_result result = new getAllTasksWithState_result();
      receiveBase(result, "getAllTasksWithState");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllTasksWithState failed: unknown result");
    }

    public java.lang.String createTask(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine) throws org.apache.thrift.TException
    {
      send_createTask(pId, jId, objectiveRoutine);
      return recv_createTask();
    }

    public void send_createTask(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine) throws org.apache.thrift.TException
    {
      createTask_args args = new createTask_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setObjectiveRoutine(objectiveRoutine);
      sendBase("createTask", args);
    }

    public java.lang.String recv_createTask() throws org.apache.thrift.TException
    {
      createTask_result result = new createTask_result();
      receiveBase(result, "createTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createTask failed: unknown result");
    }

    public java.lang.String getTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException
    {
      send_getTask(pId, jId, tId);
      return recv_getTask();
    }

    public void send_getTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException
    {
      getTask_args args = new getTask_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setTId(tId);
      sendBase("getTask", args);
    }

    public java.lang.String recv_getTask() throws org.apache.thrift.TException
    {
      getTask_result result = new getTask_result();
      receiveBase(result, "getTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTask failed: unknown result");
    }

    public java.lang.String getTaskPartial(java.lang.String pId, java.lang.String jId, java.lang.String tId, boolean includeInParameters, boolean includeOutParameters) throws org.apache.thrift.TException
    {
      send_getTaskPartial(pId, jId, tId, includeInParameters, includeOutParameters);
      return recv_getTaskPartial();
    }

    public void send_getTaskPartial(java.lang.String pId, java.lang.String jId, java.lang.String tId, boolean includeInParameters, boolean includeOutParameters) throws org.apache.thrift.TException
    {
      getTaskPartial_args args = new getTaskPartial_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setTId(tId);
      args.setIncludeInParameters(includeInParameters);
      args.setIncludeOutParameters(includeOutParameters);
      sendBase("getTaskPartial", args);
    }

    public java.lang.String recv_getTaskPartial() throws org.apache.thrift.TException
    {
      getTaskPartial_result result = new getTaskPartial_result();
      receiveBase(result, "getTaskPartial");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getTaskPartial failed: unknown result");
    }

    public java.lang.String markJobAsComplete(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      send_markJobAsComplete(pId, jId);
      return recv_markJobAsComplete();
    }

    public void send_markJobAsComplete(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      markJobAsComplete_args args = new markJobAsComplete_args();
      args.setPId(pId);
      args.setJId(jId);
      sendBase("markJobAsComplete", args);
    }

    public java.lang.String recv_markJobAsComplete() throws org.apache.thrift.TException
    {
      markJobAsComplete_result result = new markJobAsComplete_result();
      receiveBase(result, "markJobAsComplete");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "markJobAsComplete failed: unknown result");
    }

    public java.lang.String abortJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      send_abortJob(pId, jId);
      return recv_abortJob();
    }

    public void send_abortJob(java.lang.String pId, java.lang.String jId) throws org.apache.thrift.TException
    {
      abortJob_args args = new abortJob_args();
      args.setPId(pId);
      args.setJId(jId);
      sendBase("abortJob", args);
    }

    public java.lang.String recv_abortJob() throws org.apache.thrift.TException
    {
      abortJob_result result = new abortJob_result();
      receiveBase(result, "abortJob");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "abortJob failed: unknown result");
    }

    public java.lang.String abortTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException
    {
      send_abortTask(pId, jId, tId);
      return recv_abortTask();
    }

    public void send_abortTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException
    {
      abortTask_args args = new abortTask_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setTId(tId);
      sendBase("abortTask", args);
    }

    public java.lang.String recv_abortTask() throws org.apache.thrift.TException
    {
      abortTask_result result = new abortTask_result();
      receiveBase(result, "abortTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "abortTask failed: unknown result");
    }

    public java.lang.String reRunTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException
    {
      send_reRunTask(pId, jId, tId);
      return recv_reRunTask();
    }

    public void send_reRunTask(java.lang.String pId, java.lang.String jId, java.lang.String tId) throws org.apache.thrift.TException
    {
      reRunTask_args args = new reRunTask_args();
      args.setPId(pId);
      args.setJId(jId);
      args.setTId(tId);
      sendBase("reRunTask", args);
    }

    public java.lang.String recv_reRunTask() throws org.apache.thrift.TException
    {
      reRunTask_result result = new reRunTask_result();
      receiveBase(result, "reRunTask");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "reRunTask failed: unknown result");
    }

    public java.lang.String getAllSharedResources(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_getAllSharedResources(pId);
      return recv_getAllSharedResources();
    }

    public void send_getAllSharedResources(java.lang.String pId) throws org.apache.thrift.TException
    {
      getAllSharedResources_args args = new getAllSharedResources_args();
      args.setPId(pId);
      sendBase("getAllSharedResources", args);
    }

    public java.lang.String recv_getAllSharedResources() throws org.apache.thrift.TException
    {
      getAllSharedResources_result result = new getAllSharedResources_result();
      receiveBase(result, "getAllSharedResources");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getAllSharedResources failed: unknown result");
    }

    public java.lang.String createSharedResource(java.lang.String pId, java.lang.String dataTypeId, java.nio.ByteBuffer data) throws org.apache.thrift.TException
    {
      send_createSharedResource(pId, dataTypeId, data);
      return recv_createSharedResource();
    }

    public void send_createSharedResource(java.lang.String pId, java.lang.String dataTypeId, java.nio.ByteBuffer data) throws org.apache.thrift.TException
    {
      createSharedResource_args args = new createSharedResource_args();
      args.setPId(pId);
      args.setDataTypeId(dataTypeId);
      args.setData(data);
      sendBase("createSharedResource", args);
    }

    public java.lang.String recv_createSharedResource() throws org.apache.thrift.TException
    {
      createSharedResource_result result = new createSharedResource_result();
      receiveBase(result, "createSharedResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createSharedResource failed: unknown result");
    }

    public java.lang.String getSharedResource(java.lang.String pId, java.lang.String rId) throws org.apache.thrift.TException
    {
      send_getSharedResource(pId, rId);
      return recv_getSharedResource();
    }

    public void send_getSharedResource(java.lang.String pId, java.lang.String rId) throws org.apache.thrift.TException
    {
      getSharedResource_args args = new getSharedResource_args();
      args.setPId(pId);
      args.setRId(rId);
      sendBase("getSharedResource", args);
    }

    public java.lang.String recv_getSharedResource() throws org.apache.thrift.TException
    {
      getSharedResource_result result = new getSharedResource_result();
      receiveBase(result, "getSharedResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getSharedResource failed: unknown result");
    }

    public java.lang.String deleteSharedResource(java.lang.String pId, java.lang.String rId) throws org.apache.thrift.TException
    {
      send_deleteSharedResource(pId, rId);
      return recv_deleteSharedResource();
    }

    public void send_deleteSharedResource(java.lang.String pId, java.lang.String rId) throws org.apache.thrift.TException
    {
      deleteSharedResource_args args = new deleteSharedResource_args();
      args.setPId(pId);
      args.setRId(rId);
      sendBase("deleteSharedResource", args);
    }

    public java.lang.String recv_deleteSharedResource() throws org.apache.thrift.TException
    {
      deleteSharedResource_result result = new deleteSharedResource_result();
      receiveBase(result, "deleteSharedResource");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteSharedResource failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getAllPrograms(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllPrograms_call method_call = new getAllPrograms_call(userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllPrograms_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String userId;
      public getAllPrograms_call(java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllPrograms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllPrograms_args args = new getAllPrograms_args();
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllPrograms();
      }
    }

    public void createProgram(java.lang.String clusterId, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createProgram_call method_call = new createProgram_call(clusterId, userId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String clusterId;
      private java.lang.String userId;
      public createProgram_call(java.lang.String clusterId, java.lang.String userId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.clusterId = clusterId;
        this.userId = userId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createProgram_args args = new createProgram_args();
        args.setClusterId(clusterId);
        args.setUserId(userId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createProgram();
      }
    }

    public void getProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getProgram_call method_call = new getProgram_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public getProgram_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getProgram_args args = new getProgram_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getProgram();
      }
    }

    public void deleteProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteProgram_call method_call = new deleteProgram_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public deleteProgram_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteProgram_args args = new deleteProgram_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteProgram();
      }
    }

    public void abortProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      abortProgram_call method_call = new abortProgram_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class abortProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public abortProgram_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("abortProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        abortProgram_args args = new abortProgram_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_abortProgram();
      }
    }

    public void updateProgramName(java.lang.String pId, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProgramName_call method_call = new updateProgramName_call(pId, name, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProgramName_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String name;
      public updateProgramName_call(java.lang.String pId, java.lang.String name, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.name = name;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProgramName", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProgramName_args args = new updateProgramName_args();
        args.setPId(pId);
        args.setName(name);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProgramName();
      }
    }

    public void updateProgramDescription(java.lang.String pId, java.lang.String description, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      updateProgramDescription_call method_call = new updateProgramDescription_call(pId, description, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class updateProgramDescription_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String description;
      public updateProgramDescription_call(java.lang.String pId, java.lang.String description, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.description = description;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("updateProgramDescription", org.apache.thrift.protocol.TMessageType.CALL, 0));
        updateProgramDescription_args args = new updateProgramDescription_args();
        args.setPId(pId);
        args.setDescription(description);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_updateProgramDescription();
      }
    }

    public void markProgramAsFinished(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markProgramAsFinished_call method_call = new markProgramAsFinished_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markProgramAsFinished_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public markProgramAsFinished_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markProgramAsFinished", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markProgramAsFinished_args args = new markProgramAsFinished_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markProgramAsFinished();
      }
    }

    public void getAllJobs(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllJobs_call method_call = new getAllJobs_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllJobs_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public getAllJobs_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllJobs", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllJobs_args args = new getAllJobs_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllJobs();
      }
    }

    public void createJob(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createJob_call method_call = new createJob_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createJob_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public createJob_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createJob_args args = new createJob_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createJob();
      }
    }

    public void getJob(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getJob_call method_call = new getJob_call(pId, jId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getJob_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      public getJob_call(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getJob_args args = new getJob_args();
        args.setPId(pId);
        args.setJId(jId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getJob();
      }
    }

    public void deleteJob(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteJob_call method_call = new deleteJob_call(pId, jId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteJob_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      public deleteJob_call(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteJob_args args = new deleteJob_args();
        args.setPId(pId);
        args.setJId(jId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteJob();
      }
    }

    public void getAttachedMapRoutine(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAttachedMapRoutine_call method_call = new getAttachedMapRoutine_call(pId, jId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAttachedMapRoutine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      public getAttachedMapRoutine_call(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAttachedMapRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAttachedMapRoutine_args args = new getAttachedMapRoutine_args();
        args.setPId(pId);
        args.setJId(jId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAttachedMapRoutine();
      }
    }

    public void attachMapRoutine(java.lang.String pId, java.lang.String jId, java.lang.String mapRoutineId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      attachMapRoutine_call method_call = new attachMapRoutine_call(pId, jId, mapRoutineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class attachMapRoutine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private java.lang.String mapRoutineId;
      public attachMapRoutine_call(java.lang.String pId, java.lang.String jId, java.lang.String mapRoutineId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.mapRoutineId = mapRoutineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("attachMapRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        attachMapRoutine_args args = new attachMapRoutine_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setMapRoutineId(mapRoutineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_attachMapRoutine();
      }
    }

    public void getAttachedReduceRoutine(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAttachedReduceRoutine_call method_call = new getAttachedReduceRoutine_call(pId, jId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAttachedReduceRoutine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      public getAttachedReduceRoutine_call(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAttachedReduceRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAttachedReduceRoutine_args args = new getAttachedReduceRoutine_args();
        args.setPId(pId);
        args.setJId(jId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAttachedReduceRoutine();
      }
    }

    public void attachReduceRoutine(java.lang.String pId, java.lang.String jId, java.lang.String reduceRoutineId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      attachReduceRoutine_call method_call = new attachReduceRoutine_call(pId, jId, reduceRoutineId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class attachReduceRoutine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private java.lang.String reduceRoutineId;
      public attachReduceRoutine_call(java.lang.String pId, java.lang.String jId, java.lang.String reduceRoutineId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.reduceRoutineId = reduceRoutineId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("attachReduceRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        attachReduceRoutine_args args = new attachReduceRoutine_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setReduceRoutineId(reduceRoutineId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_attachReduceRoutine();
      }
    }

    public void getAllTasks(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllTasks_call method_call = new getAllTasks_call(pId, jId, sortingCriterion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllTasks_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion;
      public getAllTasks_call(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.sortingCriterion = sortingCriterion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTasks", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllTasks_args args = new getAllTasks_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setSortingCriterion(sortingCriterion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllTasks();
      }
    }

    public void getAllTasksWithState(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.ExecutionState state, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllTasksWithState_call method_call = new getAllTasksWithState_call(pId, jId, state, sortingCriterion, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllTasksWithState_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private at.enfilo.def.transfer.dto.ExecutionState state;
      private at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion;
      public getAllTasksWithState_call(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.ExecutionState state, at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.state = state;
        this.sortingCriterion = sortingCriterion;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllTasksWithState", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllTasksWithState_args args = new getAllTasksWithState_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setState(state);
        args.setSortingCriterion(sortingCriterion);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllTasksWithState();
      }
    }

    public void createTask(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createTask_call method_call = new createTask_call(pId, jId, objectiveRoutine, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createTask_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine;
      public createTask_call(java.lang.String pId, java.lang.String jId, at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.objectiveRoutine = objectiveRoutine;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createTask_args args = new createTask_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setObjectiveRoutine(objectiveRoutine);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createTask();
      }
    }

    public void getTask(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTask_call method_call = new getTask_call(pId, jId, tId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTask_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private java.lang.String tId;
      public getTask_call(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.tId = tId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTask_args args = new getTask_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setTId(tId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTask();
      }
    }

    public void getTaskPartial(java.lang.String pId, java.lang.String jId, java.lang.String tId, boolean includeInParameters, boolean includeOutParameters, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getTaskPartial_call method_call = new getTaskPartial_call(pId, jId, tId, includeInParameters, includeOutParameters, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getTaskPartial_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private java.lang.String tId;
      private boolean includeInParameters;
      private boolean includeOutParameters;
      public getTaskPartial_call(java.lang.String pId, java.lang.String jId, java.lang.String tId, boolean includeInParameters, boolean includeOutParameters, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.tId = tId;
        this.includeInParameters = includeInParameters;
        this.includeOutParameters = includeOutParameters;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getTaskPartial", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getTaskPartial_args args = new getTaskPartial_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setTId(tId);
        args.setIncludeInParameters(includeInParameters);
        args.setIncludeOutParameters(includeOutParameters);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getTaskPartial();
      }
    }

    public void markJobAsComplete(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      markJobAsComplete_call method_call = new markJobAsComplete_call(pId, jId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class markJobAsComplete_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      public markJobAsComplete_call(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("markJobAsComplete", org.apache.thrift.protocol.TMessageType.CALL, 0));
        markJobAsComplete_args args = new markJobAsComplete_args();
        args.setPId(pId);
        args.setJId(jId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_markJobAsComplete();
      }
    }

    public void abortJob(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      abortJob_call method_call = new abortJob_call(pId, jId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class abortJob_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      public abortJob_call(java.lang.String pId, java.lang.String jId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("abortJob", org.apache.thrift.protocol.TMessageType.CALL, 0));
        abortJob_args args = new abortJob_args();
        args.setPId(pId);
        args.setJId(jId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_abortJob();
      }
    }

    public void abortTask(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      abortTask_call method_call = new abortTask_call(pId, jId, tId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class abortTask_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private java.lang.String tId;
      public abortTask_call(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.tId = tId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("abortTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        abortTask_args args = new abortTask_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setTId(tId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_abortTask();
      }
    }

    public void reRunTask(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      reRunTask_call method_call = new reRunTask_call(pId, jId, tId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class reRunTask_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String jId;
      private java.lang.String tId;
      public reRunTask_call(java.lang.String pId, java.lang.String jId, java.lang.String tId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.jId = jId;
        this.tId = tId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("reRunTask", org.apache.thrift.protocol.TMessageType.CALL, 0));
        reRunTask_args args = new reRunTask_args();
        args.setPId(pId);
        args.setJId(jId);
        args.setTId(tId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_reRunTask();
      }
    }

    public void getAllSharedResources(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getAllSharedResources_call method_call = new getAllSharedResources_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getAllSharedResources_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public getAllSharedResources_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getAllSharedResources", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getAllSharedResources_args args = new getAllSharedResources_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getAllSharedResources();
      }
    }

    public void createSharedResource(java.lang.String pId, java.lang.String dataTypeId, java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createSharedResource_call method_call = new createSharedResource_call(pId, dataTypeId, data, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createSharedResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String dataTypeId;
      private java.nio.ByteBuffer data;
      public createSharedResource_call(java.lang.String pId, java.lang.String dataTypeId, java.nio.ByteBuffer data, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.dataTypeId = dataTypeId;
        this.data = data;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createSharedResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createSharedResource_args args = new createSharedResource_args();
        args.setPId(pId);
        args.setDataTypeId(dataTypeId);
        args.setData(data);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createSharedResource();
      }
    }

    public void getSharedResource(java.lang.String pId, java.lang.String rId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getSharedResource_call method_call = new getSharedResource_call(pId, rId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getSharedResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String rId;
      public getSharedResource_call(java.lang.String pId, java.lang.String rId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.rId = rId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getSharedResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getSharedResource_args args = new getSharedResource_args();
        args.setPId(pId);
        args.setRId(rId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getSharedResource();
      }
    }

    public void deleteSharedResource(java.lang.String pId, java.lang.String rId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteSharedResource_call method_call = new deleteSharedResource_call(pId, rId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteSharedResource_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      private java.lang.String rId;
      public deleteSharedResource_call(java.lang.String pId, java.lang.String rId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
        this.rId = rId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteSharedResource", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteSharedResource_args args = new deleteSharedResource_args();
        args.setPId(pId);
        args.setRId(rId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteSharedResource();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getAllPrograms", new getAllPrograms());
      processMap.put("createProgram", new createProgram());
      processMap.put("getProgram", new getProgram());
      processMap.put("deleteProgram", new deleteProgram());
      processMap.put("abortProgram", new abortProgram());
      processMap.put("updateProgramName", new updateProgramName());
      processMap.put("updateProgramDescription", new updateProgramDescription());
      processMap.put("markProgramAsFinished", new markProgramAsFinished());
      processMap.put("getAllJobs", new getAllJobs());
      processMap.put("createJob", new createJob());
      processMap.put("getJob", new getJob());
      processMap.put("deleteJob", new deleteJob());
      processMap.put("getAttachedMapRoutine", new getAttachedMapRoutine());
      processMap.put("attachMapRoutine", new attachMapRoutine());
      processMap.put("getAttachedReduceRoutine", new getAttachedReduceRoutine());
      processMap.put("attachReduceRoutine", new attachReduceRoutine());
      processMap.put("getAllTasks", new getAllTasks());
      processMap.put("getAllTasksWithState", new getAllTasksWithState());
      processMap.put("createTask", new createTask());
      processMap.put("getTask", new getTask());
      processMap.put("getTaskPartial", new getTaskPartial());
      processMap.put("markJobAsComplete", new markJobAsComplete());
      processMap.put("abortJob", new abortJob());
      processMap.put("abortTask", new abortTask());
      processMap.put("reRunTask", new reRunTask());
      processMap.put("getAllSharedResources", new getAllSharedResources());
      processMap.put("createSharedResource", new createSharedResource());
      processMap.put("getSharedResource", new getSharedResource());
      processMap.put("deleteSharedResource", new deleteSharedResource());
      return processMap;
    }

    public static class getAllPrograms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllPrograms_args> {
      public getAllPrograms() {
        super("getAllPrograms");
      }

      public getAllPrograms_args getEmptyArgsInstance() {
        return new getAllPrograms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAllPrograms_result getResult(I iface, getAllPrograms_args args) throws org.apache.thrift.TException {
        getAllPrograms_result result = new getAllPrograms_result();
        result.success = iface.getAllPrograms(args.userId);
        return result;
      }
    }

    public static class createProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createProgram_args> {
      public createProgram() {
        super("createProgram");
      }

      public createProgram_args getEmptyArgsInstance() {
        return new createProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createProgram_result getResult(I iface, createProgram_args args) throws org.apache.thrift.TException {
        createProgram_result result = new createProgram_result();
        result.success = iface.createProgram(args.clusterId, args.userId);
        return result;
      }
    }

    public static class getProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getProgram_args> {
      public getProgram() {
        super("getProgram");
      }

      public getProgram_args getEmptyArgsInstance() {
        return new getProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getProgram_result getResult(I iface, getProgram_args args) throws org.apache.thrift.TException {
        getProgram_result result = new getProgram_result();
        result.success = iface.getProgram(args.pId);
        return result;
      }
    }

    public static class deleteProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteProgram_args> {
      public deleteProgram() {
        super("deleteProgram");
      }

      public deleteProgram_args getEmptyArgsInstance() {
        return new deleteProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteProgram_result getResult(I iface, deleteProgram_args args) throws org.apache.thrift.TException {
        deleteProgram_result result = new deleteProgram_result();
        result.success = iface.deleteProgram(args.pId);
        return result;
      }
    }

    public static class abortProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, abortProgram_args> {
      public abortProgram() {
        super("abortProgram");
      }

      public abortProgram_args getEmptyArgsInstance() {
        return new abortProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public abortProgram_result getResult(I iface, abortProgram_args args) throws org.apache.thrift.TException {
        abortProgram_result result = new abortProgram_result();
        result.success = iface.abortProgram(args.pId);
        return result;
      }
    }

    public static class updateProgramName<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProgramName_args> {
      public updateProgramName() {
        super("updateProgramName");
      }

      public updateProgramName_args getEmptyArgsInstance() {
        return new updateProgramName_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateProgramName_result getResult(I iface, updateProgramName_args args) throws org.apache.thrift.TException {
        updateProgramName_result result = new updateProgramName_result();
        result.success = iface.updateProgramName(args.pId, args.name);
        return result;
      }
    }

    public static class updateProgramDescription<I extends Iface> extends org.apache.thrift.ProcessFunction<I, updateProgramDescription_args> {
      public updateProgramDescription() {
        super("updateProgramDescription");
      }

      public updateProgramDescription_args getEmptyArgsInstance() {
        return new updateProgramDescription_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public updateProgramDescription_result getResult(I iface, updateProgramDescription_args args) throws org.apache.thrift.TException {
        updateProgramDescription_result result = new updateProgramDescription_result();
        result.success = iface.updateProgramDescription(args.pId, args.description);
        return result;
      }
    }

    public static class markProgramAsFinished<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markProgramAsFinished_args> {
      public markProgramAsFinished() {
        super("markProgramAsFinished");
      }

      public markProgramAsFinished_args getEmptyArgsInstance() {
        return new markProgramAsFinished_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public markProgramAsFinished_result getResult(I iface, markProgramAsFinished_args args) throws org.apache.thrift.TException {
        markProgramAsFinished_result result = new markProgramAsFinished_result();
        result.success = iface.markProgramAsFinished(args.pId);
        return result;
      }
    }

    public static class getAllJobs<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllJobs_args> {
      public getAllJobs() {
        super("getAllJobs");
      }

      public getAllJobs_args getEmptyArgsInstance() {
        return new getAllJobs_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAllJobs_result getResult(I iface, getAllJobs_args args) throws org.apache.thrift.TException {
        getAllJobs_result result = new getAllJobs_result();
        result.success = iface.getAllJobs(args.pId);
        return result;
      }
    }

    public static class createJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createJob_args> {
      public createJob() {
        super("createJob");
      }

      public createJob_args getEmptyArgsInstance() {
        return new createJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createJob_result getResult(I iface, createJob_args args) throws org.apache.thrift.TException {
        createJob_result result = new createJob_result();
        result.success = iface.createJob(args.pId);
        return result;
      }
    }

    public static class getJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getJob_args> {
      public getJob() {
        super("getJob");
      }

      public getJob_args getEmptyArgsInstance() {
        return new getJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getJob_result getResult(I iface, getJob_args args) throws org.apache.thrift.TException {
        getJob_result result = new getJob_result();
        result.success = iface.getJob(args.pId, args.jId);
        return result;
      }
    }

    public static class deleteJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteJob_args> {
      public deleteJob() {
        super("deleteJob");
      }

      public deleteJob_args getEmptyArgsInstance() {
        return new deleteJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteJob_result getResult(I iface, deleteJob_args args) throws org.apache.thrift.TException {
        deleteJob_result result = new deleteJob_result();
        result.success = iface.deleteJob(args.pId, args.jId);
        return result;
      }
    }

    public static class getAttachedMapRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAttachedMapRoutine_args> {
      public getAttachedMapRoutine() {
        super("getAttachedMapRoutine");
      }

      public getAttachedMapRoutine_args getEmptyArgsInstance() {
        return new getAttachedMapRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAttachedMapRoutine_result getResult(I iface, getAttachedMapRoutine_args args) throws org.apache.thrift.TException {
        getAttachedMapRoutine_result result = new getAttachedMapRoutine_result();
        result.success = iface.getAttachedMapRoutine(args.pId, args.jId);
        return result;
      }
    }

    public static class attachMapRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, attachMapRoutine_args> {
      public attachMapRoutine() {
        super("attachMapRoutine");
      }

      public attachMapRoutine_args getEmptyArgsInstance() {
        return new attachMapRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public attachMapRoutine_result getResult(I iface, attachMapRoutine_args args) throws org.apache.thrift.TException {
        attachMapRoutine_result result = new attachMapRoutine_result();
        result.success = iface.attachMapRoutine(args.pId, args.jId, args.mapRoutineId);
        return result;
      }
    }

    public static class getAttachedReduceRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAttachedReduceRoutine_args> {
      public getAttachedReduceRoutine() {
        super("getAttachedReduceRoutine");
      }

      public getAttachedReduceRoutine_args getEmptyArgsInstance() {
        return new getAttachedReduceRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAttachedReduceRoutine_result getResult(I iface, getAttachedReduceRoutine_args args) throws org.apache.thrift.TException {
        getAttachedReduceRoutine_result result = new getAttachedReduceRoutine_result();
        result.success = iface.getAttachedReduceRoutine(args.pId, args.jId);
        return result;
      }
    }

    public static class attachReduceRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, attachReduceRoutine_args> {
      public attachReduceRoutine() {
        super("attachReduceRoutine");
      }

      public attachReduceRoutine_args getEmptyArgsInstance() {
        return new attachReduceRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public attachReduceRoutine_result getResult(I iface, attachReduceRoutine_args args) throws org.apache.thrift.TException {
        attachReduceRoutine_result result = new attachReduceRoutine_result();
        result.success = iface.attachReduceRoutine(args.pId, args.jId, args.reduceRoutineId);
        return result;
      }
    }

    public static class getAllTasks<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllTasks_args> {
      public getAllTasks() {
        super("getAllTasks");
      }

      public getAllTasks_args getEmptyArgsInstance() {
        return new getAllTasks_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAllTasks_result getResult(I iface, getAllTasks_args args) throws org.apache.thrift.TException {
        getAllTasks_result result = new getAllTasks_result();
        result.success = iface.getAllTasks(args.pId, args.jId, args.sortingCriterion);
        return result;
      }
    }

    public static class getAllTasksWithState<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllTasksWithState_args> {
      public getAllTasksWithState() {
        super("getAllTasksWithState");
      }

      public getAllTasksWithState_args getEmptyArgsInstance() {
        return new getAllTasksWithState_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAllTasksWithState_result getResult(I iface, getAllTasksWithState_args args) throws org.apache.thrift.TException {
        getAllTasksWithState_result result = new getAllTasksWithState_result();
        result.success = iface.getAllTasksWithState(args.pId, args.jId, args.state, args.sortingCriterion);
        return result;
      }
    }

    public static class createTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createTask_args> {
      public createTask() {
        super("createTask");
      }

      public createTask_args getEmptyArgsInstance() {
        return new createTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createTask_result getResult(I iface, createTask_args args) throws org.apache.thrift.TException {
        createTask_result result = new createTask_result();
        result.success = iface.createTask(args.pId, args.jId, args.objectiveRoutine);
        return result;
      }
    }

    public static class getTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTask_args> {
      public getTask() {
        super("getTask");
      }

      public getTask_args getEmptyArgsInstance() {
        return new getTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getTask_result getResult(I iface, getTask_args args) throws org.apache.thrift.TException {
        getTask_result result = new getTask_result();
        result.success = iface.getTask(args.pId, args.jId, args.tId);
        return result;
      }
    }

    public static class getTaskPartial<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getTaskPartial_args> {
      public getTaskPartial() {
        super("getTaskPartial");
      }

      public getTaskPartial_args getEmptyArgsInstance() {
        return new getTaskPartial_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getTaskPartial_result getResult(I iface, getTaskPartial_args args) throws org.apache.thrift.TException {
        getTaskPartial_result result = new getTaskPartial_result();
        result.success = iface.getTaskPartial(args.pId, args.jId, args.tId, args.includeInParameters, args.includeOutParameters);
        return result;
      }
    }

    public static class markJobAsComplete<I extends Iface> extends org.apache.thrift.ProcessFunction<I, markJobAsComplete_args> {
      public markJobAsComplete() {
        super("markJobAsComplete");
      }

      public markJobAsComplete_args getEmptyArgsInstance() {
        return new markJobAsComplete_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public markJobAsComplete_result getResult(I iface, markJobAsComplete_args args) throws org.apache.thrift.TException {
        markJobAsComplete_result result = new markJobAsComplete_result();
        result.success = iface.markJobAsComplete(args.pId, args.jId);
        return result;
      }
    }

    public static class abortJob<I extends Iface> extends org.apache.thrift.ProcessFunction<I, abortJob_args> {
      public abortJob() {
        super("abortJob");
      }

      public abortJob_args getEmptyArgsInstance() {
        return new abortJob_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public abortJob_result getResult(I iface, abortJob_args args) throws org.apache.thrift.TException {
        abortJob_result result = new abortJob_result();
        result.success = iface.abortJob(args.pId, args.jId);
        return result;
      }
    }

    public static class abortTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, abortTask_args> {
      public abortTask() {
        super("abortTask");
      }

      public abortTask_args getEmptyArgsInstance() {
        return new abortTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public abortTask_result getResult(I iface, abortTask_args args) throws org.apache.thrift.TException {
        abortTask_result result = new abortTask_result();
        result.success = iface.abortTask(args.pId, args.jId, args.tId);
        return result;
      }
    }

    public static class reRunTask<I extends Iface> extends org.apache.thrift.ProcessFunction<I, reRunTask_args> {
      public reRunTask() {
        super("reRunTask");
      }

      public reRunTask_args getEmptyArgsInstance() {
        return new reRunTask_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public reRunTask_result getResult(I iface, reRunTask_args args) throws org.apache.thrift.TException {
        reRunTask_result result = new reRunTask_result();
        result.success = iface.reRunTask(args.pId, args.jId, args.tId);
        return result;
      }
    }

    public static class getAllSharedResources<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getAllSharedResources_args> {
      public getAllSharedResources() {
        super("getAllSharedResources");
      }

      public getAllSharedResources_args getEmptyArgsInstance() {
        return new getAllSharedResources_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getAllSharedResources_result getResult(I iface, getAllSharedResources_args args) throws org.apache.thrift.TException {
        getAllSharedResources_result result = new getAllSharedResources_result();
        result.success = iface.getAllSharedResources(args.pId);
        return result;
      }
    }

    public static class createSharedResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createSharedResource_args> {
      public createSharedResource() {
        super("createSharedResource");
      }

      public createSharedResource_args getEmptyArgsInstance() {
        return new createSharedResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createSharedResource_result getResult(I iface, createSharedResource_args args) throws org.apache.thrift.TException {
        createSharedResource_result result = new createSharedResource_result();
        result.success = iface.createSharedResource(args.pId, args.dataTypeId, args.data);
        return result;
      }
    }

    public static class getSharedResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getSharedResource_args> {
      public getSharedResource() {
        super("getSharedResource");
      }

      public getSharedResource_args getEmptyArgsInstance() {
        return new getSharedResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getSharedResource_result getResult(I iface, getSharedResource_args args) throws org.apache.thrift.TException {
        getSharedResource_result result = new getSharedResource_result();
        result.success = iface.getSharedResource(args.pId, args.rId);
        return result;
      }
    }

    public static class deleteSharedResource<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteSharedResource_args> {
      public deleteSharedResource() {
        super("deleteSharedResource");
      }

      public deleteSharedResource_args getEmptyArgsInstance() {
        return new deleteSharedResource_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteSharedResource_result getResult(I iface, deleteSharedResource_args args) throws org.apache.thrift.TException {
        deleteSharedResource_result result = new deleteSharedResource_result();
        result.success = iface.deleteSharedResource(args.pId, args.rId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getAllPrograms", new getAllPrograms());
      processMap.put("createProgram", new createProgram());
      processMap.put("getProgram", new getProgram());
      processMap.put("deleteProgram", new deleteProgram());
      processMap.put("abortProgram", new abortProgram());
      processMap.put("updateProgramName", new updateProgramName());
      processMap.put("updateProgramDescription", new updateProgramDescription());
      processMap.put("markProgramAsFinished", new markProgramAsFinished());
      processMap.put("getAllJobs", new getAllJobs());
      processMap.put("createJob", new createJob());
      processMap.put("getJob", new getJob());
      processMap.put("deleteJob", new deleteJob());
      processMap.put("getAttachedMapRoutine", new getAttachedMapRoutine());
      processMap.put("attachMapRoutine", new attachMapRoutine());
      processMap.put("getAttachedReduceRoutine", new getAttachedReduceRoutine());
      processMap.put("attachReduceRoutine", new attachReduceRoutine());
      processMap.put("getAllTasks", new getAllTasks());
      processMap.put("getAllTasksWithState", new getAllTasksWithState());
      processMap.put("createTask", new createTask());
      processMap.put("getTask", new getTask());
      processMap.put("getTaskPartial", new getTaskPartial());
      processMap.put("markJobAsComplete", new markJobAsComplete());
      processMap.put("abortJob", new abortJob());
      processMap.put("abortTask", new abortTask());
      processMap.put("reRunTask", new reRunTask());
      processMap.put("getAllSharedResources", new getAllSharedResources());
      processMap.put("createSharedResource", new createSharedResource());
      processMap.put("getSharedResource", new getSharedResource());
      processMap.put("deleteSharedResource", new deleteSharedResource());
      return processMap;
    }

    public static class getAllPrograms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllPrograms_args, java.lang.String> {
      public getAllPrograms() {
        super("getAllPrograms");
      }

      public getAllPrograms_args getEmptyArgsInstance() {
        return new getAllPrograms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAllPrograms_result result = new getAllPrograms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllPrograms_result result = new getAllPrograms_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllPrograms_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAllPrograms(args.userId,resultHandler);
      }
    }

    public static class createProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createProgram_args, java.lang.String> {
      public createProgram() {
        super("createProgram");
      }

      public createProgram_args getEmptyArgsInstance() {
        return new createProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createProgram_result result = new createProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createProgram_result result = new createProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createProgram(args.clusterId, args.userId,resultHandler);
      }
    }

    public static class getProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getProgram_args, java.lang.String> {
      public getProgram() {
        super("getProgram");
      }

      public getProgram_args getEmptyArgsInstance() {
        return new getProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getProgram_result result = new getProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getProgram_result result = new getProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getProgram(args.pId,resultHandler);
      }
    }

    public static class deleteProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteProgram_args, java.lang.String> {
      public deleteProgram() {
        super("deleteProgram");
      }

      public deleteProgram_args getEmptyArgsInstance() {
        return new deleteProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            deleteProgram_result result = new deleteProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteProgram_result result = new deleteProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.deleteProgram(args.pId,resultHandler);
      }
    }

    public static class abortProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, abortProgram_args, java.lang.String> {
      public abortProgram() {
        super("abortProgram");
      }

      public abortProgram_args getEmptyArgsInstance() {
        return new abortProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            abortProgram_result result = new abortProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            abortProgram_result result = new abortProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, abortProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.abortProgram(args.pId,resultHandler);
      }
    }

    public static class updateProgramName<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProgramName_args, java.lang.String> {
      public updateProgramName() {
        super("updateProgramName");
      }

      public updateProgramName_args getEmptyArgsInstance() {
        return new updateProgramName_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            updateProgramName_result result = new updateProgramName_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateProgramName_result result = new updateProgramName_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProgramName_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.updateProgramName(args.pId, args.name,resultHandler);
      }
    }

    public static class updateProgramDescription<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, updateProgramDescription_args, java.lang.String> {
      public updateProgramDescription() {
        super("updateProgramDescription");
      }

      public updateProgramDescription_args getEmptyArgsInstance() {
        return new updateProgramDescription_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            updateProgramDescription_result result = new updateProgramDescription_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            updateProgramDescription_result result = new updateProgramDescription_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, updateProgramDescription_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.updateProgramDescription(args.pId, args.description,resultHandler);
      }
    }

    public static class markProgramAsFinished<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markProgramAsFinished_args, java.lang.String> {
      public markProgramAsFinished() {
        super("markProgramAsFinished");
      }

      public markProgramAsFinished_args getEmptyArgsInstance() {
        return new markProgramAsFinished_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            markProgramAsFinished_result result = new markProgramAsFinished_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            markProgramAsFinished_result result = new markProgramAsFinished_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markProgramAsFinished_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.markProgramAsFinished(args.pId,resultHandler);
      }
    }

    public static class getAllJobs<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllJobs_args, java.lang.String> {
      public getAllJobs() {
        super("getAllJobs");
      }

      public getAllJobs_args getEmptyArgsInstance() {
        return new getAllJobs_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAllJobs_result result = new getAllJobs_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllJobs_result result = new getAllJobs_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllJobs_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAllJobs(args.pId,resultHandler);
      }
    }

    public static class createJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createJob_args, java.lang.String> {
      public createJob() {
        super("createJob");
      }

      public createJob_args getEmptyArgsInstance() {
        return new createJob_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createJob_result result = new createJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createJob_result result = new createJob_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createJob_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createJob(args.pId,resultHandler);
      }
    }

    public static class getJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getJob_args, java.lang.String> {
      public getJob() {
        super("getJob");
      }

      public getJob_args getEmptyArgsInstance() {
        return new getJob_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getJob_result result = new getJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getJob_result result = new getJob_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getJob_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getJob(args.pId, args.jId,resultHandler);
      }
    }

    public static class deleteJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteJob_args, java.lang.String> {
      public deleteJob() {
        super("deleteJob");
      }

      public deleteJob_args getEmptyArgsInstance() {
        return new deleteJob_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            deleteJob_result result = new deleteJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteJob_result result = new deleteJob_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteJob_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.deleteJob(args.pId, args.jId,resultHandler);
      }
    }

    public static class getAttachedMapRoutine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAttachedMapRoutine_args, java.lang.String> {
      public getAttachedMapRoutine() {
        super("getAttachedMapRoutine");
      }

      public getAttachedMapRoutine_args getEmptyArgsInstance() {
        return new getAttachedMapRoutine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAttachedMapRoutine_result result = new getAttachedMapRoutine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAttachedMapRoutine_result result = new getAttachedMapRoutine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAttachedMapRoutine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAttachedMapRoutine(args.pId, args.jId,resultHandler);
      }
    }

    public static class attachMapRoutine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, attachMapRoutine_args, java.lang.String> {
      public attachMapRoutine() {
        super("attachMapRoutine");
      }

      public attachMapRoutine_args getEmptyArgsInstance() {
        return new attachMapRoutine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            attachMapRoutine_result result = new attachMapRoutine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            attachMapRoutine_result result = new attachMapRoutine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, attachMapRoutine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.attachMapRoutine(args.pId, args.jId, args.mapRoutineId,resultHandler);
      }
    }

    public static class getAttachedReduceRoutine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAttachedReduceRoutine_args, java.lang.String> {
      public getAttachedReduceRoutine() {
        super("getAttachedReduceRoutine");
      }

      public getAttachedReduceRoutine_args getEmptyArgsInstance() {
        return new getAttachedReduceRoutine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAttachedReduceRoutine_result result = new getAttachedReduceRoutine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAttachedReduceRoutine_result result = new getAttachedReduceRoutine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAttachedReduceRoutine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAttachedReduceRoutine(args.pId, args.jId,resultHandler);
      }
    }

    public static class attachReduceRoutine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, attachReduceRoutine_args, java.lang.String> {
      public attachReduceRoutine() {
        super("attachReduceRoutine");
      }

      public attachReduceRoutine_args getEmptyArgsInstance() {
        return new attachReduceRoutine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            attachReduceRoutine_result result = new attachReduceRoutine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            attachReduceRoutine_result result = new attachReduceRoutine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, attachReduceRoutine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.attachReduceRoutine(args.pId, args.jId, args.reduceRoutineId,resultHandler);
      }
    }

    public static class getAllTasks<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllTasks_args, java.lang.String> {
      public getAllTasks() {
        super("getAllTasks");
      }

      public getAllTasks_args getEmptyArgsInstance() {
        return new getAllTasks_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAllTasks_result result = new getAllTasks_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllTasks_result result = new getAllTasks_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllTasks_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAllTasks(args.pId, args.jId, args.sortingCriterion,resultHandler);
      }
    }

    public static class getAllTasksWithState<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllTasksWithState_args, java.lang.String> {
      public getAllTasksWithState() {
        super("getAllTasksWithState");
      }

      public getAllTasksWithState_args getEmptyArgsInstance() {
        return new getAllTasksWithState_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAllTasksWithState_result result = new getAllTasksWithState_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllTasksWithState_result result = new getAllTasksWithState_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllTasksWithState_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAllTasksWithState(args.pId, args.jId, args.state, args.sortingCriterion,resultHandler);
      }
    }

    public static class createTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createTask_args, java.lang.String> {
      public createTask() {
        super("createTask");
      }

      public createTask_args getEmptyArgsInstance() {
        return new createTask_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createTask_result result = new createTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createTask_result result = new createTask_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createTask_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createTask(args.pId, args.jId, args.objectiveRoutine,resultHandler);
      }
    }

    public static class getTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTask_args, java.lang.String> {
      public getTask() {
        super("getTask");
      }

      public getTask_args getEmptyArgsInstance() {
        return new getTask_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getTask_result result = new getTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTask_result result = new getTask_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTask_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getTask(args.pId, args.jId, args.tId,resultHandler);
      }
    }

    public static class getTaskPartial<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getTaskPartial_args, java.lang.String> {
      public getTaskPartial() {
        super("getTaskPartial");
      }

      public getTaskPartial_args getEmptyArgsInstance() {
        return new getTaskPartial_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getTaskPartial_result result = new getTaskPartial_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getTaskPartial_result result = new getTaskPartial_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getTaskPartial_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getTaskPartial(args.pId, args.jId, args.tId, args.includeInParameters, args.includeOutParameters,resultHandler);
      }
    }

    public static class markJobAsComplete<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, markJobAsComplete_args, java.lang.String> {
      public markJobAsComplete() {
        super("markJobAsComplete");
      }

      public markJobAsComplete_args getEmptyArgsInstance() {
        return new markJobAsComplete_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            markJobAsComplete_result result = new markJobAsComplete_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            markJobAsComplete_result result = new markJobAsComplete_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, markJobAsComplete_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.markJobAsComplete(args.pId, args.jId,resultHandler);
      }
    }

    public static class abortJob<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, abortJob_args, java.lang.String> {
      public abortJob() {
        super("abortJob");
      }

      public abortJob_args getEmptyArgsInstance() {
        return new abortJob_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            abortJob_result result = new abortJob_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            abortJob_result result = new abortJob_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, abortJob_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.abortJob(args.pId, args.jId,resultHandler);
      }
    }

    public static class abortTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, abortTask_args, java.lang.String> {
      public abortTask() {
        super("abortTask");
      }

      public abortTask_args getEmptyArgsInstance() {
        return new abortTask_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            abortTask_result result = new abortTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            abortTask_result result = new abortTask_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, abortTask_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.abortTask(args.pId, args.jId, args.tId,resultHandler);
      }
    }

    public static class reRunTask<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, reRunTask_args, java.lang.String> {
      public reRunTask() {
        super("reRunTask");
      }

      public reRunTask_args getEmptyArgsInstance() {
        return new reRunTask_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            reRunTask_result result = new reRunTask_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            reRunTask_result result = new reRunTask_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, reRunTask_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.reRunTask(args.pId, args.jId, args.tId,resultHandler);
      }
    }

    public static class getAllSharedResources<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getAllSharedResources_args, java.lang.String> {
      public getAllSharedResources() {
        super("getAllSharedResources");
      }

      public getAllSharedResources_args getEmptyArgsInstance() {
        return new getAllSharedResources_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getAllSharedResources_result result = new getAllSharedResources_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getAllSharedResources_result result = new getAllSharedResources_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getAllSharedResources_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getAllSharedResources(args.pId,resultHandler);
      }
    }

    public static class createSharedResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createSharedResource_args, java.lang.String> {
      public createSharedResource() {
        super("createSharedResource");
      }

      public createSharedResource_args getEmptyArgsInstance() {
        return new createSharedResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createSharedResource_result result = new createSharedResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createSharedResource_result result = new createSharedResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createSharedResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createSharedResource(args.pId, args.dataTypeId, args.data,resultHandler);
      }
    }

    public static class getSharedResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getSharedResource_args, java.lang.String> {
      public getSharedResource() {
        super("getSharedResource");
      }

      public getSharedResource_args getEmptyArgsInstance() {
        return new getSharedResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getSharedResource_result result = new getSharedResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getSharedResource_result result = new getSharedResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getSharedResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getSharedResource(args.pId, args.rId,resultHandler);
      }
    }

    public static class deleteSharedResource<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteSharedResource_args, java.lang.String> {
      public deleteSharedResource() {
        super("deleteSharedResource");
      }

      public deleteSharedResource_args getEmptyArgsInstance() {
        return new deleteSharedResource_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            deleteSharedResource_result result = new deleteSharedResource_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteSharedResource_result result = new deleteSharedResource_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteSharedResource_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.deleteSharedResource(args.pId, args.rId,resultHandler);
      }
    }

  }

  public static class getAllPrograms_args implements org.apache.thrift.TBase<getAllPrograms_args, getAllPrograms_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllPrograms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPrograms_args");

    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllPrograms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllPrograms_argsTupleSchemeFactory();

    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      USER_ID((short)1, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPrograms_args.class, metaDataMap);
    }

    public getAllPrograms_args() {
    }

    public getAllPrograms_args(
      java.lang.String userId)
    {
      this();
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPrograms_args(getAllPrograms_args other) {
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public getAllPrograms_args deepCopy() {
      return new getAllPrograms_args(this);
    }

    @Override
    public void clear() {
      this.userId = null;
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public getAllPrograms_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPrograms_args)
        return this.equals((getAllPrograms_args)that);
      return false;
    }

    public boolean equals(getAllPrograms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllPrograms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllPrograms_args(");
      boolean first = true;

      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPrograms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllPrograms_argsStandardScheme getScheme() {
        return new getAllPrograms_argsStandardScheme();
      }
    }

    private static class getAllPrograms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllPrograms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPrograms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPrograms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllPrograms_argsTupleScheme getScheme() {
        return new getAllPrograms_argsTupleScheme();
      }
    }

    private static class getAllPrograms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllPrograms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetUserId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllPrograms_result implements org.apache.thrift.TBase<getAllPrograms_result, getAllPrograms_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllPrograms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllPrograms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllPrograms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllPrograms_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllPrograms_result.class, metaDataMap);
    }

    public getAllPrograms_result() {
    }

    public getAllPrograms_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllPrograms_result(getAllPrograms_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAllPrograms_result deepCopy() {
      return new getAllPrograms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAllPrograms_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllPrograms_result)
        return this.equals((getAllPrograms_result)that);
      return false;
    }

    public boolean equals(getAllPrograms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllPrograms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllPrograms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllPrograms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllPrograms_resultStandardScheme getScheme() {
        return new getAllPrograms_resultStandardScheme();
      }
    }

    private static class getAllPrograms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllPrograms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllPrograms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllPrograms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllPrograms_resultTupleScheme getScheme() {
        return new getAllPrograms_resultTupleScheme();
      }
    }

    private static class getAllPrograms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllPrograms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createProgram_args implements org.apache.thrift.TBase<createProgram_args, createProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<createProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProgram_args");

    private static final org.apache.thrift.protocol.TField CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField USER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("userId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createProgram_argsTupleSchemeFactory();

    public java.lang.String clusterId; // required
    public java.lang.String userId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLUSTER_ID((short)1, "clusterId"),
      USER_ID((short)2, "userId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLUSTER_ID
            return CLUSTER_ID;
          case 2: // USER_ID
            return USER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.USER_ID, new org.apache.thrift.meta_data.FieldMetaData("userId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProgram_args.class, metaDataMap);
    }

    public createProgram_args() {
    }

    public createProgram_args(
      java.lang.String clusterId,
      java.lang.String userId)
    {
      this();
      this.clusterId = clusterId;
      this.userId = userId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createProgram_args(createProgram_args other) {
      if (other.isSetClusterId()) {
        this.clusterId = other.clusterId;
      }
      if (other.isSetUserId()) {
        this.userId = other.userId;
      }
    }

    public createProgram_args deepCopy() {
      return new createProgram_args(this);
    }

    @Override
    public void clear() {
      this.clusterId = null;
      this.userId = null;
    }

    public java.lang.String getClusterId() {
      return this.clusterId;
    }

    public createProgram_args setClusterId(java.lang.String clusterId) {
      this.clusterId = clusterId;
      return this;
    }

    public void unsetClusterId() {
      this.clusterId = null;
    }

    /** Returns true if field clusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetClusterId() {
      return this.clusterId != null;
    }

    public void setClusterIdIsSet(boolean value) {
      if (!value) {
        this.clusterId = null;
      }
    }

    public java.lang.String getUserId() {
      return this.userId;
    }

    public createProgram_args setUserId(java.lang.String userId) {
      this.userId = userId;
      return this;
    }

    public void unsetUserId() {
      this.userId = null;
    }

    /** Returns true if field userId is set (has been assigned a value) and false otherwise */
    public boolean isSetUserId() {
      return this.userId != null;
    }

    public void setUserIdIsSet(boolean value) {
      if (!value) {
        this.userId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLUSTER_ID:
        if (value == null) {
          unsetClusterId();
        } else {
          setClusterId((java.lang.String)value);
        }
        break;

      case USER_ID:
        if (value == null) {
          unsetUserId();
        } else {
          setUserId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLUSTER_ID:
        return getClusterId();

      case USER_ID:
        return getUserId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLUSTER_ID:
        return isSetClusterId();
      case USER_ID:
        return isSetUserId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createProgram_args)
        return this.equals((createProgram_args)that);
      return false;
    }

    public boolean equals(createProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_clusterId = true && this.isSetClusterId();
      boolean that_present_clusterId = true && that.isSetClusterId();
      if (this_present_clusterId || that_present_clusterId) {
        if (!(this_present_clusterId && that_present_clusterId))
          return false;
        if (!this.clusterId.equals(that.clusterId))
          return false;
      }

      boolean this_present_userId = true && this.isSetUserId();
      boolean that_present_userId = true && that.isSetUserId();
      if (this_present_userId || that_present_userId) {
        if (!(this_present_userId && that_present_userId))
          return false;
        if (!this.userId.equals(that.userId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetClusterId()) ? 131071 : 524287);
      if (isSetClusterId())
        hashCode = hashCode * 8191 + clusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetUserId()) ? 131071 : 524287);
      if (isSetUserId())
        hashCode = hashCode * 8191 + userId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetClusterId()).compareTo(other.isSetClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterId, other.clusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetUserId()).compareTo(other.isSetUserId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetUserId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.userId, other.userId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createProgram_args(");
      boolean first = true;

      sb.append("clusterId:");
      if (this.clusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.clusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("userId:");
      if (this.userId == null) {
        sb.append("null");
      } else {
        sb.append(this.userId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createProgram_argsStandardScheme getScheme() {
        return new createProgram_argsStandardScheme();
      }
    }

    private static class createProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.clusterId = iprot.readString();
                struct.setClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // USER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.userId = iprot.readString();
                struct.setUserIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.clusterId != null) {
          oprot.writeFieldBegin(CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.clusterId);
          oprot.writeFieldEnd();
        }
        if (struct.userId != null) {
          oprot.writeFieldBegin(USER_ID_FIELD_DESC);
          oprot.writeString(struct.userId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createProgram_argsTupleScheme getScheme() {
        return new createProgram_argsTupleScheme();
      }
    }

    private static class createProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetUserId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetClusterId()) {
          oprot.writeString(struct.clusterId);
        }
        if (struct.isSetUserId()) {
          oprot.writeString(struct.userId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.clusterId = iprot.readString();
          struct.setClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.userId = iprot.readString();
          struct.setUserIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createProgram_result implements org.apache.thrift.TBase<createProgram_result, createProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<createProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createProgram_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createProgram_result.class, metaDataMap);
    }

    public createProgram_result() {
    }

    public createProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createProgram_result(createProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createProgram_result deepCopy() {
      return new createProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createProgram_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createProgram_result)
        return this.equals((createProgram_result)that);
      return false;
    }

    public boolean equals(createProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createProgram_resultStandardScheme getScheme() {
        return new createProgram_resultStandardScheme();
      }
    }

    private static class createProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createProgram_resultTupleScheme getScheme() {
        return new createProgram_resultTupleScheme();
      }
    }

    private static class createProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getProgram_args implements org.apache.thrift.TBase<getProgram_args, getProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<getProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgram_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProgram_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgram_args.class, metaDataMap);
    }

    public getProgram_args() {
    }

    public getProgram_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProgram_args(getProgram_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public getProgram_args deepCopy() {
      return new getProgram_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getProgram_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getProgram_args)
        return this.equals((getProgram_args)that);
      return false;
    }

    public boolean equals(getProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getProgram_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProgram_argsStandardScheme getScheme() {
        return new getProgram_argsStandardScheme();
      }
    }

    private static class getProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProgram_argsTupleScheme getScheme() {
        return new getProgram_argsTupleScheme();
      }
    }

    private static class getProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getProgram_result implements org.apache.thrift.TBase<getProgram_result, getProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<getProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getProgram_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getProgram_result.class, metaDataMap);
    }

    public getProgram_result() {
    }

    public getProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getProgram_result(getProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getProgram_result deepCopy() {
      return new getProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getProgram_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getProgram_result)
        return this.equals((getProgram_result)that);
      return false;
    }

    public boolean equals(getProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProgram_resultStandardScheme getScheme() {
        return new getProgram_resultStandardScheme();
      }
    }

    private static class getProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getProgram_resultTupleScheme getScheme() {
        return new getProgram_resultTupleScheme();
      }
    }

    private static class getProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteProgram_args implements org.apache.thrift.TBase<deleteProgram_args, deleteProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProgram_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteProgram_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProgram_args.class, metaDataMap);
    }

    public deleteProgram_args() {
    }

    public deleteProgram_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProgram_args(deleteProgram_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public deleteProgram_args deepCopy() {
      return new deleteProgram_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public deleteProgram_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProgram_args)
        return this.equals((deleteProgram_args)that);
      return false;
    }

    public boolean equals(deleteProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteProgram_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteProgram_argsStandardScheme getScheme() {
        return new deleteProgram_argsStandardScheme();
      }
    }

    private static class deleteProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteProgram_argsTupleScheme getScheme() {
        return new deleteProgram_argsTupleScheme();
      }
    }

    private static class deleteProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteProgram_result implements org.apache.thrift.TBase<deleteProgram_result, deleteProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteProgram_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteProgram_result.class, metaDataMap);
    }

    public deleteProgram_result() {
    }

    public deleteProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteProgram_result(deleteProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteProgram_result deepCopy() {
      return new deleteProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public deleteProgram_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteProgram_result)
        return this.equals((deleteProgram_result)that);
      return false;
    }

    public boolean equals(deleteProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteProgram_resultStandardScheme getScheme() {
        return new deleteProgram_resultStandardScheme();
      }
    }

    private static class deleteProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteProgram_resultTupleScheme getScheme() {
        return new deleteProgram_resultTupleScheme();
      }
    }

    private static class deleteProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortProgram_args implements org.apache.thrift.TBase<abortProgram_args, abortProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<abortProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortProgram_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortProgram_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortProgram_args.class, metaDataMap);
    }

    public abortProgram_args() {
    }

    public abortProgram_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortProgram_args(abortProgram_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public abortProgram_args deepCopy() {
      return new abortProgram_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public abortProgram_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortProgram_args)
        return this.equals((abortProgram_args)that);
      return false;
    }

    public boolean equals(abortProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortProgram_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_argsStandardScheme getScheme() {
        return new abortProgram_argsStandardScheme();
      }
    }

    private static class abortProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_argsTupleScheme getScheme() {
        return new abortProgram_argsTupleScheme();
      }
    }

    private static class abortProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortProgram_result implements org.apache.thrift.TBase<abortProgram_result, abortProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<abortProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortProgram_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortProgram_result.class, metaDataMap);
    }

    public abortProgram_result() {
    }

    public abortProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortProgram_result(abortProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public abortProgram_result deepCopy() {
      return new abortProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public abortProgram_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortProgram_result)
        return this.equals((abortProgram_result)that);
      return false;
    }

    public boolean equals(abortProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_resultStandardScheme getScheme() {
        return new abortProgram_resultStandardScheme();
      }
    }

    private static class abortProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_resultTupleScheme getScheme() {
        return new abortProgram_resultTupleScheme();
      }
    }

    private static class abortProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateProgramName_args implements org.apache.thrift.TBase<updateProgramName_args, updateProgramName_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProgramName_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProgramName_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProgramName_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProgramName_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String name; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      NAME((short)2, "name");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // NAME
            return NAME;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProgramName_args.class, metaDataMap);
    }

    public updateProgramName_args() {
    }

    public updateProgramName_args(
      java.lang.String pId,
      java.lang.String name)
    {
      this();
      this.pId = pId;
      this.name = name;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProgramName_args(updateProgramName_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetName()) {
        this.name = other.name;
      }
    }

    public updateProgramName_args deepCopy() {
      return new updateProgramName_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.name = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public updateProgramName_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getName() {
      return this.name;
    }

    public updateProgramName_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case NAME:
        return getName();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case NAME:
        return isSetName();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProgramName_args)
        return this.equals((updateProgramName_args)that);
      return false;
    }

    public boolean equals(updateProgramName_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateProgramName_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProgramName_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProgramName_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramName_argsStandardScheme getScheme() {
        return new updateProgramName_argsStandardScheme();
      }
    }

    private static class updateProgramName_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProgramName_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProgramName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProgramName_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProgramName_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramName_argsTupleScheme getScheme() {
        return new updateProgramName_argsTupleScheme();
      }
    }

    private static class updateProgramName_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProgramName_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProgramName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetName()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProgramName_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateProgramName_result implements org.apache.thrift.TBase<updateProgramName_result, updateProgramName_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProgramName_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProgramName_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProgramName_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProgramName_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProgramName_result.class, metaDataMap);
    }

    public updateProgramName_result() {
    }

    public updateProgramName_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProgramName_result(updateProgramName_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateProgramName_result deepCopy() {
      return new updateProgramName_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public updateProgramName_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProgramName_result)
        return this.equals((updateProgramName_result)that);
      return false;
    }

    public boolean equals(updateProgramName_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateProgramName_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProgramName_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProgramName_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramName_resultStandardScheme getScheme() {
        return new updateProgramName_resultStandardScheme();
      }
    }

    private static class updateProgramName_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProgramName_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProgramName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProgramName_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProgramName_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramName_resultTupleScheme getScheme() {
        return new updateProgramName_resultTupleScheme();
      }
    }

    private static class updateProgramName_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProgramName_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProgramName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProgramName_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateProgramDescription_args implements org.apache.thrift.TBase<updateProgramDescription_args, updateProgramDescription_args._Fields>, java.io.Serializable, Cloneable, Comparable<updateProgramDescription_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProgramDescription_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProgramDescription_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProgramDescription_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String description; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      DESCRIPTION((short)2, "description");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // DESCRIPTION
            return DESCRIPTION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProgramDescription_args.class, metaDataMap);
    }

    public updateProgramDescription_args() {
    }

    public updateProgramDescription_args(
      java.lang.String pId,
      java.lang.String description)
    {
      this();
      this.pId = pId;
      this.description = description;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProgramDescription_args(updateProgramDescription_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetDescription()) {
        this.description = other.description;
      }
    }

    public updateProgramDescription_args deepCopy() {
      return new updateProgramDescription_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.description = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public updateProgramDescription_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getDescription() {
      return this.description;
    }

    public updateProgramDescription_args setDescription(java.lang.String description) {
      this.description = description;
      return this;
    }

    public void unsetDescription() {
      this.description = null;
    }

    /** Returns true if field description is set (has been assigned a value) and false otherwise */
    public boolean isSetDescription() {
      return this.description != null;
    }

    public void setDescriptionIsSet(boolean value) {
      if (!value) {
        this.description = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case DESCRIPTION:
        if (value == null) {
          unsetDescription();
        } else {
          setDescription((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case DESCRIPTION:
        return getDescription();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case DESCRIPTION:
        return isSetDescription();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProgramDescription_args)
        return this.equals((updateProgramDescription_args)that);
      return false;
    }

    public boolean equals(updateProgramDescription_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_description = true && this.isSetDescription();
      boolean that_present_description = true && that.isSetDescription();
      if (this_present_description || that_present_description) {
        if (!(this_present_description && that_present_description))
          return false;
        if (!this.description.equals(that.description))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
      if (isSetDescription())
        hashCode = hashCode * 8191 + description.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateProgramDescription_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDescription()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProgramDescription_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("description:");
      if (this.description == null) {
        sb.append("null");
      } else {
        sb.append(this.description);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProgramDescription_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramDescription_argsStandardScheme getScheme() {
        return new updateProgramDescription_argsStandardScheme();
      }
    }

    private static class updateProgramDescription_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProgramDescription_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProgramDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DESCRIPTION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.description = iprot.readString();
                struct.setDescriptionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProgramDescription_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.description != null) {
          oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
          oprot.writeString(struct.description);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProgramDescription_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramDescription_argsTupleScheme getScheme() {
        return new updateProgramDescription_argsTupleScheme();
      }
    }

    private static class updateProgramDescription_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProgramDescription_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProgramDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetDescription()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetDescription()) {
          oprot.writeString(struct.description);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProgramDescription_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.description = iprot.readString();
          struct.setDescriptionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class updateProgramDescription_result implements org.apache.thrift.TBase<updateProgramDescription_result, updateProgramDescription_result._Fields>, java.io.Serializable, Cloneable, Comparable<updateProgramDescription_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("updateProgramDescription_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new updateProgramDescription_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new updateProgramDescription_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(updateProgramDescription_result.class, metaDataMap);
    }

    public updateProgramDescription_result() {
    }

    public updateProgramDescription_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public updateProgramDescription_result(updateProgramDescription_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public updateProgramDescription_result deepCopy() {
      return new updateProgramDescription_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public updateProgramDescription_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof updateProgramDescription_result)
        return this.equals((updateProgramDescription_result)that);
      return false;
    }

    public boolean equals(updateProgramDescription_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(updateProgramDescription_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("updateProgramDescription_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class updateProgramDescription_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramDescription_resultStandardScheme getScheme() {
        return new updateProgramDescription_resultStandardScheme();
      }
    }

    private static class updateProgramDescription_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<updateProgramDescription_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, updateProgramDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, updateProgramDescription_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class updateProgramDescription_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public updateProgramDescription_resultTupleScheme getScheme() {
        return new updateProgramDescription_resultTupleScheme();
      }
    }

    private static class updateProgramDescription_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<updateProgramDescription_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, updateProgramDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, updateProgramDescription_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markProgramAsFinished_args implements org.apache.thrift.TBase<markProgramAsFinished_args, markProgramAsFinished_args._Fields>, java.io.Serializable, Cloneable, Comparable<markProgramAsFinished_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markProgramAsFinished_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markProgramAsFinished_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markProgramAsFinished_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markProgramAsFinished_args.class, metaDataMap);
    }

    public markProgramAsFinished_args() {
    }

    public markProgramAsFinished_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markProgramAsFinished_args(markProgramAsFinished_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public markProgramAsFinished_args deepCopy() {
      return new markProgramAsFinished_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public markProgramAsFinished_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markProgramAsFinished_args)
        return this.equals((markProgramAsFinished_args)that);
      return false;
    }

    public boolean equals(markProgramAsFinished_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markProgramAsFinished_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markProgramAsFinished_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markProgramAsFinished_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markProgramAsFinished_argsStandardScheme getScheme() {
        return new markProgramAsFinished_argsStandardScheme();
      }
    }

    private static class markProgramAsFinished_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<markProgramAsFinished_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markProgramAsFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markProgramAsFinished_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markProgramAsFinished_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markProgramAsFinished_argsTupleScheme getScheme() {
        return new markProgramAsFinished_argsTupleScheme();
      }
    }

    private static class markProgramAsFinished_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<markProgramAsFinished_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markProgramAsFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markProgramAsFinished_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markProgramAsFinished_result implements org.apache.thrift.TBase<markProgramAsFinished_result, markProgramAsFinished_result._Fields>, java.io.Serializable, Cloneable, Comparable<markProgramAsFinished_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markProgramAsFinished_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markProgramAsFinished_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markProgramAsFinished_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markProgramAsFinished_result.class, metaDataMap);
    }

    public markProgramAsFinished_result() {
    }

    public markProgramAsFinished_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markProgramAsFinished_result(markProgramAsFinished_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public markProgramAsFinished_result deepCopy() {
      return new markProgramAsFinished_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public markProgramAsFinished_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markProgramAsFinished_result)
        return this.equals((markProgramAsFinished_result)that);
      return false;
    }

    public boolean equals(markProgramAsFinished_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markProgramAsFinished_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markProgramAsFinished_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markProgramAsFinished_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markProgramAsFinished_resultStandardScheme getScheme() {
        return new markProgramAsFinished_resultStandardScheme();
      }
    }

    private static class markProgramAsFinished_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<markProgramAsFinished_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markProgramAsFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markProgramAsFinished_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markProgramAsFinished_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markProgramAsFinished_resultTupleScheme getScheme() {
        return new markProgramAsFinished_resultTupleScheme();
      }
    }

    private static class markProgramAsFinished_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<markProgramAsFinished_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markProgramAsFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markProgramAsFinished_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllJobs_args implements org.apache.thrift.TBase<getAllJobs_args, getAllJobs_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllJobs_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllJobs_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllJobs_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllJobs_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllJobs_args.class, metaDataMap);
    }

    public getAllJobs_args() {
    }

    public getAllJobs_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllJobs_args(getAllJobs_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public getAllJobs_args deepCopy() {
      return new getAllJobs_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getAllJobs_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllJobs_args)
        return this.equals((getAllJobs_args)that);
      return false;
    }

    public boolean equals(getAllJobs_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllJobs_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllJobs_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllJobs_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllJobs_argsStandardScheme getScheme() {
        return new getAllJobs_argsStandardScheme();
      }
    }

    private static class getAllJobs_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllJobs_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllJobs_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllJobs_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllJobs_argsTupleScheme getScheme() {
        return new getAllJobs_argsTupleScheme();
      }
    }

    private static class getAllJobs_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllJobs_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllJobs_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllJobs_result implements org.apache.thrift.TBase<getAllJobs_result, getAllJobs_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllJobs_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllJobs_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllJobs_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllJobs_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllJobs_result.class, metaDataMap);
    }

    public getAllJobs_result() {
    }

    public getAllJobs_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllJobs_result(getAllJobs_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAllJobs_result deepCopy() {
      return new getAllJobs_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAllJobs_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllJobs_result)
        return this.equals((getAllJobs_result)that);
      return false;
    }

    public boolean equals(getAllJobs_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllJobs_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllJobs_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllJobs_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllJobs_resultStandardScheme getScheme() {
        return new getAllJobs_resultStandardScheme();
      }
    }

    private static class getAllJobs_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllJobs_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllJobs_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllJobs_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllJobs_resultTupleScheme getScheme() {
        return new getAllJobs_resultTupleScheme();
      }
    }

    private static class getAllJobs_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllJobs_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllJobs_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createJob_args implements org.apache.thrift.TBase<createJob_args, createJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<createJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createJob_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createJob_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createJob_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createJob_args.class, metaDataMap);
    }

    public createJob_args() {
    }

    public createJob_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createJob_args(createJob_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public createJob_args deepCopy() {
      return new createJob_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public createJob_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createJob_args)
        return this.equals((createJob_args)that);
      return false;
    }

    public boolean equals(createJob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createJob_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createJob_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createJob_argsStandardScheme getScheme() {
        return new createJob_argsStandardScheme();
      }
    }

    private static class createJob_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createJob_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createJob_argsTupleScheme getScheme() {
        return new createJob_argsTupleScheme();
      }
    }

    private static class createJob_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createJob_result implements org.apache.thrift.TBase<createJob_result, createJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<createJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createJob_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createJob_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createJob_result.class, metaDataMap);
    }

    public createJob_result() {
    }

    public createJob_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createJob_result(createJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createJob_result deepCopy() {
      return new createJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createJob_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createJob_result)
        return this.equals((createJob_result)that);
      return false;
    }

    public boolean equals(createJob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createJob_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createJob_resultStandardScheme getScheme() {
        return new createJob_resultStandardScheme();
      }
    }

    private static class createJob_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createJob_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createJob_resultTupleScheme getScheme() {
        return new createJob_resultTupleScheme();
      }
    }

    private static class createJob_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getJob_args implements org.apache.thrift.TBase<getJob_args, getJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<getJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJob_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getJob_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getJob_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJob_args.class, metaDataMap);
    }

    public getJob_args() {
    }

    public getJob_args(
      java.lang.String pId,
      java.lang.String jId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJob_args(getJob_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
    }

    public getJob_args deepCopy() {
      return new getJob_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getJob_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getJob_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getJob_args)
        return this.equals((getJob_args)that);
      return false;
    }

    public boolean equals(getJob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getJob_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJob_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJob_argsStandardScheme getScheme() {
        return new getJob_argsStandardScheme();
      }
    }

    private static class getJob_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJob_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJob_argsTupleScheme getScheme() {
        return new getJob_argsTupleScheme();
      }
    }

    private static class getJob_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getJob_result implements org.apache.thrift.TBase<getJob_result, getJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<getJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getJob_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getJob_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getJob_result.class, metaDataMap);
    }

    public getJob_result() {
    }

    public getJob_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getJob_result(getJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getJob_result deepCopy() {
      return new getJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getJob_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getJob_result)
        return this.equals((getJob_result)that);
      return false;
    }

    public boolean equals(getJob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getJob_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJob_resultStandardScheme getScheme() {
        return new getJob_resultStandardScheme();
      }
    }

    private static class getJob_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getJob_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getJob_resultTupleScheme getScheme() {
        return new getJob_resultTupleScheme();
      }
    }

    private static class getJob_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteJob_args implements org.apache.thrift.TBase<deleteJob_args, deleteJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJob_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteJob_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteJob_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJob_args.class, metaDataMap);
    }

    public deleteJob_args() {
    }

    public deleteJob_args(
      java.lang.String pId,
      java.lang.String jId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteJob_args(deleteJob_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
    }

    public deleteJob_args deepCopy() {
      return new deleteJob_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public deleteJob_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public deleteJob_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteJob_args)
        return this.equals((deleteJob_args)that);
      return false;
    }

    public boolean equals(deleteJob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteJob_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteJob_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteJob_argsStandardScheme getScheme() {
        return new deleteJob_argsStandardScheme();
      }
    }

    private static class deleteJob_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteJob_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteJob_argsTupleScheme getScheme() {
        return new deleteJob_argsTupleScheme();
      }
    }

    private static class deleteJob_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteJob_result implements org.apache.thrift.TBase<deleteJob_result, deleteJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteJob_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteJob_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteJob_result.class, metaDataMap);
    }

    public deleteJob_result() {
    }

    public deleteJob_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteJob_result(deleteJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteJob_result deepCopy() {
      return new deleteJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public deleteJob_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteJob_result)
        return this.equals((deleteJob_result)that);
      return false;
    }

    public boolean equals(deleteJob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteJob_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteJob_resultStandardScheme getScheme() {
        return new deleteJob_resultStandardScheme();
      }
    }

    private static class deleteJob_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteJob_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteJob_resultTupleScheme getScheme() {
        return new deleteJob_resultTupleScheme();
      }
    }

    private static class deleteJob_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAttachedMapRoutine_args implements org.apache.thrift.TBase<getAttachedMapRoutine_args, getAttachedMapRoutine_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAttachedMapRoutine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAttachedMapRoutine_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAttachedMapRoutine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAttachedMapRoutine_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAttachedMapRoutine_args.class, metaDataMap);
    }

    public getAttachedMapRoutine_args() {
    }

    public getAttachedMapRoutine_args(
      java.lang.String pId,
      java.lang.String jId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAttachedMapRoutine_args(getAttachedMapRoutine_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
    }

    public getAttachedMapRoutine_args deepCopy() {
      return new getAttachedMapRoutine_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getAttachedMapRoutine_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getAttachedMapRoutine_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAttachedMapRoutine_args)
        return this.equals((getAttachedMapRoutine_args)that);
      return false;
    }

    public boolean equals(getAttachedMapRoutine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAttachedMapRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAttachedMapRoutine_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAttachedMapRoutine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedMapRoutine_argsStandardScheme getScheme() {
        return new getAttachedMapRoutine_argsStandardScheme();
      }
    }

    private static class getAttachedMapRoutine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAttachedMapRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAttachedMapRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAttachedMapRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAttachedMapRoutine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedMapRoutine_argsTupleScheme getScheme() {
        return new getAttachedMapRoutine_argsTupleScheme();
      }
    }

    private static class getAttachedMapRoutine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAttachedMapRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAttachedMapRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAttachedMapRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAttachedMapRoutine_result implements org.apache.thrift.TBase<getAttachedMapRoutine_result, getAttachedMapRoutine_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAttachedMapRoutine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAttachedMapRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAttachedMapRoutine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAttachedMapRoutine_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAttachedMapRoutine_result.class, metaDataMap);
    }

    public getAttachedMapRoutine_result() {
    }

    public getAttachedMapRoutine_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAttachedMapRoutine_result(getAttachedMapRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAttachedMapRoutine_result deepCopy() {
      return new getAttachedMapRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAttachedMapRoutine_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAttachedMapRoutine_result)
        return this.equals((getAttachedMapRoutine_result)that);
      return false;
    }

    public boolean equals(getAttachedMapRoutine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAttachedMapRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAttachedMapRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAttachedMapRoutine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedMapRoutine_resultStandardScheme getScheme() {
        return new getAttachedMapRoutine_resultStandardScheme();
      }
    }

    private static class getAttachedMapRoutine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAttachedMapRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAttachedMapRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAttachedMapRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAttachedMapRoutine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedMapRoutine_resultTupleScheme getScheme() {
        return new getAttachedMapRoutine_resultTupleScheme();
      }
    }

    private static class getAttachedMapRoutine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAttachedMapRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAttachedMapRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAttachedMapRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class attachMapRoutine_args implements org.apache.thrift.TBase<attachMapRoutine_args, attachMapRoutine_args._Fields>, java.io.Serializable, Cloneable, Comparable<attachMapRoutine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("attachMapRoutine_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MAP_ROUTINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("mapRoutineId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new attachMapRoutine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new attachMapRoutine_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public java.lang.String mapRoutineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      MAP_ROUTINE_ID((short)3, "mapRoutineId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // MAP_ROUTINE_ID
            return MAP_ROUTINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.MAP_ROUTINE_ID, new org.apache.thrift.meta_data.FieldMetaData("mapRoutineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(attachMapRoutine_args.class, metaDataMap);
    }

    public attachMapRoutine_args() {
    }

    public attachMapRoutine_args(
      java.lang.String pId,
      java.lang.String jId,
      java.lang.String mapRoutineId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.mapRoutineId = mapRoutineId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public attachMapRoutine_args(attachMapRoutine_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetMapRoutineId()) {
        this.mapRoutineId = other.mapRoutineId;
      }
    }

    public attachMapRoutine_args deepCopy() {
      return new attachMapRoutine_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.mapRoutineId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public attachMapRoutine_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public attachMapRoutine_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public java.lang.String getMapRoutineId() {
      return this.mapRoutineId;
    }

    public attachMapRoutine_args setMapRoutineId(java.lang.String mapRoutineId) {
      this.mapRoutineId = mapRoutineId;
      return this;
    }

    public void unsetMapRoutineId() {
      this.mapRoutineId = null;
    }

    /** Returns true if field mapRoutineId is set (has been assigned a value) and false otherwise */
    public boolean isSetMapRoutineId() {
      return this.mapRoutineId != null;
    }

    public void setMapRoutineIdIsSet(boolean value) {
      if (!value) {
        this.mapRoutineId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case MAP_ROUTINE_ID:
        if (value == null) {
          unsetMapRoutineId();
        } else {
          setMapRoutineId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case MAP_ROUTINE_ID:
        return getMapRoutineId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case MAP_ROUTINE_ID:
        return isSetMapRoutineId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof attachMapRoutine_args)
        return this.equals((attachMapRoutine_args)that);
      return false;
    }

    public boolean equals(attachMapRoutine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_mapRoutineId = true && this.isSetMapRoutineId();
      boolean that_present_mapRoutineId = true && that.isSetMapRoutineId();
      if (this_present_mapRoutineId || that_present_mapRoutineId) {
        if (!(this_present_mapRoutineId && that_present_mapRoutineId))
          return false;
        if (!this.mapRoutineId.equals(that.mapRoutineId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetMapRoutineId()) ? 131071 : 524287);
      if (isSetMapRoutineId())
        hashCode = hashCode * 8191 + mapRoutineId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(attachMapRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMapRoutineId()).compareTo(other.isSetMapRoutineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMapRoutineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mapRoutineId, other.mapRoutineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("attachMapRoutine_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("mapRoutineId:");
      if (this.mapRoutineId == null) {
        sb.append("null");
      } else {
        sb.append(this.mapRoutineId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class attachMapRoutine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachMapRoutine_argsStandardScheme getScheme() {
        return new attachMapRoutine_argsStandardScheme();
      }
    }

    private static class attachMapRoutine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<attachMapRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, attachMapRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MAP_ROUTINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.mapRoutineId = iprot.readString();
                struct.setMapRoutineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, attachMapRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.mapRoutineId != null) {
          oprot.writeFieldBegin(MAP_ROUTINE_ID_FIELD_DESC);
          oprot.writeString(struct.mapRoutineId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class attachMapRoutine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachMapRoutine_argsTupleScheme getScheme() {
        return new attachMapRoutine_argsTupleScheme();
      }
    }

    private static class attachMapRoutine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<attachMapRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, attachMapRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetMapRoutineId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetMapRoutineId()) {
          oprot.writeString(struct.mapRoutineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, attachMapRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.mapRoutineId = iprot.readString();
          struct.setMapRoutineIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class attachMapRoutine_result implements org.apache.thrift.TBase<attachMapRoutine_result, attachMapRoutine_result._Fields>, java.io.Serializable, Cloneable, Comparable<attachMapRoutine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("attachMapRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new attachMapRoutine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new attachMapRoutine_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(attachMapRoutine_result.class, metaDataMap);
    }

    public attachMapRoutine_result() {
    }

    public attachMapRoutine_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public attachMapRoutine_result(attachMapRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public attachMapRoutine_result deepCopy() {
      return new attachMapRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public attachMapRoutine_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof attachMapRoutine_result)
        return this.equals((attachMapRoutine_result)that);
      return false;
    }

    public boolean equals(attachMapRoutine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(attachMapRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("attachMapRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class attachMapRoutine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachMapRoutine_resultStandardScheme getScheme() {
        return new attachMapRoutine_resultStandardScheme();
      }
    }

    private static class attachMapRoutine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<attachMapRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, attachMapRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, attachMapRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class attachMapRoutine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachMapRoutine_resultTupleScheme getScheme() {
        return new attachMapRoutine_resultTupleScheme();
      }
    }

    private static class attachMapRoutine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<attachMapRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, attachMapRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, attachMapRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAttachedReduceRoutine_args implements org.apache.thrift.TBase<getAttachedReduceRoutine_args, getAttachedReduceRoutine_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAttachedReduceRoutine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAttachedReduceRoutine_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAttachedReduceRoutine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAttachedReduceRoutine_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAttachedReduceRoutine_args.class, metaDataMap);
    }

    public getAttachedReduceRoutine_args() {
    }

    public getAttachedReduceRoutine_args(
      java.lang.String pId,
      java.lang.String jId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAttachedReduceRoutine_args(getAttachedReduceRoutine_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
    }

    public getAttachedReduceRoutine_args deepCopy() {
      return new getAttachedReduceRoutine_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getAttachedReduceRoutine_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getAttachedReduceRoutine_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAttachedReduceRoutine_args)
        return this.equals((getAttachedReduceRoutine_args)that);
      return false;
    }

    public boolean equals(getAttachedReduceRoutine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAttachedReduceRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAttachedReduceRoutine_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAttachedReduceRoutine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedReduceRoutine_argsStandardScheme getScheme() {
        return new getAttachedReduceRoutine_argsStandardScheme();
      }
    }

    private static class getAttachedReduceRoutine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAttachedReduceRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAttachedReduceRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAttachedReduceRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAttachedReduceRoutine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedReduceRoutine_argsTupleScheme getScheme() {
        return new getAttachedReduceRoutine_argsTupleScheme();
      }
    }

    private static class getAttachedReduceRoutine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAttachedReduceRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAttachedReduceRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAttachedReduceRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAttachedReduceRoutine_result implements org.apache.thrift.TBase<getAttachedReduceRoutine_result, getAttachedReduceRoutine_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAttachedReduceRoutine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAttachedReduceRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAttachedReduceRoutine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAttachedReduceRoutine_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAttachedReduceRoutine_result.class, metaDataMap);
    }

    public getAttachedReduceRoutine_result() {
    }

    public getAttachedReduceRoutine_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAttachedReduceRoutine_result(getAttachedReduceRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAttachedReduceRoutine_result deepCopy() {
      return new getAttachedReduceRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAttachedReduceRoutine_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAttachedReduceRoutine_result)
        return this.equals((getAttachedReduceRoutine_result)that);
      return false;
    }

    public boolean equals(getAttachedReduceRoutine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAttachedReduceRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAttachedReduceRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAttachedReduceRoutine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedReduceRoutine_resultStandardScheme getScheme() {
        return new getAttachedReduceRoutine_resultStandardScheme();
      }
    }

    private static class getAttachedReduceRoutine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAttachedReduceRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAttachedReduceRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAttachedReduceRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAttachedReduceRoutine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAttachedReduceRoutine_resultTupleScheme getScheme() {
        return new getAttachedReduceRoutine_resultTupleScheme();
      }
    }

    private static class getAttachedReduceRoutine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAttachedReduceRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAttachedReduceRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAttachedReduceRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class attachReduceRoutine_args implements org.apache.thrift.TBase<attachReduceRoutine_args, attachReduceRoutine_args._Fields>, java.io.Serializable, Cloneable, Comparable<attachReduceRoutine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("attachReduceRoutine_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField REDUCE_ROUTINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reduceRoutineId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new attachReduceRoutine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new attachReduceRoutine_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public java.lang.String reduceRoutineId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      REDUCE_ROUTINE_ID((short)3, "reduceRoutineId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // REDUCE_ROUTINE_ID
            return REDUCE_ROUTINE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.REDUCE_ROUTINE_ID, new org.apache.thrift.meta_data.FieldMetaData("reduceRoutineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(attachReduceRoutine_args.class, metaDataMap);
    }

    public attachReduceRoutine_args() {
    }

    public attachReduceRoutine_args(
      java.lang.String pId,
      java.lang.String jId,
      java.lang.String reduceRoutineId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.reduceRoutineId = reduceRoutineId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public attachReduceRoutine_args(attachReduceRoutine_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetReduceRoutineId()) {
        this.reduceRoutineId = other.reduceRoutineId;
      }
    }

    public attachReduceRoutine_args deepCopy() {
      return new attachReduceRoutine_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.reduceRoutineId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public attachReduceRoutine_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public attachReduceRoutine_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public java.lang.String getReduceRoutineId() {
      return this.reduceRoutineId;
    }

    public attachReduceRoutine_args setReduceRoutineId(java.lang.String reduceRoutineId) {
      this.reduceRoutineId = reduceRoutineId;
      return this;
    }

    public void unsetReduceRoutineId() {
      this.reduceRoutineId = null;
    }

    /** Returns true if field reduceRoutineId is set (has been assigned a value) and false otherwise */
    public boolean isSetReduceRoutineId() {
      return this.reduceRoutineId != null;
    }

    public void setReduceRoutineIdIsSet(boolean value) {
      if (!value) {
        this.reduceRoutineId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case REDUCE_ROUTINE_ID:
        if (value == null) {
          unsetReduceRoutineId();
        } else {
          setReduceRoutineId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case REDUCE_ROUTINE_ID:
        return getReduceRoutineId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case REDUCE_ROUTINE_ID:
        return isSetReduceRoutineId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof attachReduceRoutine_args)
        return this.equals((attachReduceRoutine_args)that);
      return false;
    }

    public boolean equals(attachReduceRoutine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_reduceRoutineId = true && this.isSetReduceRoutineId();
      boolean that_present_reduceRoutineId = true && that.isSetReduceRoutineId();
      if (this_present_reduceRoutineId || that_present_reduceRoutineId) {
        if (!(this_present_reduceRoutineId && that_present_reduceRoutineId))
          return false;
        if (!this.reduceRoutineId.equals(that.reduceRoutineId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetReduceRoutineId()) ? 131071 : 524287);
      if (isSetReduceRoutineId())
        hashCode = hashCode * 8191 + reduceRoutineId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(attachReduceRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetReduceRoutineId()).compareTo(other.isSetReduceRoutineId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetReduceRoutineId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reduceRoutineId, other.reduceRoutineId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("attachReduceRoutine_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("reduceRoutineId:");
      if (this.reduceRoutineId == null) {
        sb.append("null");
      } else {
        sb.append(this.reduceRoutineId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class attachReduceRoutine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachReduceRoutine_argsStandardScheme getScheme() {
        return new attachReduceRoutine_argsStandardScheme();
      }
    }

    private static class attachReduceRoutine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<attachReduceRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, attachReduceRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // REDUCE_ROUTINE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.reduceRoutineId = iprot.readString();
                struct.setReduceRoutineIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, attachReduceRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.reduceRoutineId != null) {
          oprot.writeFieldBegin(REDUCE_ROUTINE_ID_FIELD_DESC);
          oprot.writeString(struct.reduceRoutineId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class attachReduceRoutine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachReduceRoutine_argsTupleScheme getScheme() {
        return new attachReduceRoutine_argsTupleScheme();
      }
    }

    private static class attachReduceRoutine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<attachReduceRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, attachReduceRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetReduceRoutineId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetReduceRoutineId()) {
          oprot.writeString(struct.reduceRoutineId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, attachReduceRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.reduceRoutineId = iprot.readString();
          struct.setReduceRoutineIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class attachReduceRoutine_result implements org.apache.thrift.TBase<attachReduceRoutine_result, attachReduceRoutine_result._Fields>, java.io.Serializable, Cloneable, Comparable<attachReduceRoutine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("attachReduceRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new attachReduceRoutine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new attachReduceRoutine_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(attachReduceRoutine_result.class, metaDataMap);
    }

    public attachReduceRoutine_result() {
    }

    public attachReduceRoutine_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public attachReduceRoutine_result(attachReduceRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public attachReduceRoutine_result deepCopy() {
      return new attachReduceRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public attachReduceRoutine_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof attachReduceRoutine_result)
        return this.equals((attachReduceRoutine_result)that);
      return false;
    }

    public boolean equals(attachReduceRoutine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(attachReduceRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("attachReduceRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class attachReduceRoutine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachReduceRoutine_resultStandardScheme getScheme() {
        return new attachReduceRoutine_resultStandardScheme();
      }
    }

    private static class attachReduceRoutine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<attachReduceRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, attachReduceRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, attachReduceRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class attachReduceRoutine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public attachReduceRoutine_resultTupleScheme getScheme() {
        return new attachReduceRoutine_resultTupleScheme();
      }
    }

    private static class attachReduceRoutine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<attachReduceRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, attachReduceRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, attachReduceRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllTasks_args implements org.apache.thrift.TBase<getAllTasks_args, getAllTasks_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTasks_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTasks_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField SORTING_CRITERION_FIELD_DESC = new org.apache.thrift.protocol.TField("sortingCriterion", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTasks_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTasks_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    /**
     * 
     * @see at.enfilo.def.transfer.dto.SortingCriterion
     */
    public at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.SortingCriterion
       */
      SORTING_CRITERION((short)3, "sortingCriterion");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // SORTING_CRITERION
            return SORTING_CRITERION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.SORTING_CRITERION, new org.apache.thrift.meta_data.FieldMetaData("sortingCriterion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.SortingCriterion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTasks_args.class, metaDataMap);
    }

    public getAllTasks_args() {
    }

    public getAllTasks_args(
      java.lang.String pId,
      java.lang.String jId,
      at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.sortingCriterion = sortingCriterion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTasks_args(getAllTasks_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetSortingCriterion()) {
        this.sortingCriterion = other.sortingCriterion;
      }
    }

    public getAllTasks_args deepCopy() {
      return new getAllTasks_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.sortingCriterion = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getAllTasks_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getAllTasks_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.SortingCriterion
     */
    public at.enfilo.def.transfer.dto.SortingCriterion getSortingCriterion() {
      return this.sortingCriterion;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.SortingCriterion
     */
    public getAllTasks_args setSortingCriterion(at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) {
      this.sortingCriterion = sortingCriterion;
      return this;
    }

    public void unsetSortingCriterion() {
      this.sortingCriterion = null;
    }

    /** Returns true if field sortingCriterion is set (has been assigned a value) and false otherwise */
    public boolean isSetSortingCriterion() {
      return this.sortingCriterion != null;
    }

    public void setSortingCriterionIsSet(boolean value) {
      if (!value) {
        this.sortingCriterion = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case SORTING_CRITERION:
        if (value == null) {
          unsetSortingCriterion();
        } else {
          setSortingCriterion((at.enfilo.def.transfer.dto.SortingCriterion)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case SORTING_CRITERION:
        return getSortingCriterion();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case SORTING_CRITERION:
        return isSetSortingCriterion();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTasks_args)
        return this.equals((getAllTasks_args)that);
      return false;
    }

    public boolean equals(getAllTasks_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_sortingCriterion = true && this.isSetSortingCriterion();
      boolean that_present_sortingCriterion = true && that.isSetSortingCriterion();
      if (this_present_sortingCriterion || that_present_sortingCriterion) {
        if (!(this_present_sortingCriterion && that_present_sortingCriterion))
          return false;
        if (!this.sortingCriterion.equals(that.sortingCriterion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetSortingCriterion()) ? 131071 : 524287);
      if (isSetSortingCriterion())
        hashCode = hashCode * 8191 + sortingCriterion.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(getAllTasks_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSortingCriterion()).compareTo(other.isSetSortingCriterion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortingCriterion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortingCriterion, other.sortingCriterion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTasks_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortingCriterion:");
      if (this.sortingCriterion == null) {
        sb.append("null");
      } else {
        sb.append(this.sortingCriterion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTasks_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasks_argsStandardScheme getScheme() {
        return new getAllTasks_argsStandardScheme();
      }
    }

    private static class getAllTasks_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllTasks_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // SORTING_CRITERION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sortingCriterion = at.enfilo.def.transfer.dto.SortingCriterion.findByValue(iprot.readI32());
                struct.setSortingCriterionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTasks_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.sortingCriterion != null) {
          oprot.writeFieldBegin(SORTING_CRITERION_FIELD_DESC);
          oprot.writeI32(struct.sortingCriterion.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTasks_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasks_argsTupleScheme getScheme() {
        return new getAllTasks_argsTupleScheme();
      }
    }

    private static class getAllTasks_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllTasks_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetSortingCriterion()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetSortingCriterion()) {
          oprot.writeI32(struct.sortingCriterion.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTasks_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.sortingCriterion = at.enfilo.def.transfer.dto.SortingCriterion.findByValue(iprot.readI32());
          struct.setSortingCriterionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllTasks_result implements org.apache.thrift.TBase<getAllTasks_result, getAllTasks_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTasks_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTasks_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTasks_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTasks_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTasks_result.class, metaDataMap);
    }

    public getAllTasks_result() {
    }

    public getAllTasks_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTasks_result(getAllTasks_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAllTasks_result deepCopy() {
      return new getAllTasks_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAllTasks_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTasks_result)
        return this.equals((getAllTasks_result)that);
      return false;
    }

    public boolean equals(getAllTasks_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllTasks_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTasks_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTasks_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasks_resultStandardScheme getScheme() {
        return new getAllTasks_resultStandardScheme();
      }
    }

    private static class getAllTasks_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllTasks_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTasks_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTasks_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasks_resultTupleScheme getScheme() {
        return new getAllTasks_resultTupleScheme();
      }
    }

    private static class getAllTasks_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllTasks_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTasks_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllTasksWithState_args implements org.apache.thrift.TBase<getAllTasksWithState_args, getAllTasksWithState_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTasksWithState_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTasksWithState_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField STATE_FIELD_DESC = new org.apache.thrift.protocol.TField("state", org.apache.thrift.protocol.TType.I32, (short)3);
    private static final org.apache.thrift.protocol.TField SORTING_CRITERION_FIELD_DESC = new org.apache.thrift.protocol.TField("sortingCriterion", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTasksWithState_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTasksWithState_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    /**
     * 
     * @see at.enfilo.def.transfer.dto.ExecutionState
     */
    public at.enfilo.def.transfer.dto.ExecutionState state; // required
    /**
     * 
     * @see at.enfilo.def.transfer.dto.SortingCriterion
     */
    public at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ExecutionState
       */
      STATE((short)3, "state"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.SortingCriterion
       */
      SORTING_CRITERION((short)4, "sortingCriterion");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // STATE
            return STATE;
          case 4: // SORTING_CRITERION
            return SORTING_CRITERION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.STATE, new org.apache.thrift.meta_data.FieldMetaData("state", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ExecutionState.class)));
      tmpMap.put(_Fields.SORTING_CRITERION, new org.apache.thrift.meta_data.FieldMetaData("sortingCriterion", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.SortingCriterion.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTasksWithState_args.class, metaDataMap);
    }

    public getAllTasksWithState_args() {
    }

    public getAllTasksWithState_args(
      java.lang.String pId,
      java.lang.String jId,
      at.enfilo.def.transfer.dto.ExecutionState state,
      at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.state = state;
      this.sortingCriterion = sortingCriterion;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTasksWithState_args(getAllTasksWithState_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetState()) {
        this.state = other.state;
      }
      if (other.isSetSortingCriterion()) {
        this.sortingCriterion = other.sortingCriterion;
      }
    }

    public getAllTasksWithState_args deepCopy() {
      return new getAllTasksWithState_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.state = null;
      this.sortingCriterion = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getAllTasksWithState_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getAllTasksWithState_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ExecutionState
     */
    public at.enfilo.def.transfer.dto.ExecutionState getState() {
      return this.state;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ExecutionState
     */
    public getAllTasksWithState_args setState(at.enfilo.def.transfer.dto.ExecutionState state) {
      this.state = state;
      return this;
    }

    public void unsetState() {
      this.state = null;
    }

    /** Returns true if field state is set (has been assigned a value) and false otherwise */
    public boolean isSetState() {
      return this.state != null;
    }

    public void setStateIsSet(boolean value) {
      if (!value) {
        this.state = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.SortingCriterion
     */
    public at.enfilo.def.transfer.dto.SortingCriterion getSortingCriterion() {
      return this.sortingCriterion;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.SortingCriterion
     */
    public getAllTasksWithState_args setSortingCriterion(at.enfilo.def.transfer.dto.SortingCriterion sortingCriterion) {
      this.sortingCriterion = sortingCriterion;
      return this;
    }

    public void unsetSortingCriterion() {
      this.sortingCriterion = null;
    }

    /** Returns true if field sortingCriterion is set (has been assigned a value) and false otherwise */
    public boolean isSetSortingCriterion() {
      return this.sortingCriterion != null;
    }

    public void setSortingCriterionIsSet(boolean value) {
      if (!value) {
        this.sortingCriterion = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case STATE:
        if (value == null) {
          unsetState();
        } else {
          setState((at.enfilo.def.transfer.dto.ExecutionState)value);
        }
        break;

      case SORTING_CRITERION:
        if (value == null) {
          unsetSortingCriterion();
        } else {
          setSortingCriterion((at.enfilo.def.transfer.dto.SortingCriterion)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case STATE:
        return getState();

      case SORTING_CRITERION:
        return getSortingCriterion();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case STATE:
        return isSetState();
      case SORTING_CRITERION:
        return isSetSortingCriterion();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTasksWithState_args)
        return this.equals((getAllTasksWithState_args)that);
      return false;
    }

    public boolean equals(getAllTasksWithState_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_state = true && this.isSetState();
      boolean that_present_state = true && that.isSetState();
      if (this_present_state || that_present_state) {
        if (!(this_present_state && that_present_state))
          return false;
        if (!this.state.equals(that.state))
          return false;
      }

      boolean this_present_sortingCriterion = true && this.isSetSortingCriterion();
      boolean that_present_sortingCriterion = true && that.isSetSortingCriterion();
      if (this_present_sortingCriterion || that_present_sortingCriterion) {
        if (!(this_present_sortingCriterion && that_present_sortingCriterion))
          return false;
        if (!this.sortingCriterion.equals(that.sortingCriterion))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetState()) ? 131071 : 524287);
      if (isSetState())
        hashCode = hashCode * 8191 + state.getValue();

      hashCode = hashCode * 8191 + ((isSetSortingCriterion()) ? 131071 : 524287);
      if (isSetSortingCriterion())
        hashCode = hashCode * 8191 + sortingCriterion.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(getAllTasksWithState_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetState()).compareTo(other.isSetState());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetState()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.state, other.state);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSortingCriterion()).compareTo(other.isSetSortingCriterion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSortingCriterion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sortingCriterion, other.sortingCriterion);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTasksWithState_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("state:");
      if (this.state == null) {
        sb.append("null");
      } else {
        sb.append(this.state);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sortingCriterion:");
      if (this.sortingCriterion == null) {
        sb.append("null");
      } else {
        sb.append(this.sortingCriterion);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTasksWithState_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasksWithState_argsStandardScheme getScheme() {
        return new getAllTasksWithState_argsStandardScheme();
      }
    }

    private static class getAllTasksWithState_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllTasksWithState_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTasksWithState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // STATE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.state = at.enfilo.def.transfer.dto.ExecutionState.findByValue(iprot.readI32());
                struct.setStateIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SORTING_CRITERION
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.sortingCriterion = at.enfilo.def.transfer.dto.SortingCriterion.findByValue(iprot.readI32());
                struct.setSortingCriterionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTasksWithState_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.state != null) {
          oprot.writeFieldBegin(STATE_FIELD_DESC);
          oprot.writeI32(struct.state.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.sortingCriterion != null) {
          oprot.writeFieldBegin(SORTING_CRITERION_FIELD_DESC);
          oprot.writeI32(struct.sortingCriterion.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTasksWithState_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasksWithState_argsTupleScheme getScheme() {
        return new getAllTasksWithState_argsTupleScheme();
      }
    }

    private static class getAllTasksWithState_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllTasksWithState_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTasksWithState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetState()) {
          optionals.set(2);
        }
        if (struct.isSetSortingCriterion()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetState()) {
          oprot.writeI32(struct.state.getValue());
        }
        if (struct.isSetSortingCriterion()) {
          oprot.writeI32(struct.sortingCriterion.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTasksWithState_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.state = at.enfilo.def.transfer.dto.ExecutionState.findByValue(iprot.readI32());
          struct.setStateIsSet(true);
        }
        if (incoming.get(3)) {
          struct.sortingCriterion = at.enfilo.def.transfer.dto.SortingCriterion.findByValue(iprot.readI32());
          struct.setSortingCriterionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllTasksWithState_result implements org.apache.thrift.TBase<getAllTasksWithState_result, getAllTasksWithState_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllTasksWithState_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllTasksWithState_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllTasksWithState_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllTasksWithState_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllTasksWithState_result.class, metaDataMap);
    }

    public getAllTasksWithState_result() {
    }

    public getAllTasksWithState_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllTasksWithState_result(getAllTasksWithState_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAllTasksWithState_result deepCopy() {
      return new getAllTasksWithState_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAllTasksWithState_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllTasksWithState_result)
        return this.equals((getAllTasksWithState_result)that);
      return false;
    }

    public boolean equals(getAllTasksWithState_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllTasksWithState_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllTasksWithState_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllTasksWithState_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasksWithState_resultStandardScheme getScheme() {
        return new getAllTasksWithState_resultStandardScheme();
      }
    }

    private static class getAllTasksWithState_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllTasksWithState_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllTasksWithState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllTasksWithState_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllTasksWithState_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllTasksWithState_resultTupleScheme getScheme() {
        return new getAllTasksWithState_resultTupleScheme();
      }
    }

    private static class getAllTasksWithState_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllTasksWithState_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllTasksWithState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllTasksWithState_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createTask_args implements org.apache.thrift.TBase<createTask_args, createTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<createTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTask_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField OBJECTIVE_ROUTINE_FIELD_DESC = new org.apache.thrift.protocol.TField("objectiveRoutine", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createTask_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createTask_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      OBJECTIVE_ROUTINE((short)3, "objectiveRoutine");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // OBJECTIVE_ROUTINE
            return OBJECTIVE_ROUTINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.OBJECTIVE_ROUTINE, new org.apache.thrift.meta_data.FieldMetaData("objectiveRoutine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.RoutineInstanceDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTask_args.class, metaDataMap);
    }

    public createTask_args() {
    }

    public createTask_args(
      java.lang.String pId,
      java.lang.String jId,
      at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.objectiveRoutine = objectiveRoutine;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTask_args(createTask_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetObjectiveRoutine()) {
        this.objectiveRoutine = new at.enfilo.def.transfer.dto.RoutineInstanceDTO(other.objectiveRoutine);
      }
    }

    public createTask_args deepCopy() {
      return new createTask_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.objectiveRoutine = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public createTask_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public createTask_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public at.enfilo.def.transfer.dto.RoutineInstanceDTO getObjectiveRoutine() {
      return this.objectiveRoutine;
    }

    public createTask_args setObjectiveRoutine(at.enfilo.def.transfer.dto.RoutineInstanceDTO objectiveRoutine) {
      this.objectiveRoutine = objectiveRoutine;
      return this;
    }

    public void unsetObjectiveRoutine() {
      this.objectiveRoutine = null;
    }

    /** Returns true if field objectiveRoutine is set (has been assigned a value) and false otherwise */
    public boolean isSetObjectiveRoutine() {
      return this.objectiveRoutine != null;
    }

    public void setObjectiveRoutineIsSet(boolean value) {
      if (!value) {
        this.objectiveRoutine = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case OBJECTIVE_ROUTINE:
        if (value == null) {
          unsetObjectiveRoutine();
        } else {
          setObjectiveRoutine((at.enfilo.def.transfer.dto.RoutineInstanceDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case OBJECTIVE_ROUTINE:
        return getObjectiveRoutine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case OBJECTIVE_ROUTINE:
        return isSetObjectiveRoutine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createTask_args)
        return this.equals((createTask_args)that);
      return false;
    }

    public boolean equals(createTask_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_objectiveRoutine = true && this.isSetObjectiveRoutine();
      boolean that_present_objectiveRoutine = true && that.isSetObjectiveRoutine();
      if (this_present_objectiveRoutine || that_present_objectiveRoutine) {
        if (!(this_present_objectiveRoutine && that_present_objectiveRoutine))
          return false;
        if (!this.objectiveRoutine.equals(that.objectiveRoutine))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetObjectiveRoutine()) ? 131071 : 524287);
      if (isSetObjectiveRoutine())
        hashCode = hashCode * 8191 + objectiveRoutine.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetObjectiveRoutine()).compareTo(other.isSetObjectiveRoutine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetObjectiveRoutine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.objectiveRoutine, other.objectiveRoutine);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createTask_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("objectiveRoutine:");
      if (this.objectiveRoutine == null) {
        sb.append("null");
      } else {
        sb.append(this.objectiveRoutine);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (objectiveRoutine != null) {
        objectiveRoutine.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTask_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTask_argsStandardScheme getScheme() {
        return new createTask_argsStandardScheme();
      }
    }

    private static class createTask_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // OBJECTIVE_ROUTINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.objectiveRoutine = new at.enfilo.def.transfer.dto.RoutineInstanceDTO();
                struct.objectiveRoutine.read(iprot);
                struct.setObjectiveRoutineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.objectiveRoutine != null) {
          oprot.writeFieldBegin(OBJECTIVE_ROUTINE_FIELD_DESC);
          struct.objectiveRoutine.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTask_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTask_argsTupleScheme getScheme() {
        return new createTask_argsTupleScheme();
      }
    }

    private static class createTask_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetObjectiveRoutine()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetObjectiveRoutine()) {
          struct.objectiveRoutine.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.objectiveRoutine = new at.enfilo.def.transfer.dto.RoutineInstanceDTO();
          struct.objectiveRoutine.read(iprot);
          struct.setObjectiveRoutineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createTask_result implements org.apache.thrift.TBase<createTask_result, createTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<createTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createTask_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createTask_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createTask_result.class, metaDataMap);
    }

    public createTask_result() {
    }

    public createTask_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createTask_result(createTask_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createTask_result deepCopy() {
      return new createTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createTask_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createTask_result)
        return this.equals((createTask_result)that);
      return false;
    }

    public boolean equals(createTask_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createTask_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTask_resultStandardScheme getScheme() {
        return new createTask_resultStandardScheme();
      }
    }

    private static class createTask_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createTask_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createTask_resultTupleScheme getScheme() {
        return new createTask_resultTupleScheme();
      }
    }

    private static class createTask_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTask_args implements org.apache.thrift.TBase<getTask_args, getTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTask_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTask_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTask_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public java.lang.String tId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      T_ID((short)3, "tId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // T_ID
            return T_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTask_args.class, metaDataMap);
    }

    public getTask_args() {
    }

    public getTask_args(
      java.lang.String pId,
      java.lang.String jId,
      java.lang.String tId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.tId = tId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTask_args(getTask_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetTId()) {
        this.tId = other.tId;
      }
    }

    public getTask_args deepCopy() {
      return new getTask_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.tId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getTask_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getTask_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public java.lang.String getTId() {
      return this.tId;
    }

    public getTask_args setTId(java.lang.String tId) {
      this.tId = tId;
      return this;
    }

    public void unsetTId() {
      this.tId = null;
    }

    /** Returns true if field tId is set (has been assigned a value) and false otherwise */
    public boolean isSetTId() {
      return this.tId != null;
    }

    public void setTIdIsSet(boolean value) {
      if (!value) {
        this.tId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetTId();
        } else {
          setTId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case T_ID:
        return getTId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case T_ID:
        return isSetTId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTask_args)
        return this.equals((getTask_args)that);
      return false;
    }

    public boolean equals(getTask_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_tId = true && this.isSetTId();
      boolean that_present_tId = true && that.isSetTId();
      if (this_present_tId || that_present_tId) {
        if (!(this_present_tId && that_present_tId))
          return false;
        if (!this.tId.equals(that.tId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTId()) ? 131071 : 524287);
      if (isSetTId())
        hashCode = hashCode * 8191 + tId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTId()).compareTo(other.isSetTId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tId, other.tId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTask_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tId:");
      if (this.tId == null) {
        sb.append("null");
      } else {
        sb.append(this.tId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTask_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTask_argsStandardScheme getScheme() {
        return new getTask_argsStandardScheme();
      }
    }

    private static class getTask_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tId = iprot.readString();
                struct.setTIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.tId != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.tId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTask_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTask_argsTupleScheme getScheme() {
        return new getTask_argsTupleScheme();
      }
    }

    private static class getTask_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetTId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetTId()) {
          oprot.writeString(struct.tId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tId = iprot.readString();
          struct.setTIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTask_result implements org.apache.thrift.TBase<getTask_result, getTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTask_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTask_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTask_result.class, metaDataMap);
    }

    public getTask_result() {
    }

    public getTask_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTask_result(getTask_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getTask_result deepCopy() {
      return new getTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getTask_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTask_result)
        return this.equals((getTask_result)that);
      return false;
    }

    public boolean equals(getTask_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTask_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTask_resultStandardScheme getScheme() {
        return new getTask_resultStandardScheme();
      }
    }

    private static class getTask_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTask_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTask_resultTupleScheme getScheme() {
        return new getTask_resultTupleScheme();
      }
    }

    private static class getTask_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTaskPartial_args implements org.apache.thrift.TBase<getTaskPartial_args, getTaskPartial_args._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskPartial_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskPartial_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tId", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField INCLUDE_IN_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeInParameters", org.apache.thrift.protocol.TType.BOOL, (short)4);
    private static final org.apache.thrift.protocol.TField INCLUDE_OUT_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("includeOutParameters", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTaskPartial_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTaskPartial_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public java.lang.String tId; // required
    public boolean includeInParameters; // required
    public boolean includeOutParameters; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      T_ID((short)3, "tId"),
      INCLUDE_IN_PARAMETERS((short)4, "includeInParameters"),
      INCLUDE_OUT_PARAMETERS((short)5, "includeOutParameters");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // T_ID
            return T_ID;
          case 4: // INCLUDE_IN_PARAMETERS
            return INCLUDE_IN_PARAMETERS;
          case 5: // INCLUDE_OUT_PARAMETERS
            return INCLUDE_OUT_PARAMETERS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __INCLUDEINPARAMETERS_ISSET_ID = 0;
    private static final int __INCLUDEOUTPARAMETERS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.INCLUDE_IN_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("includeInParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      tmpMap.put(_Fields.INCLUDE_OUT_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("includeOutParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskPartial_args.class, metaDataMap);
    }

    public getTaskPartial_args() {
    }

    public getTaskPartial_args(
      java.lang.String pId,
      java.lang.String jId,
      java.lang.String tId,
      boolean includeInParameters,
      boolean includeOutParameters)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.tId = tId;
      this.includeInParameters = includeInParameters;
      setIncludeInParametersIsSet(true);
      this.includeOutParameters = includeOutParameters;
      setIncludeOutParametersIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskPartial_args(getTaskPartial_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetTId()) {
        this.tId = other.tId;
      }
      this.includeInParameters = other.includeInParameters;
      this.includeOutParameters = other.includeOutParameters;
    }

    public getTaskPartial_args deepCopy() {
      return new getTaskPartial_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.tId = null;
      setIncludeInParametersIsSet(false);
      this.includeInParameters = false;
      setIncludeOutParametersIsSet(false);
      this.includeOutParameters = false;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getTaskPartial_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public getTaskPartial_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public java.lang.String getTId() {
      return this.tId;
    }

    public getTaskPartial_args setTId(java.lang.String tId) {
      this.tId = tId;
      return this;
    }

    public void unsetTId() {
      this.tId = null;
    }

    /** Returns true if field tId is set (has been assigned a value) and false otherwise */
    public boolean isSetTId() {
      return this.tId != null;
    }

    public void setTIdIsSet(boolean value) {
      if (!value) {
        this.tId = null;
      }
    }

    public boolean isIncludeInParameters() {
      return this.includeInParameters;
    }

    public getTaskPartial_args setIncludeInParameters(boolean includeInParameters) {
      this.includeInParameters = includeInParameters;
      setIncludeInParametersIsSet(true);
      return this;
    }

    public void unsetIncludeInParameters() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCLUDEINPARAMETERS_ISSET_ID);
    }

    /** Returns true if field includeInParameters is set (has been assigned a value) and false otherwise */
    public boolean isSetIncludeInParameters() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCLUDEINPARAMETERS_ISSET_ID);
    }

    public void setIncludeInParametersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCLUDEINPARAMETERS_ISSET_ID, value);
    }

    public boolean isIncludeOutParameters() {
      return this.includeOutParameters;
    }

    public getTaskPartial_args setIncludeOutParameters(boolean includeOutParameters) {
      this.includeOutParameters = includeOutParameters;
      setIncludeOutParametersIsSet(true);
      return this;
    }

    public void unsetIncludeOutParameters() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __INCLUDEOUTPARAMETERS_ISSET_ID);
    }

    /** Returns true if field includeOutParameters is set (has been assigned a value) and false otherwise */
    public boolean isSetIncludeOutParameters() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __INCLUDEOUTPARAMETERS_ISSET_ID);
    }

    public void setIncludeOutParametersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __INCLUDEOUTPARAMETERS_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetTId();
        } else {
          setTId((java.lang.String)value);
        }
        break;

      case INCLUDE_IN_PARAMETERS:
        if (value == null) {
          unsetIncludeInParameters();
        } else {
          setIncludeInParameters((java.lang.Boolean)value);
        }
        break;

      case INCLUDE_OUT_PARAMETERS:
        if (value == null) {
          unsetIncludeOutParameters();
        } else {
          setIncludeOutParameters((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case T_ID:
        return getTId();

      case INCLUDE_IN_PARAMETERS:
        return isIncludeInParameters();

      case INCLUDE_OUT_PARAMETERS:
        return isIncludeOutParameters();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case T_ID:
        return isSetTId();
      case INCLUDE_IN_PARAMETERS:
        return isSetIncludeInParameters();
      case INCLUDE_OUT_PARAMETERS:
        return isSetIncludeOutParameters();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskPartial_args)
        return this.equals((getTaskPartial_args)that);
      return false;
    }

    public boolean equals(getTaskPartial_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_tId = true && this.isSetTId();
      boolean that_present_tId = true && that.isSetTId();
      if (this_present_tId || that_present_tId) {
        if (!(this_present_tId && that_present_tId))
          return false;
        if (!this.tId.equals(that.tId))
          return false;
      }

      boolean this_present_includeInParameters = true;
      boolean that_present_includeInParameters = true;
      if (this_present_includeInParameters || that_present_includeInParameters) {
        if (!(this_present_includeInParameters && that_present_includeInParameters))
          return false;
        if (this.includeInParameters != that.includeInParameters)
          return false;
      }

      boolean this_present_includeOutParameters = true;
      boolean that_present_includeOutParameters = true;
      if (this_present_includeOutParameters || that_present_includeOutParameters) {
        if (!(this_present_includeOutParameters && that_present_includeOutParameters))
          return false;
        if (this.includeOutParameters != that.includeOutParameters)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTId()) ? 131071 : 524287);
      if (isSetTId())
        hashCode = hashCode * 8191 + tId.hashCode();

      hashCode = hashCode * 8191 + ((includeInParameters) ? 131071 : 524287);

      hashCode = hashCode * 8191 + ((includeOutParameters) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(getTaskPartial_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTId()).compareTo(other.isSetTId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tId, other.tId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIncludeInParameters()).compareTo(other.isSetIncludeInParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncludeInParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeInParameters, other.includeInParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIncludeOutParameters()).compareTo(other.isSetIncludeOutParameters());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIncludeOutParameters()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.includeOutParameters, other.includeOutParameters);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTaskPartial_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tId:");
      if (this.tId == null) {
        sb.append("null");
      } else {
        sb.append(this.tId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("includeInParameters:");
      sb.append(this.includeInParameters);
      first = false;
      if (!first) sb.append(", ");
      sb.append("includeOutParameters:");
      sb.append(this.includeOutParameters);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskPartial_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTaskPartial_argsStandardScheme getScheme() {
        return new getTaskPartial_argsStandardScheme();
      }
    }

    private static class getTaskPartial_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTaskPartial_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskPartial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tId = iprot.readString();
                struct.setTIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // INCLUDE_IN_PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.includeInParameters = iprot.readBool();
                struct.setIncludeInParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // INCLUDE_OUT_PARAMETERS
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.includeOutParameters = iprot.readBool();
                struct.setIncludeOutParametersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskPartial_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.tId != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.tId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(INCLUDE_IN_PARAMETERS_FIELD_DESC);
        oprot.writeBool(struct.includeInParameters);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(INCLUDE_OUT_PARAMETERS_FIELD_DESC);
        oprot.writeBool(struct.includeOutParameters);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskPartial_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTaskPartial_argsTupleScheme getScheme() {
        return new getTaskPartial_argsTupleScheme();
      }
    }

    private static class getTaskPartial_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTaskPartial_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskPartial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetTId()) {
          optionals.set(2);
        }
        if (struct.isSetIncludeInParameters()) {
          optionals.set(3);
        }
        if (struct.isSetIncludeOutParameters()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetTId()) {
          oprot.writeString(struct.tId);
        }
        if (struct.isSetIncludeInParameters()) {
          oprot.writeBool(struct.includeInParameters);
        }
        if (struct.isSetIncludeOutParameters()) {
          oprot.writeBool(struct.includeOutParameters);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskPartial_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tId = iprot.readString();
          struct.setTIdIsSet(true);
        }
        if (incoming.get(3)) {
          struct.includeInParameters = iprot.readBool();
          struct.setIncludeInParametersIsSet(true);
        }
        if (incoming.get(4)) {
          struct.includeOutParameters = iprot.readBool();
          struct.setIncludeOutParametersIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getTaskPartial_result implements org.apache.thrift.TBase<getTaskPartial_result, getTaskPartial_result._Fields>, java.io.Serializable, Cloneable, Comparable<getTaskPartial_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getTaskPartial_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getTaskPartial_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getTaskPartial_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getTaskPartial_result.class, metaDataMap);
    }

    public getTaskPartial_result() {
    }

    public getTaskPartial_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getTaskPartial_result(getTaskPartial_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getTaskPartial_result deepCopy() {
      return new getTaskPartial_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getTaskPartial_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getTaskPartial_result)
        return this.equals((getTaskPartial_result)that);
      return false;
    }

    public boolean equals(getTaskPartial_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getTaskPartial_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getTaskPartial_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getTaskPartial_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTaskPartial_resultStandardScheme getScheme() {
        return new getTaskPartial_resultStandardScheme();
      }
    }

    private static class getTaskPartial_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getTaskPartial_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getTaskPartial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getTaskPartial_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getTaskPartial_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getTaskPartial_resultTupleScheme getScheme() {
        return new getTaskPartial_resultTupleScheme();
      }
    }

    private static class getTaskPartial_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getTaskPartial_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getTaskPartial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getTaskPartial_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markJobAsComplete_args implements org.apache.thrift.TBase<markJobAsComplete_args, markJobAsComplete_args._Fields>, java.io.Serializable, Cloneable, Comparable<markJobAsComplete_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markJobAsComplete_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markJobAsComplete_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markJobAsComplete_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markJobAsComplete_args.class, metaDataMap);
    }

    public markJobAsComplete_args() {
    }

    public markJobAsComplete_args(
      java.lang.String pId,
      java.lang.String jId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markJobAsComplete_args(markJobAsComplete_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
    }

    public markJobAsComplete_args deepCopy() {
      return new markJobAsComplete_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public markJobAsComplete_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public markJobAsComplete_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markJobAsComplete_args)
        return this.equals((markJobAsComplete_args)that);
      return false;
    }

    public boolean equals(markJobAsComplete_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markJobAsComplete_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markJobAsComplete_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markJobAsComplete_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markJobAsComplete_argsStandardScheme getScheme() {
        return new markJobAsComplete_argsStandardScheme();
      }
    }

    private static class markJobAsComplete_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<markJobAsComplete_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markJobAsComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markJobAsComplete_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markJobAsComplete_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markJobAsComplete_argsTupleScheme getScheme() {
        return new markJobAsComplete_argsTupleScheme();
      }
    }

    private static class markJobAsComplete_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<markJobAsComplete_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markJobAsComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markJobAsComplete_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class markJobAsComplete_result implements org.apache.thrift.TBase<markJobAsComplete_result, markJobAsComplete_result._Fields>, java.io.Serializable, Cloneable, Comparable<markJobAsComplete_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("markJobAsComplete_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new markJobAsComplete_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new markJobAsComplete_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(markJobAsComplete_result.class, metaDataMap);
    }

    public markJobAsComplete_result() {
    }

    public markJobAsComplete_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public markJobAsComplete_result(markJobAsComplete_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public markJobAsComplete_result deepCopy() {
      return new markJobAsComplete_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public markJobAsComplete_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof markJobAsComplete_result)
        return this.equals((markJobAsComplete_result)that);
      return false;
    }

    public boolean equals(markJobAsComplete_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(markJobAsComplete_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("markJobAsComplete_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class markJobAsComplete_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markJobAsComplete_resultStandardScheme getScheme() {
        return new markJobAsComplete_resultStandardScheme();
      }
    }

    private static class markJobAsComplete_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<markJobAsComplete_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, markJobAsComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, markJobAsComplete_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class markJobAsComplete_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public markJobAsComplete_resultTupleScheme getScheme() {
        return new markJobAsComplete_resultTupleScheme();
      }
    }

    private static class markJobAsComplete_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<markJobAsComplete_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, markJobAsComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, markJobAsComplete_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortJob_args implements org.apache.thrift.TBase<abortJob_args, abortJob_args._Fields>, java.io.Serializable, Cloneable, Comparable<abortJob_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortJob_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortJob_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortJob_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortJob_args.class, metaDataMap);
    }

    public abortJob_args() {
    }

    public abortJob_args(
      java.lang.String pId,
      java.lang.String jId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortJob_args(abortJob_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
    }

    public abortJob_args deepCopy() {
      return new abortJob_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public abortJob_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public abortJob_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortJob_args)
        return this.equals((abortJob_args)that);
      return false;
    }

    public boolean equals(abortJob_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortJob_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortJob_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortJob_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortJob_argsStandardScheme getScheme() {
        return new abortJob_argsStandardScheme();
      }
    }

    private static class abortJob_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortJob_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortJob_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortJob_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortJob_argsTupleScheme getScheme() {
        return new abortJob_argsTupleScheme();
      }
    }

    private static class abortJob_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortJob_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortJob_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortJob_result implements org.apache.thrift.TBase<abortJob_result, abortJob_result._Fields>, java.io.Serializable, Cloneable, Comparable<abortJob_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortJob_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortJob_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortJob_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortJob_result.class, metaDataMap);
    }

    public abortJob_result() {
    }

    public abortJob_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortJob_result(abortJob_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public abortJob_result deepCopy() {
      return new abortJob_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public abortJob_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortJob_result)
        return this.equals((abortJob_result)that);
      return false;
    }

    public boolean equals(abortJob_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortJob_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortJob_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortJob_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortJob_resultStandardScheme getScheme() {
        return new abortJob_resultStandardScheme();
      }
    }

    private static class abortJob_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortJob_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortJob_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortJob_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortJob_resultTupleScheme getScheme() {
        return new abortJob_resultTupleScheme();
      }
    }

    private static class abortJob_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortJob_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortJob_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortTask_args implements org.apache.thrift.TBase<abortTask_args, abortTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<abortTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortTask_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortTask_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortTask_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public java.lang.String tId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      T_ID((short)3, "tId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // T_ID
            return T_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortTask_args.class, metaDataMap);
    }

    public abortTask_args() {
    }

    public abortTask_args(
      java.lang.String pId,
      java.lang.String jId,
      java.lang.String tId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.tId = tId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortTask_args(abortTask_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetTId()) {
        this.tId = other.tId;
      }
    }

    public abortTask_args deepCopy() {
      return new abortTask_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.tId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public abortTask_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public abortTask_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public java.lang.String getTId() {
      return this.tId;
    }

    public abortTask_args setTId(java.lang.String tId) {
      this.tId = tId;
      return this;
    }

    public void unsetTId() {
      this.tId = null;
    }

    /** Returns true if field tId is set (has been assigned a value) and false otherwise */
    public boolean isSetTId() {
      return this.tId != null;
    }

    public void setTIdIsSet(boolean value) {
      if (!value) {
        this.tId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetTId();
        } else {
          setTId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case T_ID:
        return getTId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case T_ID:
        return isSetTId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortTask_args)
        return this.equals((abortTask_args)that);
      return false;
    }

    public boolean equals(abortTask_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_tId = true && this.isSetTId();
      boolean that_present_tId = true && that.isSetTId();
      if (this_present_tId || that_present_tId) {
        if (!(this_present_tId && that_present_tId))
          return false;
        if (!this.tId.equals(that.tId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTId()) ? 131071 : 524287);
      if (isSetTId())
        hashCode = hashCode * 8191 + tId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTId()).compareTo(other.isSetTId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tId, other.tId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortTask_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tId:");
      if (this.tId == null) {
        sb.append("null");
      } else {
        sb.append(this.tId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortTask_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortTask_argsStandardScheme getScheme() {
        return new abortTask_argsStandardScheme();
      }
    }

    private static class abortTask_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tId = iprot.readString();
                struct.setTIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.tId != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.tId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortTask_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortTask_argsTupleScheme getScheme() {
        return new abortTask_argsTupleScheme();
      }
    }

    private static class abortTask_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetTId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetTId()) {
          oprot.writeString(struct.tId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tId = iprot.readString();
          struct.setTIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortTask_result implements org.apache.thrift.TBase<abortTask_result, abortTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<abortTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortTask_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortTask_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortTask_result.class, metaDataMap);
    }

    public abortTask_result() {
    }

    public abortTask_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortTask_result(abortTask_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public abortTask_result deepCopy() {
      return new abortTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public abortTask_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortTask_result)
        return this.equals((abortTask_result)that);
      return false;
    }

    public boolean equals(abortTask_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortTask_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortTask_resultStandardScheme getScheme() {
        return new abortTask_resultStandardScheme();
      }
    }

    private static class abortTask_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortTask_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortTask_resultTupleScheme getScheme() {
        return new abortTask_resultTupleScheme();
      }
    }

    private static class abortTask_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reRunTask_args implements org.apache.thrift.TBase<reRunTask_args, reRunTask_args._Fields>, java.io.Serializable, Cloneable, Comparable<reRunTask_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reRunTask_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField J_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("jId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField T_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("tId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reRunTask_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reRunTask_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String jId; // required
    public java.lang.String tId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      J_ID((short)2, "jId"),
      T_ID((short)3, "tId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // J_ID
            return J_ID;
          case 3: // T_ID
            return T_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.J_ID, new org.apache.thrift.meta_data.FieldMetaData("jId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.T_ID, new org.apache.thrift.meta_data.FieldMetaData("tId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reRunTask_args.class, metaDataMap);
    }

    public reRunTask_args() {
    }

    public reRunTask_args(
      java.lang.String pId,
      java.lang.String jId,
      java.lang.String tId)
    {
      this();
      this.pId = pId;
      this.jId = jId;
      this.tId = tId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reRunTask_args(reRunTask_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetJId()) {
        this.jId = other.jId;
      }
      if (other.isSetTId()) {
        this.tId = other.tId;
      }
    }

    public reRunTask_args deepCopy() {
      return new reRunTask_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.jId = null;
      this.tId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public reRunTask_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getJId() {
      return this.jId;
    }

    public reRunTask_args setJId(java.lang.String jId) {
      this.jId = jId;
      return this;
    }

    public void unsetJId() {
      this.jId = null;
    }

    /** Returns true if field jId is set (has been assigned a value) and false otherwise */
    public boolean isSetJId() {
      return this.jId != null;
    }

    public void setJIdIsSet(boolean value) {
      if (!value) {
        this.jId = null;
      }
    }

    public java.lang.String getTId() {
      return this.tId;
    }

    public reRunTask_args setTId(java.lang.String tId) {
      this.tId = tId;
      return this;
    }

    public void unsetTId() {
      this.tId = null;
    }

    /** Returns true if field tId is set (has been assigned a value) and false otherwise */
    public boolean isSetTId() {
      return this.tId != null;
    }

    public void setTIdIsSet(boolean value) {
      if (!value) {
        this.tId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case J_ID:
        if (value == null) {
          unsetJId();
        } else {
          setJId((java.lang.String)value);
        }
        break;

      case T_ID:
        if (value == null) {
          unsetTId();
        } else {
          setTId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case J_ID:
        return getJId();

      case T_ID:
        return getTId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case J_ID:
        return isSetJId();
      case T_ID:
        return isSetTId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reRunTask_args)
        return this.equals((reRunTask_args)that);
      return false;
    }

    public boolean equals(reRunTask_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_jId = true && this.isSetJId();
      boolean that_present_jId = true && that.isSetJId();
      if (this_present_jId || that_present_jId) {
        if (!(this_present_jId && that_present_jId))
          return false;
        if (!this.jId.equals(that.jId))
          return false;
      }

      boolean this_present_tId = true && this.isSetTId();
      boolean that_present_tId = true && that.isSetTId();
      if (this_present_tId || that_present_tId) {
        if (!(this_present_tId && that_present_tId))
          return false;
        if (!this.tId.equals(that.tId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetJId()) ? 131071 : 524287);
      if (isSetJId())
        hashCode = hashCode * 8191 + jId.hashCode();

      hashCode = hashCode * 8191 + ((isSetTId()) ? 131071 : 524287);
      if (isSetTId())
        hashCode = hashCode * 8191 + tId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reRunTask_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetJId()).compareTo(other.isSetJId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetJId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.jId, other.jId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTId()).compareTo(other.isSetTId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.tId, other.tId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reRunTask_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("jId:");
      if (this.jId == null) {
        sb.append("null");
      } else {
        sb.append(this.jId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("tId:");
      if (this.tId == null) {
        sb.append("null");
      } else {
        sb.append(this.tId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reRunTask_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reRunTask_argsStandardScheme getScheme() {
        return new reRunTask_argsStandardScheme();
      }
    }

    private static class reRunTask_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<reRunTask_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reRunTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // J_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.jId = iprot.readString();
                struct.setJIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // T_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.tId = iprot.readString();
                struct.setTIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reRunTask_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.jId != null) {
          oprot.writeFieldBegin(J_ID_FIELD_DESC);
          oprot.writeString(struct.jId);
          oprot.writeFieldEnd();
        }
        if (struct.tId != null) {
          oprot.writeFieldBegin(T_ID_FIELD_DESC);
          oprot.writeString(struct.tId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reRunTask_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reRunTask_argsTupleScheme getScheme() {
        return new reRunTask_argsTupleScheme();
      }
    }

    private static class reRunTask_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<reRunTask_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reRunTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetJId()) {
          optionals.set(1);
        }
        if (struct.isSetTId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetJId()) {
          oprot.writeString(struct.jId);
        }
        if (struct.isSetTId()) {
          oprot.writeString(struct.tId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reRunTask_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.jId = iprot.readString();
          struct.setJIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.tId = iprot.readString();
          struct.setTIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class reRunTask_result implements org.apache.thrift.TBase<reRunTask_result, reRunTask_result._Fields>, java.io.Serializable, Cloneable, Comparable<reRunTask_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("reRunTask_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new reRunTask_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new reRunTask_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(reRunTask_result.class, metaDataMap);
    }

    public reRunTask_result() {
    }

    public reRunTask_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public reRunTask_result(reRunTask_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public reRunTask_result deepCopy() {
      return new reRunTask_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public reRunTask_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof reRunTask_result)
        return this.equals((reRunTask_result)that);
      return false;
    }

    public boolean equals(reRunTask_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(reRunTask_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("reRunTask_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class reRunTask_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reRunTask_resultStandardScheme getScheme() {
        return new reRunTask_resultStandardScheme();
      }
    }

    private static class reRunTask_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<reRunTask_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, reRunTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, reRunTask_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class reRunTask_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public reRunTask_resultTupleScheme getScheme() {
        return new reRunTask_resultTupleScheme();
      }
    }

    private static class reRunTask_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<reRunTask_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, reRunTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, reRunTask_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllSharedResources_args implements org.apache.thrift.TBase<getAllSharedResources_args, getAllSharedResources_args._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSharedResources_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSharedResources_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllSharedResources_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllSharedResources_argsTupleSchemeFactory();

    public java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSharedResources_args.class, metaDataMap);
    }

    public getAllSharedResources_args() {
    }

    public getAllSharedResources_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSharedResources_args(getAllSharedResources_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public getAllSharedResources_args deepCopy() {
      return new getAllSharedResources_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getAllSharedResources_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSharedResources_args)
        return this.equals((getAllSharedResources_args)that);
      return false;
    }

    public boolean equals(getAllSharedResources_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllSharedResources_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllSharedResources_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSharedResources_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSharedResources_argsStandardScheme getScheme() {
        return new getAllSharedResources_argsStandardScheme();
      }
    }

    private static class getAllSharedResources_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllSharedResources_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSharedResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSharedResources_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSharedResources_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSharedResources_argsTupleScheme getScheme() {
        return new getAllSharedResources_argsTupleScheme();
      }
    }

    private static class getAllSharedResources_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllSharedResources_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSharedResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSharedResources_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getAllSharedResources_result implements org.apache.thrift.TBase<getAllSharedResources_result, getAllSharedResources_result._Fields>, java.io.Serializable, Cloneable, Comparable<getAllSharedResources_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getAllSharedResources_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getAllSharedResources_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getAllSharedResources_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getAllSharedResources_result.class, metaDataMap);
    }

    public getAllSharedResources_result() {
    }

    public getAllSharedResources_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getAllSharedResources_result(getAllSharedResources_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getAllSharedResources_result deepCopy() {
      return new getAllSharedResources_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getAllSharedResources_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getAllSharedResources_result)
        return this.equals((getAllSharedResources_result)that);
      return false;
    }

    public boolean equals(getAllSharedResources_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getAllSharedResources_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getAllSharedResources_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getAllSharedResources_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSharedResources_resultStandardScheme getScheme() {
        return new getAllSharedResources_resultStandardScheme();
      }
    }

    private static class getAllSharedResources_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getAllSharedResources_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getAllSharedResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getAllSharedResources_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getAllSharedResources_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getAllSharedResources_resultTupleScheme getScheme() {
        return new getAllSharedResources_resultTupleScheme();
      }
    }

    private static class getAllSharedResources_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getAllSharedResources_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getAllSharedResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getAllSharedResources_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createSharedResource_args implements org.apache.thrift.TBase<createSharedResource_args, createSharedResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<createSharedResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSharedResource_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DATA_TYPE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("dataTypeId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createSharedResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createSharedResource_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String dataTypeId; // required
    public java.nio.ByteBuffer data; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      DATA_TYPE_ID((short)2, "dataTypeId"),
      DATA((short)3, "data");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // DATA_TYPE_ID
            return DATA_TYPE_ID;
          case 3: // DATA
            return DATA;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.DATA_TYPE_ID, new org.apache.thrift.meta_data.FieldMetaData("dataTypeId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , true)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSharedResource_args.class, metaDataMap);
    }

    public createSharedResource_args() {
    }

    public createSharedResource_args(
      java.lang.String pId,
      java.lang.String dataTypeId,
      java.nio.ByteBuffer data)
    {
      this();
      this.pId = pId;
      this.dataTypeId = dataTypeId;
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSharedResource_args(createSharedResource_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetDataTypeId()) {
        this.dataTypeId = other.dataTypeId;
      }
      if (other.isSetData()) {
        this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
      }
    }

    public createSharedResource_args deepCopy() {
      return new createSharedResource_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.dataTypeId = null;
      this.data = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public createSharedResource_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getDataTypeId() {
      return this.dataTypeId;
    }

    public createSharedResource_args setDataTypeId(java.lang.String dataTypeId) {
      this.dataTypeId = dataTypeId;
      return this;
    }

    public void unsetDataTypeId() {
      this.dataTypeId = null;
    }

    /** Returns true if field dataTypeId is set (has been assigned a value) and false otherwise */
    public boolean isSetDataTypeId() {
      return this.dataTypeId != null;
    }

    public void setDataTypeIdIsSet(boolean value) {
      if (!value) {
        this.dataTypeId = null;
      }
    }

    public byte[] getData() {
      setData(org.apache.thrift.TBaseHelper.rightSize(data));
      return data == null ? null : data.array();
    }

    public java.nio.ByteBuffer bufferForData() {
      return org.apache.thrift.TBaseHelper.copyBinary(data);
    }

    public createSharedResource_args setData(byte[] data) {
      this.data = data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(data.clone());
      return this;
    }

    public createSharedResource_args setData(java.nio.ByteBuffer data) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
      return this;
    }

    public void unsetData() {
      this.data = null;
    }

    /** Returns true if field data is set (has been assigned a value) and false otherwise */
    public boolean isSetData() {
      return this.data != null;
    }

    public void setDataIsSet(boolean value) {
      if (!value) {
        this.data = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case DATA_TYPE_ID:
        if (value == null) {
          unsetDataTypeId();
        } else {
          setDataTypeId((java.lang.String)value);
        }
        break;

      case DATA:
        if (value == null) {
          unsetData();
        } else {
          if (value instanceof byte[]) {
            setData((byte[])value);
          } else {
            setData((java.nio.ByteBuffer)value);
          }
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case DATA_TYPE_ID:
        return getDataTypeId();

      case DATA:
        return getData();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case DATA_TYPE_ID:
        return isSetDataTypeId();
      case DATA:
        return isSetData();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createSharedResource_args)
        return this.equals((createSharedResource_args)that);
      return false;
    }

    public boolean equals(createSharedResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_dataTypeId = true && this.isSetDataTypeId();
      boolean that_present_dataTypeId = true && that.isSetDataTypeId();
      if (this_present_dataTypeId || that_present_dataTypeId) {
        if (!(this_present_dataTypeId && that_present_dataTypeId))
          return false;
        if (!this.dataTypeId.equals(that.dataTypeId))
          return false;
      }

      boolean this_present_data = true && this.isSetData();
      boolean that_present_data = true && that.isSetData();
      if (this_present_data || that_present_data) {
        if (!(this_present_data && that_present_data))
          return false;
        if (!this.data.equals(that.data))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetDataTypeId()) ? 131071 : 524287);
      if (isSetDataTypeId())
        hashCode = hashCode * 8191 + dataTypeId.hashCode();

      hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
      if (isSetData())
        hashCode = hashCode * 8191 + data.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createSharedResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDataTypeId()).compareTo(other.isSetDataTypeId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDataTypeId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.dataTypeId, other.dataTypeId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetData()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createSharedResource_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("dataTypeId:");
      if (this.dataTypeId == null) {
        sb.append("null");
      } else {
        sb.append(this.dataTypeId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSharedResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSharedResource_argsStandardScheme getScheme() {
        return new createSharedResource_argsStandardScheme();
      }
    }

    private static class createSharedResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createSharedResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DATA_TYPE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.dataTypeId = iprot.readString();
                struct.setDataTypeIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // DATA
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.data = iprot.readBinary();
                struct.setDataIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSharedResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.dataTypeId != null) {
          oprot.writeFieldBegin(DATA_TYPE_ID_FIELD_DESC);
          oprot.writeString(struct.dataTypeId);
          oprot.writeFieldEnd();
        }
        if (struct.data != null) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSharedResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSharedResource_argsTupleScheme getScheme() {
        return new createSharedResource_argsTupleScheme();
      }
    }

    private static class createSharedResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createSharedResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetDataTypeId()) {
          optionals.set(1);
        }
        if (struct.isSetData()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetDataTypeId()) {
          oprot.writeString(struct.dataTypeId);
        }
        if (struct.isSetData()) {
          oprot.writeBinary(struct.data);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.dataTypeId = iprot.readString();
          struct.setDataTypeIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.data = iprot.readBinary();
          struct.setDataIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createSharedResource_result implements org.apache.thrift.TBase<createSharedResource_result, createSharedResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<createSharedResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createSharedResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createSharedResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createSharedResource_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createSharedResource_result.class, metaDataMap);
    }

    public createSharedResource_result() {
    }

    public createSharedResource_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createSharedResource_result(createSharedResource_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createSharedResource_result deepCopy() {
      return new createSharedResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createSharedResource_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createSharedResource_result)
        return this.equals((createSharedResource_result)that);
      return false;
    }

    public boolean equals(createSharedResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createSharedResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createSharedResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createSharedResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSharedResource_resultStandardScheme getScheme() {
        return new createSharedResource_resultStandardScheme();
      }
    }

    private static class createSharedResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createSharedResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createSharedResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createSharedResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createSharedResource_resultTupleScheme getScheme() {
        return new createSharedResource_resultTupleScheme();
      }
    }

    private static class createSharedResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createSharedResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSharedResource_args implements org.apache.thrift.TBase<getSharedResource_args, getSharedResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<getSharedResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSharedResource_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField R_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSharedResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSharedResource_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String rId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      R_ID((short)2, "rId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // R_ID
            return R_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.R_ID, new org.apache.thrift.meta_data.FieldMetaData("rId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSharedResource_args.class, metaDataMap);
    }

    public getSharedResource_args() {
    }

    public getSharedResource_args(
      java.lang.String pId,
      java.lang.String rId)
    {
      this();
      this.pId = pId;
      this.rId = rId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSharedResource_args(getSharedResource_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetRId()) {
        this.rId = other.rId;
      }
    }

    public getSharedResource_args deepCopy() {
      return new getSharedResource_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.rId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public getSharedResource_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getRId() {
      return this.rId;
    }

    public getSharedResource_args setRId(java.lang.String rId) {
      this.rId = rId;
      return this;
    }

    public void unsetRId() {
      this.rId = null;
    }

    /** Returns true if field rId is set (has been assigned a value) and false otherwise */
    public boolean isSetRId() {
      return this.rId != null;
    }

    public void setRIdIsSet(boolean value) {
      if (!value) {
        this.rId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case R_ID:
        if (value == null) {
          unsetRId();
        } else {
          setRId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case R_ID:
        return getRId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case R_ID:
        return isSetRId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSharedResource_args)
        return this.equals((getSharedResource_args)that);
      return false;
    }

    public boolean equals(getSharedResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_rId = true && this.isSetRId();
      boolean that_present_rId = true && that.isSetRId();
      if (this_present_rId || that_present_rId) {
        if (!(this_present_rId && that_present_rId))
          return false;
        if (!this.rId.equals(that.rId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRId()) ? 131071 : 524287);
      if (isSetRId())
        hashCode = hashCode * 8191 + rId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSharedResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRId()).compareTo(other.isSetRId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rId, other.rId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSharedResource_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rId:");
      if (this.rId == null) {
        sb.append("null");
      } else {
        sb.append(this.rId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSharedResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSharedResource_argsStandardScheme getScheme() {
        return new getSharedResource_argsStandardScheme();
      }
    }

    private static class getSharedResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSharedResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // R_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rId = iprot.readString();
                struct.setRIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSharedResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.rId != null) {
          oprot.writeFieldBegin(R_ID_FIELD_DESC);
          oprot.writeString(struct.rId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSharedResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSharedResource_argsTupleScheme getScheme() {
        return new getSharedResource_argsTupleScheme();
      }
    }

    private static class getSharedResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSharedResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetRId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetRId()) {
          oprot.writeString(struct.rId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rId = iprot.readString();
          struct.setRIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getSharedResource_result implements org.apache.thrift.TBase<getSharedResource_result, getSharedResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<getSharedResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getSharedResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getSharedResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getSharedResource_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getSharedResource_result.class, metaDataMap);
    }

    public getSharedResource_result() {
    }

    public getSharedResource_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getSharedResource_result(getSharedResource_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getSharedResource_result deepCopy() {
      return new getSharedResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getSharedResource_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getSharedResource_result)
        return this.equals((getSharedResource_result)that);
      return false;
    }

    public boolean equals(getSharedResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getSharedResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getSharedResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getSharedResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSharedResource_resultStandardScheme getScheme() {
        return new getSharedResource_resultStandardScheme();
      }
    }

    private static class getSharedResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getSharedResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getSharedResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getSharedResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getSharedResource_resultTupleScheme getScheme() {
        return new getSharedResource_resultTupleScheme();
      }
    }

    private static class getSharedResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getSharedResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSharedResource_args implements org.apache.thrift.TBase<deleteSharedResource_args, deleteSharedResource_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSharedResource_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSharedResource_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField R_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSharedResource_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSharedResource_argsTupleSchemeFactory();

    public java.lang.String pId; // required
    public java.lang.String rId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId"),
      R_ID((short)2, "rId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          case 2: // R_ID
            return R_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.R_ID, new org.apache.thrift.meta_data.FieldMetaData("rId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSharedResource_args.class, metaDataMap);
    }

    public deleteSharedResource_args() {
    }

    public deleteSharedResource_args(
      java.lang.String pId,
      java.lang.String rId)
    {
      this();
      this.pId = pId;
      this.rId = rId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSharedResource_args(deleteSharedResource_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
      if (other.isSetRId()) {
        this.rId = other.rId;
      }
    }

    public deleteSharedResource_args deepCopy() {
      return new deleteSharedResource_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
      this.rId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public deleteSharedResource_args setPId(java.lang.String pId) {
      this.pId = pId;
      return this;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public java.lang.String getRId() {
      return this.rId;
    }

    public deleteSharedResource_args setRId(java.lang.String rId) {
      this.rId = rId;
      return this;
    }

    public void unsetRId() {
      this.rId = null;
    }

    /** Returns true if field rId is set (has been assigned a value) and false otherwise */
    public boolean isSetRId() {
      return this.rId != null;
    }

    public void setRIdIsSet(boolean value) {
      if (!value) {
        this.rId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      case R_ID:
        if (value == null) {
          unsetRId();
        } else {
          setRId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      case R_ID:
        return getRId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      case R_ID:
        return isSetRId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSharedResource_args)
        return this.equals((deleteSharedResource_args)that);
      return false;
    }

    public boolean equals(deleteSharedResource_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      boolean this_present_rId = true && this.isSetRId();
      boolean that_present_rId = true && that.isSetRId();
      if (this_present_rId || that_present_rId) {
        if (!(this_present_rId && that_present_rId))
          return false;
        if (!this.rId.equals(that.rId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      hashCode = hashCode * 8191 + ((isSetRId()) ? 131071 : 524287);
      if (isSetRId())
        hashCode = hashCode * 8191 + rId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSharedResource_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetRId()).compareTo(other.isSetRId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rId, other.rId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteSharedResource_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("rId:");
      if (this.rId == null) {
        sb.append("null");
      } else {
        sb.append(this.rId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSharedResource_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSharedResource_argsStandardScheme getScheme() {
        return new deleteSharedResource_argsStandardScheme();
      }
    }

    private static class deleteSharedResource_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSharedResource_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // R_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rId = iprot.readString();
                struct.setRIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSharedResource_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        if (struct.rId != null) {
          oprot.writeFieldBegin(R_ID_FIELD_DESC);
          oprot.writeString(struct.rId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSharedResource_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSharedResource_argsTupleScheme getScheme() {
        return new deleteSharedResource_argsTupleScheme();
      }
    }

    private static class deleteSharedResource_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSharedResource_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        if (struct.isSetRId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
        if (struct.isSetRId()) {
          oprot.writeString(struct.rId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSharedResource_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.rId = iprot.readString();
          struct.setRIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteSharedResource_result implements org.apache.thrift.TBase<deleteSharedResource_result, deleteSharedResource_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteSharedResource_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteSharedResource_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteSharedResource_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteSharedResource_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteSharedResource_result.class, metaDataMap);
    }

    public deleteSharedResource_result() {
    }

    public deleteSharedResource_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteSharedResource_result(deleteSharedResource_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteSharedResource_result deepCopy() {
      return new deleteSharedResource_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public deleteSharedResource_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteSharedResource_result)
        return this.equals((deleteSharedResource_result)that);
      return false;
    }

    public boolean equals(deleteSharedResource_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteSharedResource_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteSharedResource_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteSharedResource_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSharedResource_resultStandardScheme getScheme() {
        return new deleteSharedResource_resultStandardScheme();
      }
    }

    private static class deleteSharedResource_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteSharedResource_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteSharedResource_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteSharedResource_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteSharedResource_resultTupleScheme getScheme() {
        return new deleteSharedResource_resultTupleScheme();
      }
    }

    private static class deleteSharedResource_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteSharedResource_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteSharedResource_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
