apply plugin: 'application'

mainClassName = 'at.enfilo.def.manager.webservice.server.ManagerWebservice'

dependencies {
    compile project(':manager')
    compile project(':manager-api')
    compile project(':execlogic-api')
    compile project(':cluster-api')
    compile project(':library-admin-api')
    compile project(':communication')
}

shadowJar {
    exclude 'manager-webservice.yml'
    exclude 'log4j2.xml'
}

remotes {
    defHost {
        host = 'localhost'
        user = 'def'
        password = 'def'
    }
}

def webappDir = "$projectDir/../manager-webmanager"

// run 'gradle deploy -Phost=<ip>'
task deploy {
    doLast {
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            String host = project.getProperties().get('host')
            remotes.defHost.host = host

            println 'Try to deploy on ' + remotes.defHost

            session(remotes.defHost) {
                executeScript file('src/main/sh/stop.sh')
                executeScript file('src/main/sh/clean.sh')
                copy {
                    from "$buildDir/libs"
                    from "$buildDir/resources/main"
                    into "$buildDir/manager-webservice/"
                }
                copy {
                    from "$webappDir/dist"
                    into "$buildDir/manager-webservice/dist"
                }
                put from: "$buildDir/manager-webservice", into: "."
                executeScript file('src/main/sh/start.sh')
            }
        }
    }
}

task restart {
    doLast {
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            String host = project.getProperties().get('host')
            remotes.defHost.host = host

            println 'Try to restart on ' + remotes.defHost
            session(remotes.defHost) {
                executeScript file('src/main/sh/stop.sh')
                executeScript file('src/main/sh/start.sh')
            }
        }
    }
}

task buildAngular(type:Exec) {
    workingDir "$webappDir"
    inputs.dir "$webappDir"
    // Add task to the standard build group
    group = BasePlugin.BUILD_GROUP
    // ng doesn't exist as a file in windows -> ng.cmd
    if (System.getProperty("os.name").toUpperCase().contains("WINDOWS")){
        commandLine "ng.cmd", "build", "--prod"
    } else {
        commandLine "ng", "build", "--prod"
    }
}

deploy.dependsOn shadowJar
deploy.dependsOn buildAngular
