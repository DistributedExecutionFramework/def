/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.manager.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-09-12")
public class ManagerService {

  /**
   * Manager specific service interface.
   * DTOs logic for creating programs, jobs and tasks will be found in ExecLogicService interface.
   */
  public interface Iface {

    /**
     * Requests a list with Cluster ids that were bound to registry.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     */
    public java.lang.String getClusterIds() throws org.apache.thrift.TException;

    /**
     * Reqeusts information about the given cluster.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param cId
     */
    public java.lang.String getClusterInfo(java.lang.String cId) throws org.apache.thrift.TException;

    /**
     * Requests ServiceEnpoint description for the given cluster id.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param cId
     */
    public java.lang.String getClusterEndpoint(java.lang.String cId) throws org.apache.thrift.TException;

    /**
     * Create a new cluster in the AWS environment with an initial worker and reducer pools size with the given AWS specification.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param numberOfWorkers
     * @param numberOfReducers
     * @param awsSpecification
     */
    public java.lang.String createAWSCluster(int numberOfWorkers, int numberOfReducers, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification) throws org.apache.thrift.TException;

    /**
     * Adds an existing cluster to this manager.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param endpoint
     */
    public java.lang.String addCluster(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint) throws org.apache.thrift.TException;

    /**
     * Destroy the given cluster.
     * This means all machines (cluster controller and workers) will be turned off.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * @param cId
     */
    public java.lang.String destroyCluster(java.lang.String cId) throws org.apache.thrift.TException;

    /**
     * Adjusts the pool size of the given NodeType in the cluster with the given id.
     * Returns a ticket id, state of ticket is availabe over TicketService interface.
     * 
     * 
     * @param cId
     * @param newNodePoolSize
     * @param nodeType
     */
    public java.lang.String adjustNodePoolSize(java.lang.String cId, int newNodePoolSize, at.enfilo.def.transfer.dto.NodeType nodeType) throws org.apache.thrift.TException;

    /**
     * Create a new ClientRoutine
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param routine
     */
    public java.lang.String createClientRoutine(at.enfilo.def.transfer.dto.RoutineDTO routine) throws org.apache.thrift.TException;

    /**
     * Create binary/executable for a ClientRoutine
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param rId
     * @param binaryName
     * @param md5
     * @param sizeInBytes
     * @param isPrimary
     */
    public java.lang.String createClientRoutineBinary(java.lang.String rId, java.lang.String binaryName, java.lang.String md5, long sizeInBytes, boolean isPrimary) throws org.apache.thrift.TException;

    /**
     * Uploads a RoutineBinaryChunk to the given RoutineBinary (rbId).
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param rbId
     * @param chunk
     */
    public java.lang.String uploadClientRoutineBinaryChunk(java.lang.String rbId, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk) throws org.apache.thrift.TException;

    /**
     * Delete a ClientRoutine.
     * Returns a ticket id, state of ticket is available over TicketService interface.
     * 
     * 
     * @param rcId
     */
    public java.lang.String removeClientRoutine(java.lang.String rcId) throws org.apache.thrift.TException;

    /**
     * Fetches a feature by name and version.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param name
     * @param version
     */
    public java.lang.String getFeatureByNameAndVersion(java.lang.String name, java.lang.String version) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void getClusterIds(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getClusterInfo(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getClusterEndpoint(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createAWSCluster(int numberOfWorkers, int numberOfReducers, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void addCluster(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void destroyCluster(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void adjustNodePoolSize(java.lang.String cId, int newNodePoolSize, at.enfilo.def.transfer.dto.NodeType nodeType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createClientRoutine(at.enfilo.def.transfer.dto.RoutineDTO routine, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createClientRoutineBinary(java.lang.String rId, java.lang.String binaryName, java.lang.String md5, long sizeInBytes, boolean isPrimary, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void uploadClientRoutineBinaryChunk(java.lang.String rbId, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void removeClientRoutine(java.lang.String rcId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getFeatureByNameAndVersion(java.lang.String name, java.lang.String version, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getClusterIds() throws org.apache.thrift.TException
    {
      send_getClusterIds();
      return recv_getClusterIds();
    }

    public void send_getClusterIds() throws org.apache.thrift.TException
    {
      getClusterIds_args args = new getClusterIds_args();
      sendBase("getClusterIds", args);
    }

    public java.lang.String recv_getClusterIds() throws org.apache.thrift.TException
    {
      getClusterIds_result result = new getClusterIds_result();
      receiveBase(result, "getClusterIds");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClusterIds failed: unknown result");
    }

    public java.lang.String getClusterInfo(java.lang.String cId) throws org.apache.thrift.TException
    {
      send_getClusterInfo(cId);
      return recv_getClusterInfo();
    }

    public void send_getClusterInfo(java.lang.String cId) throws org.apache.thrift.TException
    {
      getClusterInfo_args args = new getClusterInfo_args();
      args.setCId(cId);
      sendBase("getClusterInfo", args);
    }

    public java.lang.String recv_getClusterInfo() throws org.apache.thrift.TException
    {
      getClusterInfo_result result = new getClusterInfo_result();
      receiveBase(result, "getClusterInfo");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClusterInfo failed: unknown result");
    }

    public java.lang.String getClusterEndpoint(java.lang.String cId) throws org.apache.thrift.TException
    {
      send_getClusterEndpoint(cId);
      return recv_getClusterEndpoint();
    }

    public void send_getClusterEndpoint(java.lang.String cId) throws org.apache.thrift.TException
    {
      getClusterEndpoint_args args = new getClusterEndpoint_args();
      args.setCId(cId);
      sendBase("getClusterEndpoint", args);
    }

    public java.lang.String recv_getClusterEndpoint() throws org.apache.thrift.TException
    {
      getClusterEndpoint_result result = new getClusterEndpoint_result();
      receiveBase(result, "getClusterEndpoint");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getClusterEndpoint failed: unknown result");
    }

    public java.lang.String createAWSCluster(int numberOfWorkers, int numberOfReducers, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification) throws org.apache.thrift.TException
    {
      send_createAWSCluster(numberOfWorkers, numberOfReducers, awsSpecification);
      return recv_createAWSCluster();
    }

    public void send_createAWSCluster(int numberOfWorkers, int numberOfReducers, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification) throws org.apache.thrift.TException
    {
      createAWSCluster_args args = new createAWSCluster_args();
      args.setNumberOfWorkers(numberOfWorkers);
      args.setNumberOfReducers(numberOfReducers);
      args.setAwsSpecification(awsSpecification);
      sendBase("createAWSCluster", args);
    }

    public java.lang.String recv_createAWSCluster() throws org.apache.thrift.TException
    {
      createAWSCluster_result result = new createAWSCluster_result();
      receiveBase(result, "createAWSCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAWSCluster failed: unknown result");
    }

    public java.lang.String addCluster(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint) throws org.apache.thrift.TException
    {
      send_addCluster(endpoint);
      return recv_addCluster();
    }

    public void send_addCluster(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint) throws org.apache.thrift.TException
    {
      addCluster_args args = new addCluster_args();
      args.setEndpoint(endpoint);
      sendBase("addCluster", args);
    }

    public java.lang.String recv_addCluster() throws org.apache.thrift.TException
    {
      addCluster_result result = new addCluster_result();
      receiveBase(result, "addCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addCluster failed: unknown result");
    }

    public java.lang.String destroyCluster(java.lang.String cId) throws org.apache.thrift.TException
    {
      send_destroyCluster(cId);
      return recv_destroyCluster();
    }

    public void send_destroyCluster(java.lang.String cId) throws org.apache.thrift.TException
    {
      destroyCluster_args args = new destroyCluster_args();
      args.setCId(cId);
      sendBase("destroyCluster", args);
    }

    public java.lang.String recv_destroyCluster() throws org.apache.thrift.TException
    {
      destroyCluster_result result = new destroyCluster_result();
      receiveBase(result, "destroyCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "destroyCluster failed: unknown result");
    }

    public java.lang.String adjustNodePoolSize(java.lang.String cId, int newNodePoolSize, at.enfilo.def.transfer.dto.NodeType nodeType) throws org.apache.thrift.TException
    {
      send_adjustNodePoolSize(cId, newNodePoolSize, nodeType);
      return recv_adjustNodePoolSize();
    }

    public void send_adjustNodePoolSize(java.lang.String cId, int newNodePoolSize, at.enfilo.def.transfer.dto.NodeType nodeType) throws org.apache.thrift.TException
    {
      adjustNodePoolSize_args args = new adjustNodePoolSize_args();
      args.setCId(cId);
      args.setNewNodePoolSize(newNodePoolSize);
      args.setNodeType(nodeType);
      sendBase("adjustNodePoolSize", args);
    }

    public java.lang.String recv_adjustNodePoolSize() throws org.apache.thrift.TException
    {
      adjustNodePoolSize_result result = new adjustNodePoolSize_result();
      receiveBase(result, "adjustNodePoolSize");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "adjustNodePoolSize failed: unknown result");
    }

    public java.lang.String createClientRoutine(at.enfilo.def.transfer.dto.RoutineDTO routine) throws org.apache.thrift.TException
    {
      send_createClientRoutine(routine);
      return recv_createClientRoutine();
    }

    public void send_createClientRoutine(at.enfilo.def.transfer.dto.RoutineDTO routine) throws org.apache.thrift.TException
    {
      createClientRoutine_args args = new createClientRoutine_args();
      args.setRoutine(routine);
      sendBase("createClientRoutine", args);
    }

    public java.lang.String recv_createClientRoutine() throws org.apache.thrift.TException
    {
      createClientRoutine_result result = new createClientRoutine_result();
      receiveBase(result, "createClientRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createClientRoutine failed: unknown result");
    }

    public java.lang.String createClientRoutineBinary(java.lang.String rId, java.lang.String binaryName, java.lang.String md5, long sizeInBytes, boolean isPrimary) throws org.apache.thrift.TException
    {
      send_createClientRoutineBinary(rId, binaryName, md5, sizeInBytes, isPrimary);
      return recv_createClientRoutineBinary();
    }

    public void send_createClientRoutineBinary(java.lang.String rId, java.lang.String binaryName, java.lang.String md5, long sizeInBytes, boolean isPrimary) throws org.apache.thrift.TException
    {
      createClientRoutineBinary_args args = new createClientRoutineBinary_args();
      args.setRId(rId);
      args.setBinaryName(binaryName);
      args.setMd5(md5);
      args.setSizeInBytes(sizeInBytes);
      args.setIsPrimary(isPrimary);
      sendBase("createClientRoutineBinary", args);
    }

    public java.lang.String recv_createClientRoutineBinary() throws org.apache.thrift.TException
    {
      createClientRoutineBinary_result result = new createClientRoutineBinary_result();
      receiveBase(result, "createClientRoutineBinary");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createClientRoutineBinary failed: unknown result");
    }

    public java.lang.String uploadClientRoutineBinaryChunk(java.lang.String rbId, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk) throws org.apache.thrift.TException
    {
      send_uploadClientRoutineBinaryChunk(rbId, chunk);
      return recv_uploadClientRoutineBinaryChunk();
    }

    public void send_uploadClientRoutineBinaryChunk(java.lang.String rbId, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk) throws org.apache.thrift.TException
    {
      uploadClientRoutineBinaryChunk_args args = new uploadClientRoutineBinaryChunk_args();
      args.setRbId(rbId);
      args.setChunk(chunk);
      sendBase("uploadClientRoutineBinaryChunk", args);
    }

    public java.lang.String recv_uploadClientRoutineBinaryChunk() throws org.apache.thrift.TException
    {
      uploadClientRoutineBinaryChunk_result result = new uploadClientRoutineBinaryChunk_result();
      receiveBase(result, "uploadClientRoutineBinaryChunk");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "uploadClientRoutineBinaryChunk failed: unknown result");
    }

    public java.lang.String removeClientRoutine(java.lang.String rcId) throws org.apache.thrift.TException
    {
      send_removeClientRoutine(rcId);
      return recv_removeClientRoutine();
    }

    public void send_removeClientRoutine(java.lang.String rcId) throws org.apache.thrift.TException
    {
      removeClientRoutine_args args = new removeClientRoutine_args();
      args.setRcId(rcId);
      sendBase("removeClientRoutine", args);
    }

    public java.lang.String recv_removeClientRoutine() throws org.apache.thrift.TException
    {
      removeClientRoutine_result result = new removeClientRoutine_result();
      receiveBase(result, "removeClientRoutine");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "removeClientRoutine failed: unknown result");
    }

    public java.lang.String getFeatureByNameAndVersion(java.lang.String name, java.lang.String version) throws org.apache.thrift.TException
    {
      send_getFeatureByNameAndVersion(name, version);
      return recv_getFeatureByNameAndVersion();
    }

    public void send_getFeatureByNameAndVersion(java.lang.String name, java.lang.String version) throws org.apache.thrift.TException
    {
      getFeatureByNameAndVersion_args args = new getFeatureByNameAndVersion_args();
      args.setName(name);
      args.setVersion(version);
      sendBase("getFeatureByNameAndVersion", args);
    }

    public java.lang.String recv_getFeatureByNameAndVersion() throws org.apache.thrift.TException
    {
      getFeatureByNameAndVersion_result result = new getFeatureByNameAndVersion_result();
      receiveBase(result, "getFeatureByNameAndVersion");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getFeatureByNameAndVersion failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getClusterIds(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClusterIds_call method_call = new getClusterIds_call(resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClusterIds_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      public getClusterIds_call(org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClusterIds", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClusterIds_args args = new getClusterIds_args();
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClusterIds();
      }
    }

    public void getClusterInfo(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClusterInfo_call method_call = new getClusterInfo_call(cId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClusterInfo_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cId;
      public getClusterInfo_call(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cId = cId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClusterInfo", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClusterInfo_args args = new getClusterInfo_args();
        args.setCId(cId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClusterInfo();
      }
    }

    public void getClusterEndpoint(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getClusterEndpoint_call method_call = new getClusterEndpoint_call(cId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getClusterEndpoint_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cId;
      public getClusterEndpoint_call(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cId = cId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getClusterEndpoint", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getClusterEndpoint_args args = new getClusterEndpoint_args();
        args.setCId(cId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getClusterEndpoint();
      }
    }

    public void createAWSCluster(int numberOfWorkers, int numberOfReducers, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAWSCluster_call method_call = new createAWSCluster_call(numberOfWorkers, numberOfReducers, awsSpecification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAWSCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private int numberOfWorkers;
      private int numberOfReducers;
      private at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification;
      public createAWSCluster_call(int numberOfWorkers, int numberOfReducers, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.numberOfWorkers = numberOfWorkers;
        this.numberOfReducers = numberOfReducers;
        this.awsSpecification = awsSpecification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAWSCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAWSCluster_args args = new createAWSCluster_args();
        args.setNumberOfWorkers(numberOfWorkers);
        args.setNumberOfReducers(numberOfReducers);
        args.setAwsSpecification(awsSpecification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAWSCluster();
      }
    }

    public void addCluster(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addCluster_call method_call = new addCluster_call(endpoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint;
      public addCluster_call(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.endpoint = endpoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addCluster_args args = new addCluster_args();
        args.setEndpoint(endpoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addCluster();
      }
    }

    public void destroyCluster(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      destroyCluster_call method_call = new destroyCluster_call(cId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class destroyCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cId;
      public destroyCluster_call(java.lang.String cId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cId = cId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("destroyCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        destroyCluster_args args = new destroyCluster_args();
        args.setCId(cId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_destroyCluster();
      }
    }

    public void adjustNodePoolSize(java.lang.String cId, int newNodePoolSize, at.enfilo.def.transfer.dto.NodeType nodeType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      adjustNodePoolSize_call method_call = new adjustNodePoolSize_call(cId, newNodePoolSize, nodeType, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class adjustNodePoolSize_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cId;
      private int newNodePoolSize;
      private at.enfilo.def.transfer.dto.NodeType nodeType;
      public adjustNodePoolSize_call(java.lang.String cId, int newNodePoolSize, at.enfilo.def.transfer.dto.NodeType nodeType, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cId = cId;
        this.newNodePoolSize = newNodePoolSize;
        this.nodeType = nodeType;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("adjustNodePoolSize", org.apache.thrift.protocol.TMessageType.CALL, 0));
        adjustNodePoolSize_args args = new adjustNodePoolSize_args();
        args.setCId(cId);
        args.setNewNodePoolSize(newNodePoolSize);
        args.setNodeType(nodeType);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_adjustNodePoolSize();
      }
    }

    public void createClientRoutine(at.enfilo.def.transfer.dto.RoutineDTO routine, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createClientRoutine_call method_call = new createClientRoutine_call(routine, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createClientRoutine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private at.enfilo.def.transfer.dto.RoutineDTO routine;
      public createClientRoutine_call(at.enfilo.def.transfer.dto.RoutineDTO routine, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.routine = routine;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createClientRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createClientRoutine_args args = new createClientRoutine_args();
        args.setRoutine(routine);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createClientRoutine();
      }
    }

    public void createClientRoutineBinary(java.lang.String rId, java.lang.String binaryName, java.lang.String md5, long sizeInBytes, boolean isPrimary, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createClientRoutineBinary_call method_call = new createClientRoutineBinary_call(rId, binaryName, md5, sizeInBytes, isPrimary, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createClientRoutineBinary_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String rId;
      private java.lang.String binaryName;
      private java.lang.String md5;
      private long sizeInBytes;
      private boolean isPrimary;
      public createClientRoutineBinary_call(java.lang.String rId, java.lang.String binaryName, java.lang.String md5, long sizeInBytes, boolean isPrimary, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rId = rId;
        this.binaryName = binaryName;
        this.md5 = md5;
        this.sizeInBytes = sizeInBytes;
        this.isPrimary = isPrimary;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createClientRoutineBinary", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createClientRoutineBinary_args args = new createClientRoutineBinary_args();
        args.setRId(rId);
        args.setBinaryName(binaryName);
        args.setMd5(md5);
        args.setSizeInBytes(sizeInBytes);
        args.setIsPrimary(isPrimary);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createClientRoutineBinary();
      }
    }

    public void uploadClientRoutineBinaryChunk(java.lang.String rbId, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      uploadClientRoutineBinaryChunk_call method_call = new uploadClientRoutineBinaryChunk_call(rbId, chunk, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class uploadClientRoutineBinaryChunk_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String rbId;
      private at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk;
      public uploadClientRoutineBinaryChunk_call(java.lang.String rbId, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rbId = rbId;
        this.chunk = chunk;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("uploadClientRoutineBinaryChunk", org.apache.thrift.protocol.TMessageType.CALL, 0));
        uploadClientRoutineBinaryChunk_args args = new uploadClientRoutineBinaryChunk_args();
        args.setRbId(rbId);
        args.setChunk(chunk);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_uploadClientRoutineBinaryChunk();
      }
    }

    public void removeClientRoutine(java.lang.String rcId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      removeClientRoutine_call method_call = new removeClientRoutine_call(rcId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class removeClientRoutine_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String rcId;
      public removeClientRoutine_call(java.lang.String rcId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.rcId = rcId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("removeClientRoutine", org.apache.thrift.protocol.TMessageType.CALL, 0));
        removeClientRoutine_args args = new removeClientRoutine_args();
        args.setRcId(rcId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_removeClientRoutine();
      }
    }

    public void getFeatureByNameAndVersion(java.lang.String name, java.lang.String version, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getFeatureByNameAndVersion_call method_call = new getFeatureByNameAndVersion_call(name, version, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getFeatureByNameAndVersion_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String name;
      private java.lang.String version;
      public getFeatureByNameAndVersion_call(java.lang.String name, java.lang.String version, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.name = name;
        this.version = version;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getFeatureByNameAndVersion", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getFeatureByNameAndVersion_args args = new getFeatureByNameAndVersion_args();
        args.setName(name);
        args.setVersion(version);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getFeatureByNameAndVersion();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getClusterIds", new getClusterIds());
      processMap.put("getClusterInfo", new getClusterInfo());
      processMap.put("getClusterEndpoint", new getClusterEndpoint());
      processMap.put("createAWSCluster", new createAWSCluster());
      processMap.put("addCluster", new addCluster());
      processMap.put("destroyCluster", new destroyCluster());
      processMap.put("adjustNodePoolSize", new adjustNodePoolSize());
      processMap.put("createClientRoutine", new createClientRoutine());
      processMap.put("createClientRoutineBinary", new createClientRoutineBinary());
      processMap.put("uploadClientRoutineBinaryChunk", new uploadClientRoutineBinaryChunk());
      processMap.put("removeClientRoutine", new removeClientRoutine());
      processMap.put("getFeatureByNameAndVersion", new getFeatureByNameAndVersion());
      return processMap;
    }

    public static class getClusterIds<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClusterIds_args> {
      public getClusterIds() {
        super("getClusterIds");
      }

      public getClusterIds_args getEmptyArgsInstance() {
        return new getClusterIds_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getClusterIds_result getResult(I iface, getClusterIds_args args) throws org.apache.thrift.TException {
        getClusterIds_result result = new getClusterIds_result();
        result.success = iface.getClusterIds();
        return result;
      }
    }

    public static class getClusterInfo<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClusterInfo_args> {
      public getClusterInfo() {
        super("getClusterInfo");
      }

      public getClusterInfo_args getEmptyArgsInstance() {
        return new getClusterInfo_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getClusterInfo_result getResult(I iface, getClusterInfo_args args) throws org.apache.thrift.TException {
        getClusterInfo_result result = new getClusterInfo_result();
        result.success = iface.getClusterInfo(args.cId);
        return result;
      }
    }

    public static class getClusterEndpoint<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getClusterEndpoint_args> {
      public getClusterEndpoint() {
        super("getClusterEndpoint");
      }

      public getClusterEndpoint_args getEmptyArgsInstance() {
        return new getClusterEndpoint_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getClusterEndpoint_result getResult(I iface, getClusterEndpoint_args args) throws org.apache.thrift.TException {
        getClusterEndpoint_result result = new getClusterEndpoint_result();
        result.success = iface.getClusterEndpoint(args.cId);
        return result;
      }
    }

    public static class createAWSCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAWSCluster_args> {
      public createAWSCluster() {
        super("createAWSCluster");
      }

      public createAWSCluster_args getEmptyArgsInstance() {
        return new createAWSCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createAWSCluster_result getResult(I iface, createAWSCluster_args args) throws org.apache.thrift.TException {
        createAWSCluster_result result = new createAWSCluster_result();
        result.success = iface.createAWSCluster(args.numberOfWorkers, args.numberOfReducers, args.awsSpecification);
        return result;
      }
    }

    public static class addCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addCluster_args> {
      public addCluster() {
        super("addCluster");
      }

      public addCluster_args getEmptyArgsInstance() {
        return new addCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addCluster_result getResult(I iface, addCluster_args args) throws org.apache.thrift.TException {
        addCluster_result result = new addCluster_result();
        result.success = iface.addCluster(args.endpoint);
        return result;
      }
    }

    public static class destroyCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, destroyCluster_args> {
      public destroyCluster() {
        super("destroyCluster");
      }

      public destroyCluster_args getEmptyArgsInstance() {
        return new destroyCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public destroyCluster_result getResult(I iface, destroyCluster_args args) throws org.apache.thrift.TException {
        destroyCluster_result result = new destroyCluster_result();
        result.success = iface.destroyCluster(args.cId);
        return result;
      }
    }

    public static class adjustNodePoolSize<I extends Iface> extends org.apache.thrift.ProcessFunction<I, adjustNodePoolSize_args> {
      public adjustNodePoolSize() {
        super("adjustNodePoolSize");
      }

      public adjustNodePoolSize_args getEmptyArgsInstance() {
        return new adjustNodePoolSize_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public adjustNodePoolSize_result getResult(I iface, adjustNodePoolSize_args args) throws org.apache.thrift.TException {
        adjustNodePoolSize_result result = new adjustNodePoolSize_result();
        result.success = iface.adjustNodePoolSize(args.cId, args.newNodePoolSize, args.nodeType);
        return result;
      }
    }

    public static class createClientRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createClientRoutine_args> {
      public createClientRoutine() {
        super("createClientRoutine");
      }

      public createClientRoutine_args getEmptyArgsInstance() {
        return new createClientRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createClientRoutine_result getResult(I iface, createClientRoutine_args args) throws org.apache.thrift.TException {
        createClientRoutine_result result = new createClientRoutine_result();
        result.success = iface.createClientRoutine(args.routine);
        return result;
      }
    }

    public static class createClientRoutineBinary<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createClientRoutineBinary_args> {
      public createClientRoutineBinary() {
        super("createClientRoutineBinary");
      }

      public createClientRoutineBinary_args getEmptyArgsInstance() {
        return new createClientRoutineBinary_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createClientRoutineBinary_result getResult(I iface, createClientRoutineBinary_args args) throws org.apache.thrift.TException {
        createClientRoutineBinary_result result = new createClientRoutineBinary_result();
        result.success = iface.createClientRoutineBinary(args.rId, args.binaryName, args.md5, args.sizeInBytes, args.isPrimary);
        return result;
      }
    }

    public static class uploadClientRoutineBinaryChunk<I extends Iface> extends org.apache.thrift.ProcessFunction<I, uploadClientRoutineBinaryChunk_args> {
      public uploadClientRoutineBinaryChunk() {
        super("uploadClientRoutineBinaryChunk");
      }

      public uploadClientRoutineBinaryChunk_args getEmptyArgsInstance() {
        return new uploadClientRoutineBinaryChunk_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public uploadClientRoutineBinaryChunk_result getResult(I iface, uploadClientRoutineBinaryChunk_args args) throws org.apache.thrift.TException {
        uploadClientRoutineBinaryChunk_result result = new uploadClientRoutineBinaryChunk_result();
        result.success = iface.uploadClientRoutineBinaryChunk(args.rbId, args.chunk);
        return result;
      }
    }

    public static class removeClientRoutine<I extends Iface> extends org.apache.thrift.ProcessFunction<I, removeClientRoutine_args> {
      public removeClientRoutine() {
        super("removeClientRoutine");
      }

      public removeClientRoutine_args getEmptyArgsInstance() {
        return new removeClientRoutine_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public removeClientRoutine_result getResult(I iface, removeClientRoutine_args args) throws org.apache.thrift.TException {
        removeClientRoutine_result result = new removeClientRoutine_result();
        result.success = iface.removeClientRoutine(args.rcId);
        return result;
      }
    }

    public static class getFeatureByNameAndVersion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getFeatureByNameAndVersion_args> {
      public getFeatureByNameAndVersion() {
        super("getFeatureByNameAndVersion");
      }

      public getFeatureByNameAndVersion_args getEmptyArgsInstance() {
        return new getFeatureByNameAndVersion_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getFeatureByNameAndVersion_result getResult(I iface, getFeatureByNameAndVersion_args args) throws org.apache.thrift.TException {
        getFeatureByNameAndVersion_result result = new getFeatureByNameAndVersion_result();
        result.success = iface.getFeatureByNameAndVersion(args.name, args.version);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getClusterIds", new getClusterIds());
      processMap.put("getClusterInfo", new getClusterInfo());
      processMap.put("getClusterEndpoint", new getClusterEndpoint());
      processMap.put("createAWSCluster", new createAWSCluster());
      processMap.put("addCluster", new addCluster());
      processMap.put("destroyCluster", new destroyCluster());
      processMap.put("adjustNodePoolSize", new adjustNodePoolSize());
      processMap.put("createClientRoutine", new createClientRoutine());
      processMap.put("createClientRoutineBinary", new createClientRoutineBinary());
      processMap.put("uploadClientRoutineBinaryChunk", new uploadClientRoutineBinaryChunk());
      processMap.put("removeClientRoutine", new removeClientRoutine());
      processMap.put("getFeatureByNameAndVersion", new getFeatureByNameAndVersion());
      return processMap;
    }

    public static class getClusterIds<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClusterIds_args, java.lang.String> {
      public getClusterIds() {
        super("getClusterIds");
      }

      public getClusterIds_args getEmptyArgsInstance() {
        return new getClusterIds_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getClusterIds_result result = new getClusterIds_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getClusterIds_result result = new getClusterIds_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClusterIds_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getClusterIds(resultHandler);
      }
    }

    public static class getClusterInfo<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClusterInfo_args, java.lang.String> {
      public getClusterInfo() {
        super("getClusterInfo");
      }

      public getClusterInfo_args getEmptyArgsInstance() {
        return new getClusterInfo_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getClusterInfo_result result = new getClusterInfo_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getClusterInfo_result result = new getClusterInfo_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClusterInfo_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getClusterInfo(args.cId,resultHandler);
      }
    }

    public static class getClusterEndpoint<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getClusterEndpoint_args, java.lang.String> {
      public getClusterEndpoint() {
        super("getClusterEndpoint");
      }

      public getClusterEndpoint_args getEmptyArgsInstance() {
        return new getClusterEndpoint_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getClusterEndpoint_result result = new getClusterEndpoint_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getClusterEndpoint_result result = new getClusterEndpoint_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getClusterEndpoint_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getClusterEndpoint(args.cId,resultHandler);
      }
    }

    public static class createAWSCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAWSCluster_args, java.lang.String> {
      public createAWSCluster() {
        super("createAWSCluster");
      }

      public createAWSCluster_args getEmptyArgsInstance() {
        return new createAWSCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createAWSCluster_result result = new createAWSCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAWSCluster_result result = new createAWSCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAWSCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createAWSCluster(args.numberOfWorkers, args.numberOfReducers, args.awsSpecification,resultHandler);
      }
    }

    public static class addCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addCluster_args, java.lang.String> {
      public addCluster() {
        super("addCluster");
      }

      public addCluster_args getEmptyArgsInstance() {
        return new addCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            addCluster_result result = new addCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addCluster_result result = new addCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.addCluster(args.endpoint,resultHandler);
      }
    }

    public static class destroyCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, destroyCluster_args, java.lang.String> {
      public destroyCluster() {
        super("destroyCluster");
      }

      public destroyCluster_args getEmptyArgsInstance() {
        return new destroyCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            destroyCluster_result result = new destroyCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            destroyCluster_result result = new destroyCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, destroyCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.destroyCluster(args.cId,resultHandler);
      }
    }

    public static class adjustNodePoolSize<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, adjustNodePoolSize_args, java.lang.String> {
      public adjustNodePoolSize() {
        super("adjustNodePoolSize");
      }

      public adjustNodePoolSize_args getEmptyArgsInstance() {
        return new adjustNodePoolSize_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            adjustNodePoolSize_result result = new adjustNodePoolSize_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            adjustNodePoolSize_result result = new adjustNodePoolSize_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, adjustNodePoolSize_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.adjustNodePoolSize(args.cId, args.newNodePoolSize, args.nodeType,resultHandler);
      }
    }

    public static class createClientRoutine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createClientRoutine_args, java.lang.String> {
      public createClientRoutine() {
        super("createClientRoutine");
      }

      public createClientRoutine_args getEmptyArgsInstance() {
        return new createClientRoutine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createClientRoutine_result result = new createClientRoutine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createClientRoutine_result result = new createClientRoutine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createClientRoutine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createClientRoutine(args.routine,resultHandler);
      }
    }

    public static class createClientRoutineBinary<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createClientRoutineBinary_args, java.lang.String> {
      public createClientRoutineBinary() {
        super("createClientRoutineBinary");
      }

      public createClientRoutineBinary_args getEmptyArgsInstance() {
        return new createClientRoutineBinary_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createClientRoutineBinary_result result = new createClientRoutineBinary_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createClientRoutineBinary_result result = new createClientRoutineBinary_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createClientRoutineBinary_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createClientRoutineBinary(args.rId, args.binaryName, args.md5, args.sizeInBytes, args.isPrimary,resultHandler);
      }
    }

    public static class uploadClientRoutineBinaryChunk<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, uploadClientRoutineBinaryChunk_args, java.lang.String> {
      public uploadClientRoutineBinaryChunk() {
        super("uploadClientRoutineBinaryChunk");
      }

      public uploadClientRoutineBinaryChunk_args getEmptyArgsInstance() {
        return new uploadClientRoutineBinaryChunk_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            uploadClientRoutineBinaryChunk_result result = new uploadClientRoutineBinaryChunk_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            uploadClientRoutineBinaryChunk_result result = new uploadClientRoutineBinaryChunk_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, uploadClientRoutineBinaryChunk_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.uploadClientRoutineBinaryChunk(args.rbId, args.chunk,resultHandler);
      }
    }

    public static class removeClientRoutine<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, removeClientRoutine_args, java.lang.String> {
      public removeClientRoutine() {
        super("removeClientRoutine");
      }

      public removeClientRoutine_args getEmptyArgsInstance() {
        return new removeClientRoutine_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            removeClientRoutine_result result = new removeClientRoutine_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            removeClientRoutine_result result = new removeClientRoutine_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, removeClientRoutine_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.removeClientRoutine(args.rcId,resultHandler);
      }
    }

    public static class getFeatureByNameAndVersion<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getFeatureByNameAndVersion_args, java.lang.String> {
      public getFeatureByNameAndVersion() {
        super("getFeatureByNameAndVersion");
      }

      public getFeatureByNameAndVersion_args getEmptyArgsInstance() {
        return new getFeatureByNameAndVersion_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getFeatureByNameAndVersion_result result = new getFeatureByNameAndVersion_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getFeatureByNameAndVersion_result result = new getFeatureByNameAndVersion_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getFeatureByNameAndVersion_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getFeatureByNameAndVersion(args.name, args.version,resultHandler);
      }
    }

  }

  public static class getClusterIds_args implements org.apache.thrift.TBase<getClusterIds_args, getClusterIds_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClusterIds_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClusterIds_args");


    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClusterIds_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClusterIds_argsTupleSchemeFactory();


    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
;

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClusterIds_args.class, metaDataMap);
    }

    public getClusterIds_args() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClusterIds_args(getClusterIds_args other) {
    }

    public getClusterIds_args deepCopy() {
      return new getClusterIds_args(this);
    }

    @Override
    public void clear() {
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterIds_args)
        return this.equals((getClusterIds_args)that);
      return false;
    }

    public boolean equals(getClusterIds_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      return hashCode;
    }

    @Override
    public int compareTo(getClusterIds_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClusterIds_args(");
      boolean first = true;

      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterIds_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterIds_argsStandardScheme getScheme() {
        return new getClusterIds_argsStandardScheme();
      }
    }

    private static class getClusterIds_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClusterIds_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClusterIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClusterIds_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterIds_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterIds_argsTupleScheme getScheme() {
        return new getClusterIds_argsTupleScheme();
      }
    }

    private static class getClusterIds_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClusterIds_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClusterIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClusterIds_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getClusterIds_result implements org.apache.thrift.TBase<getClusterIds_result, getClusterIds_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClusterIds_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClusterIds_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClusterIds_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClusterIds_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClusterIds_result.class, metaDataMap);
    }

    public getClusterIds_result() {
    }

    public getClusterIds_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClusterIds_result(getClusterIds_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getClusterIds_result deepCopy() {
      return new getClusterIds_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getClusterIds_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterIds_result)
        return this.equals((getClusterIds_result)that);
      return false;
    }

    public boolean equals(getClusterIds_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClusterIds_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClusterIds_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterIds_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterIds_resultStandardScheme getScheme() {
        return new getClusterIds_resultStandardScheme();
      }
    }

    private static class getClusterIds_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClusterIds_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClusterIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClusterIds_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterIds_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterIds_resultTupleScheme getScheme() {
        return new getClusterIds_resultTupleScheme();
      }
    }

    private static class getClusterIds_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClusterIds_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClusterIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClusterIds_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getClusterInfo_args implements org.apache.thrift.TBase<getClusterInfo_args, getClusterInfo_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClusterInfo_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClusterInfo_args");

    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClusterInfo_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClusterInfo_argsTupleSchemeFactory();

    public java.lang.String cId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_ID((short)1, "cId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_ID
            return C_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("cId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClusterInfo_args.class, metaDataMap);
    }

    public getClusterInfo_args() {
    }

    public getClusterInfo_args(
      java.lang.String cId)
    {
      this();
      this.cId = cId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClusterInfo_args(getClusterInfo_args other) {
      if (other.isSetCId()) {
        this.cId = other.cId;
      }
    }

    public getClusterInfo_args deepCopy() {
      return new getClusterInfo_args(this);
    }

    @Override
    public void clear() {
      this.cId = null;
    }

    public java.lang.String getCId() {
      return this.cId;
    }

    public getClusterInfo_args setCId(java.lang.String cId) {
      this.cId = cId;
      return this;
    }

    public void unsetCId() {
      this.cId = null;
    }

    /** Returns true if field cId is set (has been assigned a value) and false otherwise */
    public boolean isSetCId() {
      return this.cId != null;
    }

    public void setCIdIsSet(boolean value) {
      if (!value) {
        this.cId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case C_ID:
        if (value == null) {
          unsetCId();
        } else {
          setCId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case C_ID:
        return getCId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case C_ID:
        return isSetCId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterInfo_args)
        return this.equals((getClusterInfo_args)that);
      return false;
    }

    public boolean equals(getClusterInfo_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cId = true && this.isSetCId();
      boolean that_present_cId = true && that.isSetCId();
      if (this_present_cId || that_present_cId) {
        if (!(this_present_cId && that_present_cId))
          return false;
        if (!this.cId.equals(that.cId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCId()) ? 131071 : 524287);
      if (isSetCId())
        hashCode = hashCode * 8191 + cId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClusterInfo_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCId()).compareTo(other.isSetCId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cId, other.cId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClusterInfo_args(");
      boolean first = true;

      sb.append("cId:");
      if (this.cId == null) {
        sb.append("null");
      } else {
        sb.append(this.cId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterInfo_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterInfo_argsStandardScheme getScheme() {
        return new getClusterInfo_argsStandardScheme();
      }
    }

    private static class getClusterInfo_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClusterInfo_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClusterInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cId = iprot.readString();
                struct.setCIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClusterInfo_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cId != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.cId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterInfo_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterInfo_argsTupleScheme getScheme() {
        return new getClusterInfo_argsTupleScheme();
      }
    }

    private static class getClusterInfo_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClusterInfo_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClusterInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCId()) {
          oprot.writeString(struct.cId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClusterInfo_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cId = iprot.readString();
          struct.setCIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getClusterInfo_result implements org.apache.thrift.TBase<getClusterInfo_result, getClusterInfo_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClusterInfo_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClusterInfo_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClusterInfo_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClusterInfo_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClusterInfo_result.class, metaDataMap);
    }

    public getClusterInfo_result() {
    }

    public getClusterInfo_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClusterInfo_result(getClusterInfo_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getClusterInfo_result deepCopy() {
      return new getClusterInfo_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getClusterInfo_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterInfo_result)
        return this.equals((getClusterInfo_result)that);
      return false;
    }

    public boolean equals(getClusterInfo_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClusterInfo_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClusterInfo_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterInfo_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterInfo_resultStandardScheme getScheme() {
        return new getClusterInfo_resultStandardScheme();
      }
    }

    private static class getClusterInfo_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClusterInfo_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClusterInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClusterInfo_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterInfo_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterInfo_resultTupleScheme getScheme() {
        return new getClusterInfo_resultTupleScheme();
      }
    }

    private static class getClusterInfo_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClusterInfo_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClusterInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClusterInfo_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getClusterEndpoint_args implements org.apache.thrift.TBase<getClusterEndpoint_args, getClusterEndpoint_args._Fields>, java.io.Serializable, Cloneable, Comparable<getClusterEndpoint_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClusterEndpoint_args");

    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClusterEndpoint_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClusterEndpoint_argsTupleSchemeFactory();

    public java.lang.String cId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_ID((short)1, "cId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_ID
            return C_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("cId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClusterEndpoint_args.class, metaDataMap);
    }

    public getClusterEndpoint_args() {
    }

    public getClusterEndpoint_args(
      java.lang.String cId)
    {
      this();
      this.cId = cId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClusterEndpoint_args(getClusterEndpoint_args other) {
      if (other.isSetCId()) {
        this.cId = other.cId;
      }
    }

    public getClusterEndpoint_args deepCopy() {
      return new getClusterEndpoint_args(this);
    }

    @Override
    public void clear() {
      this.cId = null;
    }

    public java.lang.String getCId() {
      return this.cId;
    }

    public getClusterEndpoint_args setCId(java.lang.String cId) {
      this.cId = cId;
      return this;
    }

    public void unsetCId() {
      this.cId = null;
    }

    /** Returns true if field cId is set (has been assigned a value) and false otherwise */
    public boolean isSetCId() {
      return this.cId != null;
    }

    public void setCIdIsSet(boolean value) {
      if (!value) {
        this.cId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case C_ID:
        if (value == null) {
          unsetCId();
        } else {
          setCId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case C_ID:
        return getCId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case C_ID:
        return isSetCId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterEndpoint_args)
        return this.equals((getClusterEndpoint_args)that);
      return false;
    }

    public boolean equals(getClusterEndpoint_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cId = true && this.isSetCId();
      boolean that_present_cId = true && that.isSetCId();
      if (this_present_cId || that_present_cId) {
        if (!(this_present_cId && that_present_cId))
          return false;
        if (!this.cId.equals(that.cId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCId()) ? 131071 : 524287);
      if (isSetCId())
        hashCode = hashCode * 8191 + cId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClusterEndpoint_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCId()).compareTo(other.isSetCId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cId, other.cId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClusterEndpoint_args(");
      boolean first = true;

      sb.append("cId:");
      if (this.cId == null) {
        sb.append("null");
      } else {
        sb.append(this.cId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterEndpoint_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterEndpoint_argsStandardScheme getScheme() {
        return new getClusterEndpoint_argsStandardScheme();
      }
    }

    private static class getClusterEndpoint_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClusterEndpoint_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClusterEndpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cId = iprot.readString();
                struct.setCIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClusterEndpoint_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cId != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.cId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterEndpoint_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterEndpoint_argsTupleScheme getScheme() {
        return new getClusterEndpoint_argsTupleScheme();
      }
    }

    private static class getClusterEndpoint_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClusterEndpoint_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClusterEndpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCId()) {
          oprot.writeString(struct.cId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClusterEndpoint_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cId = iprot.readString();
          struct.setCIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getClusterEndpoint_result implements org.apache.thrift.TBase<getClusterEndpoint_result, getClusterEndpoint_result._Fields>, java.io.Serializable, Cloneable, Comparable<getClusterEndpoint_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getClusterEndpoint_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getClusterEndpoint_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getClusterEndpoint_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getClusterEndpoint_result.class, metaDataMap);
    }

    public getClusterEndpoint_result() {
    }

    public getClusterEndpoint_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getClusterEndpoint_result(getClusterEndpoint_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getClusterEndpoint_result deepCopy() {
      return new getClusterEndpoint_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getClusterEndpoint_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getClusterEndpoint_result)
        return this.equals((getClusterEndpoint_result)that);
      return false;
    }

    public boolean equals(getClusterEndpoint_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getClusterEndpoint_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getClusterEndpoint_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getClusterEndpoint_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterEndpoint_resultStandardScheme getScheme() {
        return new getClusterEndpoint_resultStandardScheme();
      }
    }

    private static class getClusterEndpoint_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getClusterEndpoint_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getClusterEndpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getClusterEndpoint_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getClusterEndpoint_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getClusterEndpoint_resultTupleScheme getScheme() {
        return new getClusterEndpoint_resultTupleScheme();
      }
    }

    private static class getClusterEndpoint_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getClusterEndpoint_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getClusterEndpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getClusterEndpoint_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAWSCluster_args implements org.apache.thrift.TBase<createAWSCluster_args, createAWSCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAWSCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAWSCluster_args");

    private static final org.apache.thrift.protocol.TField NUMBER_OF_WORKERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfWorkers", org.apache.thrift.protocol.TType.I32, (short)1);
    private static final org.apache.thrift.protocol.TField NUMBER_OF_REDUCERS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfReducers", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField AWS_SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("awsSpecification", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAWSCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAWSCluster_argsTupleSchemeFactory();

    public int numberOfWorkers; // required
    public int numberOfReducers; // required
    public at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NUMBER_OF_WORKERS((short)1, "numberOfWorkers"),
      NUMBER_OF_REDUCERS((short)2, "numberOfReducers"),
      AWS_SPECIFICATION((short)3, "awsSpecification");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NUMBER_OF_WORKERS
            return NUMBER_OF_WORKERS;
          case 2: // NUMBER_OF_REDUCERS
            return NUMBER_OF_REDUCERS;
          case 3: // AWS_SPECIFICATION
            return AWS_SPECIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NUMBEROFWORKERS_ISSET_ID = 0;
    private static final int __NUMBEROFREDUCERS_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NUMBER_OF_WORKERS, new org.apache.thrift.meta_data.FieldMetaData("numberOfWorkers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NUMBER_OF_REDUCERS, new org.apache.thrift.meta_data.FieldMetaData("numberOfReducers", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.AWS_SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("awsSpecification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAWSCluster_args.class, metaDataMap);
    }

    public createAWSCluster_args() {
    }

    public createAWSCluster_args(
      int numberOfWorkers,
      int numberOfReducers,
      at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification)
    {
      this();
      this.numberOfWorkers = numberOfWorkers;
      setNumberOfWorkersIsSet(true);
      this.numberOfReducers = numberOfReducers;
      setNumberOfReducersIsSet(true);
      this.awsSpecification = awsSpecification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAWSCluster_args(createAWSCluster_args other) {
      __isset_bitfield = other.__isset_bitfield;
      this.numberOfWorkers = other.numberOfWorkers;
      this.numberOfReducers = other.numberOfReducers;
      if (other.isSetAwsSpecification()) {
        this.awsSpecification = new at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO(other.awsSpecification);
      }
    }

    public createAWSCluster_args deepCopy() {
      return new createAWSCluster_args(this);
    }

    @Override
    public void clear() {
      setNumberOfWorkersIsSet(false);
      this.numberOfWorkers = 0;
      setNumberOfReducersIsSet(false);
      this.numberOfReducers = 0;
      this.awsSpecification = null;
    }

    public int getNumberOfWorkers() {
      return this.numberOfWorkers;
    }

    public createAWSCluster_args setNumberOfWorkers(int numberOfWorkers) {
      this.numberOfWorkers = numberOfWorkers;
      setNumberOfWorkersIsSet(true);
      return this;
    }

    public void unsetNumberOfWorkers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFWORKERS_ISSET_ID);
    }

    /** Returns true if field numberOfWorkers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfWorkers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFWORKERS_ISSET_ID);
    }

    public void setNumberOfWorkersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFWORKERS_ISSET_ID, value);
    }

    public int getNumberOfReducers() {
      return this.numberOfReducers;
    }

    public createAWSCluster_args setNumberOfReducers(int numberOfReducers) {
      this.numberOfReducers = numberOfReducers;
      setNumberOfReducersIsSet(true);
      return this;
    }

    public void unsetNumberOfReducers() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFREDUCERS_ISSET_ID);
    }

    /** Returns true if field numberOfReducers is set (has been assigned a value) and false otherwise */
    public boolean isSetNumberOfReducers() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFREDUCERS_ISSET_ID);
    }

    public void setNumberOfReducersIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFREDUCERS_ISSET_ID, value);
    }

    public at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO getAwsSpecification() {
      return this.awsSpecification;
    }

    public createAWSCluster_args setAwsSpecification(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO awsSpecification) {
      this.awsSpecification = awsSpecification;
      return this;
    }

    public void unsetAwsSpecification() {
      this.awsSpecification = null;
    }

    /** Returns true if field awsSpecification is set (has been assigned a value) and false otherwise */
    public boolean isSetAwsSpecification() {
      return this.awsSpecification != null;
    }

    public void setAwsSpecificationIsSet(boolean value) {
      if (!value) {
        this.awsSpecification = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NUMBER_OF_WORKERS:
        if (value == null) {
          unsetNumberOfWorkers();
        } else {
          setNumberOfWorkers((java.lang.Integer)value);
        }
        break;

      case NUMBER_OF_REDUCERS:
        if (value == null) {
          unsetNumberOfReducers();
        } else {
          setNumberOfReducers((java.lang.Integer)value);
        }
        break;

      case AWS_SPECIFICATION:
        if (value == null) {
          unsetAwsSpecification();
        } else {
          setAwsSpecification((at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NUMBER_OF_WORKERS:
        return getNumberOfWorkers();

      case NUMBER_OF_REDUCERS:
        return getNumberOfReducers();

      case AWS_SPECIFICATION:
        return getAwsSpecification();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NUMBER_OF_WORKERS:
        return isSetNumberOfWorkers();
      case NUMBER_OF_REDUCERS:
        return isSetNumberOfReducers();
      case AWS_SPECIFICATION:
        return isSetAwsSpecification();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAWSCluster_args)
        return this.equals((createAWSCluster_args)that);
      return false;
    }

    public boolean equals(createAWSCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_numberOfWorkers = true;
      boolean that_present_numberOfWorkers = true;
      if (this_present_numberOfWorkers || that_present_numberOfWorkers) {
        if (!(this_present_numberOfWorkers && that_present_numberOfWorkers))
          return false;
        if (this.numberOfWorkers != that.numberOfWorkers)
          return false;
      }

      boolean this_present_numberOfReducers = true;
      boolean that_present_numberOfReducers = true;
      if (this_present_numberOfReducers || that_present_numberOfReducers) {
        if (!(this_present_numberOfReducers && that_present_numberOfReducers))
          return false;
        if (this.numberOfReducers != that.numberOfReducers)
          return false;
      }

      boolean this_present_awsSpecification = true && this.isSetAwsSpecification();
      boolean that_present_awsSpecification = true && that.isSetAwsSpecification();
      if (this_present_awsSpecification || that_present_awsSpecification) {
        if (!(this_present_awsSpecification && that_present_awsSpecification))
          return false;
        if (!this.awsSpecification.equals(that.awsSpecification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + numberOfWorkers;

      hashCode = hashCode * 8191 + numberOfReducers;

      hashCode = hashCode * 8191 + ((isSetAwsSpecification()) ? 131071 : 524287);
      if (isSetAwsSpecification())
        hashCode = hashCode * 8191 + awsSpecification.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAWSCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetNumberOfWorkers()).compareTo(other.isSetNumberOfWorkers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfWorkers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfWorkers, other.numberOfWorkers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNumberOfReducers()).compareTo(other.isSetNumberOfReducers());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNumberOfReducers()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfReducers, other.numberOfReducers);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetAwsSpecification()).compareTo(other.isSetAwsSpecification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetAwsSpecification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.awsSpecification, other.awsSpecification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAWSCluster_args(");
      boolean first = true;

      sb.append("numberOfWorkers:");
      sb.append(this.numberOfWorkers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("numberOfReducers:");
      sb.append(this.numberOfReducers);
      first = false;
      if (!first) sb.append(", ");
      sb.append("awsSpecification:");
      if (this.awsSpecification == null) {
        sb.append("null");
      } else {
        sb.append(this.awsSpecification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (awsSpecification != null) {
        awsSpecification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAWSCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_argsStandardScheme getScheme() {
        return new createAWSCluster_argsStandardScheme();
      }
    }

    private static class createAWSCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAWSCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NUMBER_OF_WORKERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numberOfWorkers = iprot.readI32();
                struct.setNumberOfWorkersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NUMBER_OF_REDUCERS
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.numberOfReducers = iprot.readI32();
                struct.setNumberOfReducersIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // AWS_SPECIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.awsSpecification = new at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO();
                struct.awsSpecification.read(iprot);
                struct.setAwsSpecificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(NUMBER_OF_WORKERS_FIELD_DESC);
        oprot.writeI32(struct.numberOfWorkers);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(NUMBER_OF_REDUCERS_FIELD_DESC);
        oprot.writeI32(struct.numberOfReducers);
        oprot.writeFieldEnd();
        if (struct.awsSpecification != null) {
          oprot.writeFieldBegin(AWS_SPECIFICATION_FIELD_DESC);
          struct.awsSpecification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAWSCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_argsTupleScheme getScheme() {
        return new createAWSCluster_argsTupleScheme();
      }
    }

    private static class createAWSCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAWSCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetNumberOfWorkers()) {
          optionals.set(0);
        }
        if (struct.isSetNumberOfReducers()) {
          optionals.set(1);
        }
        if (struct.isSetAwsSpecification()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetNumberOfWorkers()) {
          oprot.writeI32(struct.numberOfWorkers);
        }
        if (struct.isSetNumberOfReducers()) {
          oprot.writeI32(struct.numberOfReducers);
        }
        if (struct.isSetAwsSpecification()) {
          struct.awsSpecification.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.numberOfWorkers = iprot.readI32();
          struct.setNumberOfWorkersIsSet(true);
        }
        if (incoming.get(1)) {
          struct.numberOfReducers = iprot.readI32();
          struct.setNumberOfReducersIsSet(true);
        }
        if (incoming.get(2)) {
          struct.awsSpecification = new at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO();
          struct.awsSpecification.read(iprot);
          struct.setAwsSpecificationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAWSCluster_result implements org.apache.thrift.TBase<createAWSCluster_result, createAWSCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAWSCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAWSCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAWSCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAWSCluster_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAWSCluster_result.class, metaDataMap);
    }

    public createAWSCluster_result() {
    }

    public createAWSCluster_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAWSCluster_result(createAWSCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createAWSCluster_result deepCopy() {
      return new createAWSCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createAWSCluster_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAWSCluster_result)
        return this.equals((createAWSCluster_result)that);
      return false;
    }

    public boolean equals(createAWSCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAWSCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAWSCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAWSCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_resultStandardScheme getScheme() {
        return new createAWSCluster_resultStandardScheme();
      }
    }

    private static class createAWSCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAWSCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAWSCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_resultTupleScheme getScheme() {
        return new createAWSCluster_resultTupleScheme();
      }
    }

    private static class createAWSCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAWSCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addCluster_args implements org.apache.thrift.TBase<addCluster_args, addCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<addCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCluster_args");

    private static final org.apache.thrift.protocol.TField ENDPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("endpoint", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCluster_argsTupleSchemeFactory();

    public at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ENDPOINT((short)1, "endpoint");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ENDPOINT
            return ENDPOINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ENDPOINT, new org.apache.thrift.meta_data.FieldMetaData("endpoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.communication.dto.ServiceEndpointDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCluster_args.class, metaDataMap);
    }

    public addCluster_args() {
    }

    public addCluster_args(
      at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint)
    {
      this();
      this.endpoint = endpoint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCluster_args(addCluster_args other) {
      if (other.isSetEndpoint()) {
        this.endpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO(other.endpoint);
      }
    }

    public addCluster_args deepCopy() {
      return new addCluster_args(this);
    }

    @Override
    public void clear() {
      this.endpoint = null;
    }

    public at.enfilo.def.communication.dto.ServiceEndpointDTO getEndpoint() {
      return this.endpoint;
    }

    public addCluster_args setEndpoint(at.enfilo.def.communication.dto.ServiceEndpointDTO endpoint) {
      this.endpoint = endpoint;
      return this;
    }

    public void unsetEndpoint() {
      this.endpoint = null;
    }

    /** Returns true if field endpoint is set (has been assigned a value) and false otherwise */
    public boolean isSetEndpoint() {
      return this.endpoint != null;
    }

    public void setEndpointIsSet(boolean value) {
      if (!value) {
        this.endpoint = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ENDPOINT:
        if (value == null) {
          unsetEndpoint();
        } else {
          setEndpoint((at.enfilo.def.communication.dto.ServiceEndpointDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ENDPOINT:
        return getEndpoint();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ENDPOINT:
        return isSetEndpoint();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addCluster_args)
        return this.equals((addCluster_args)that);
      return false;
    }

    public boolean equals(addCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_endpoint = true && this.isSetEndpoint();
      boolean that_present_endpoint = true && that.isSetEndpoint();
      if (this_present_endpoint || that_present_endpoint) {
        if (!(this_present_endpoint && that_present_endpoint))
          return false;
        if (!this.endpoint.equals(that.endpoint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetEndpoint()) ? 131071 : 524287);
      if (isSetEndpoint())
        hashCode = hashCode * 8191 + endpoint.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetEndpoint()).compareTo(other.isSetEndpoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetEndpoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.endpoint, other.endpoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addCluster_args(");
      boolean first = true;

      sb.append("endpoint:");
      if (this.endpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.endpoint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (endpoint != null) {
        endpoint.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCluster_argsStandardScheme getScheme() {
        return new addCluster_argsStandardScheme();
      }
    }

    private static class addCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ENDPOINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.endpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO();
                struct.endpoint.read(iprot);
                struct.setEndpointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.endpoint != null) {
          oprot.writeFieldBegin(ENDPOINT_FIELD_DESC);
          struct.endpoint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCluster_argsTupleScheme getScheme() {
        return new addCluster_argsTupleScheme();
      }
    }

    private static class addCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetEndpoint()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetEndpoint()) {
          struct.endpoint.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.endpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO();
          struct.endpoint.read(iprot);
          struct.setEndpointIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addCluster_result implements org.apache.thrift.TBase<addCluster_result, addCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<addCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addCluster_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addCluster_result.class, metaDataMap);
    }

    public addCluster_result() {
    }

    public addCluster_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addCluster_result(addCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addCluster_result deepCopy() {
      return new addCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public addCluster_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addCluster_result)
        return this.equals((addCluster_result)that);
      return false;
    }

    public boolean equals(addCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCluster_resultStandardScheme getScheme() {
        return new addCluster_resultStandardScheme();
      }
    }

    private static class addCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addCluster_resultTupleScheme getScheme() {
        return new addCluster_resultTupleScheme();
      }
    }

    private static class addCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class destroyCluster_args implements org.apache.thrift.TBase<destroyCluster_args, destroyCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<destroyCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyCluster_args");

    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new destroyCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new destroyCluster_argsTupleSchemeFactory();

    public java.lang.String cId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_ID((short)1, "cId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_ID
            return C_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("cId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyCluster_args.class, metaDataMap);
    }

    public destroyCluster_args() {
    }

    public destroyCluster_args(
      java.lang.String cId)
    {
      this();
      this.cId = cId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyCluster_args(destroyCluster_args other) {
      if (other.isSetCId()) {
        this.cId = other.cId;
      }
    }

    public destroyCluster_args deepCopy() {
      return new destroyCluster_args(this);
    }

    @Override
    public void clear() {
      this.cId = null;
    }

    public java.lang.String getCId() {
      return this.cId;
    }

    public destroyCluster_args setCId(java.lang.String cId) {
      this.cId = cId;
      return this;
    }

    public void unsetCId() {
      this.cId = null;
    }

    /** Returns true if field cId is set (has been assigned a value) and false otherwise */
    public boolean isSetCId() {
      return this.cId != null;
    }

    public void setCIdIsSet(boolean value) {
      if (!value) {
        this.cId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case C_ID:
        if (value == null) {
          unsetCId();
        } else {
          setCId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case C_ID:
        return getCId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case C_ID:
        return isSetCId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyCluster_args)
        return this.equals((destroyCluster_args)that);
      return false;
    }

    public boolean equals(destroyCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cId = true && this.isSetCId();
      boolean that_present_cId = true && that.isSetCId();
      if (this_present_cId || that_present_cId) {
        if (!(this_present_cId && that_present_cId))
          return false;
        if (!this.cId.equals(that.cId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCId()) ? 131071 : 524287);
      if (isSetCId())
        hashCode = hashCode * 8191 + cId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(destroyCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCId()).compareTo(other.isSetCId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cId, other.cId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("destroyCluster_args(");
      boolean first = true;

      sb.append("cId:");
      if (this.cId == null) {
        sb.append("null");
      } else {
        sb.append(this.cId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyCluster_argsStandardScheme getScheme() {
        return new destroyCluster_argsStandardScheme();
      }
    }

    private static class destroyCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<destroyCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cId = iprot.readString();
                struct.setCIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cId != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.cId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyCluster_argsTupleScheme getScheme() {
        return new destroyCluster_argsTupleScheme();
      }
    }

    private static class destroyCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<destroyCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCId()) {
          oprot.writeString(struct.cId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cId = iprot.readString();
          struct.setCIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class destroyCluster_result implements org.apache.thrift.TBase<destroyCluster_result, destroyCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<destroyCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("destroyCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new destroyCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new destroyCluster_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(destroyCluster_result.class, metaDataMap);
    }

    public destroyCluster_result() {
    }

    public destroyCluster_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public destroyCluster_result(destroyCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public destroyCluster_result deepCopy() {
      return new destroyCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public destroyCluster_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof destroyCluster_result)
        return this.equals((destroyCluster_result)that);
      return false;
    }

    public boolean equals(destroyCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(destroyCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("destroyCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class destroyCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyCluster_resultStandardScheme getScheme() {
        return new destroyCluster_resultStandardScheme();
      }
    }

    private static class destroyCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<destroyCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, destroyCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, destroyCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class destroyCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public destroyCluster_resultTupleScheme getScheme() {
        return new destroyCluster_resultTupleScheme();
      }
    }

    private static class destroyCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<destroyCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, destroyCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, destroyCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class adjustNodePoolSize_args implements org.apache.thrift.TBase<adjustNodePoolSize_args, adjustNodePoolSize_args._Fields>, java.io.Serializable, Cloneable, Comparable<adjustNodePoolSize_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adjustNodePoolSize_args");

    private static final org.apache.thrift.protocol.TField C_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField NEW_NODE_POOL_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("newNodePoolSize", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NODE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("nodeType", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new adjustNodePoolSize_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new adjustNodePoolSize_argsTupleSchemeFactory();

    public java.lang.String cId; // required
    public int newNodePoolSize; // required
    /**
     * 
     * @see at.enfilo.def.transfer.dto.NodeType
     */
    public at.enfilo.def.transfer.dto.NodeType nodeType; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      C_ID((short)1, "cId"),
      NEW_NODE_POOL_SIZE((short)2, "newNodePoolSize"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.NodeType
       */
      NODE_TYPE((short)3, "nodeType");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // C_ID
            return C_ID;
          case 2: // NEW_NODE_POOL_SIZE
            return NEW_NODE_POOL_SIZE;
          case 3: // NODE_TYPE
            return NODE_TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NEWNODEPOOLSIZE_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.C_ID, new org.apache.thrift.meta_data.FieldMetaData("cId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.NEW_NODE_POOL_SIZE, new org.apache.thrift.meta_data.FieldMetaData("newNodePoolSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      tmpMap.put(_Fields.NODE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("nodeType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.NodeType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adjustNodePoolSize_args.class, metaDataMap);
    }

    public adjustNodePoolSize_args() {
    }

    public adjustNodePoolSize_args(
      java.lang.String cId,
      int newNodePoolSize,
      at.enfilo.def.transfer.dto.NodeType nodeType)
    {
      this();
      this.cId = cId;
      this.newNodePoolSize = newNodePoolSize;
      setNewNodePoolSizeIsSet(true);
      this.nodeType = nodeType;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustNodePoolSize_args(adjustNodePoolSize_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCId()) {
        this.cId = other.cId;
      }
      this.newNodePoolSize = other.newNodePoolSize;
      if (other.isSetNodeType()) {
        this.nodeType = other.nodeType;
      }
    }

    public adjustNodePoolSize_args deepCopy() {
      return new adjustNodePoolSize_args(this);
    }

    @Override
    public void clear() {
      this.cId = null;
      setNewNodePoolSizeIsSet(false);
      this.newNodePoolSize = 0;
      this.nodeType = null;
    }

    public java.lang.String getCId() {
      return this.cId;
    }

    public adjustNodePoolSize_args setCId(java.lang.String cId) {
      this.cId = cId;
      return this;
    }

    public void unsetCId() {
      this.cId = null;
    }

    /** Returns true if field cId is set (has been assigned a value) and false otherwise */
    public boolean isSetCId() {
      return this.cId != null;
    }

    public void setCIdIsSet(boolean value) {
      if (!value) {
        this.cId = null;
      }
    }

    public int getNewNodePoolSize() {
      return this.newNodePoolSize;
    }

    public adjustNodePoolSize_args setNewNodePoolSize(int newNodePoolSize) {
      this.newNodePoolSize = newNodePoolSize;
      setNewNodePoolSizeIsSet(true);
      return this;
    }

    public void unsetNewNodePoolSize() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NEWNODEPOOLSIZE_ISSET_ID);
    }

    /** Returns true if field newNodePoolSize is set (has been assigned a value) and false otherwise */
    public boolean isSetNewNodePoolSize() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NEWNODEPOOLSIZE_ISSET_ID);
    }

    public void setNewNodePoolSizeIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NEWNODEPOOLSIZE_ISSET_ID, value);
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.NodeType
     */
    public at.enfilo.def.transfer.dto.NodeType getNodeType() {
      return this.nodeType;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.NodeType
     */
    public adjustNodePoolSize_args setNodeType(at.enfilo.def.transfer.dto.NodeType nodeType) {
      this.nodeType = nodeType;
      return this;
    }

    public void unsetNodeType() {
      this.nodeType = null;
    }

    /** Returns true if field nodeType is set (has been assigned a value) and false otherwise */
    public boolean isSetNodeType() {
      return this.nodeType != null;
    }

    public void setNodeTypeIsSet(boolean value) {
      if (!value) {
        this.nodeType = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case C_ID:
        if (value == null) {
          unsetCId();
        } else {
          setCId((java.lang.String)value);
        }
        break;

      case NEW_NODE_POOL_SIZE:
        if (value == null) {
          unsetNewNodePoolSize();
        } else {
          setNewNodePoolSize((java.lang.Integer)value);
        }
        break;

      case NODE_TYPE:
        if (value == null) {
          unsetNodeType();
        } else {
          setNodeType((at.enfilo.def.transfer.dto.NodeType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case C_ID:
        return getCId();

      case NEW_NODE_POOL_SIZE:
        return getNewNodePoolSize();

      case NODE_TYPE:
        return getNodeType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case C_ID:
        return isSetCId();
      case NEW_NODE_POOL_SIZE:
        return isSetNewNodePoolSize();
      case NODE_TYPE:
        return isSetNodeType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustNodePoolSize_args)
        return this.equals((adjustNodePoolSize_args)that);
      return false;
    }

    public boolean equals(adjustNodePoolSize_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cId = true && this.isSetCId();
      boolean that_present_cId = true && that.isSetCId();
      if (this_present_cId || that_present_cId) {
        if (!(this_present_cId && that_present_cId))
          return false;
        if (!this.cId.equals(that.cId))
          return false;
      }

      boolean this_present_newNodePoolSize = true;
      boolean that_present_newNodePoolSize = true;
      if (this_present_newNodePoolSize || that_present_newNodePoolSize) {
        if (!(this_present_newNodePoolSize && that_present_newNodePoolSize))
          return false;
        if (this.newNodePoolSize != that.newNodePoolSize)
          return false;
      }

      boolean this_present_nodeType = true && this.isSetNodeType();
      boolean that_present_nodeType = true && that.isSetNodeType();
      if (this_present_nodeType || that_present_nodeType) {
        if (!(this_present_nodeType && that_present_nodeType))
          return false;
        if (!this.nodeType.equals(that.nodeType))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCId()) ? 131071 : 524287);
      if (isSetCId())
        hashCode = hashCode * 8191 + cId.hashCode();

      hashCode = hashCode * 8191 + newNodePoolSize;

      hashCode = hashCode * 8191 + ((isSetNodeType()) ? 131071 : 524287);
      if (isSetNodeType())
        hashCode = hashCode * 8191 + nodeType.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(adjustNodePoolSize_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCId()).compareTo(other.isSetCId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cId, other.cId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNewNodePoolSize()).compareTo(other.isSetNewNodePoolSize());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNewNodePoolSize()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.newNodePoolSize, other.newNodePoolSize);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNodeType()).compareTo(other.isSetNodeType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNodeType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nodeType, other.nodeType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("adjustNodePoolSize_args(");
      boolean first = true;

      sb.append("cId:");
      if (this.cId == null) {
        sb.append("null");
      } else {
        sb.append(this.cId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("newNodePoolSize:");
      sb.append(this.newNodePoolSize);
      first = false;
      if (!first) sb.append(", ");
      sb.append("nodeType:");
      if (this.nodeType == null) {
        sb.append("null");
      } else {
        sb.append(this.nodeType);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adjustNodePoolSize_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public adjustNodePoolSize_argsStandardScheme getScheme() {
        return new adjustNodePoolSize_argsStandardScheme();
      }
    }

    private static class adjustNodePoolSize_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<adjustNodePoolSize_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adjustNodePoolSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // C_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cId = iprot.readString();
                struct.setCIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // NEW_NODE_POOL_SIZE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.newNodePoolSize = iprot.readI32();
                struct.setNewNodePoolSizeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NODE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nodeType = at.enfilo.def.transfer.dto.NodeType.findByValue(iprot.readI32());
                struct.setNodeTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adjustNodePoolSize_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cId != null) {
          oprot.writeFieldBegin(C_ID_FIELD_DESC);
          oprot.writeString(struct.cId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NEW_NODE_POOL_SIZE_FIELD_DESC);
        oprot.writeI32(struct.newNodePoolSize);
        oprot.writeFieldEnd();
        if (struct.nodeType != null) {
          oprot.writeFieldBegin(NODE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.nodeType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adjustNodePoolSize_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public adjustNodePoolSize_argsTupleScheme getScheme() {
        return new adjustNodePoolSize_argsTupleScheme();
      }
    }

    private static class adjustNodePoolSize_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<adjustNodePoolSize_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adjustNodePoolSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCId()) {
          optionals.set(0);
        }
        if (struct.isSetNewNodePoolSize()) {
          optionals.set(1);
        }
        if (struct.isSetNodeType()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCId()) {
          oprot.writeString(struct.cId);
        }
        if (struct.isSetNewNodePoolSize()) {
          oprot.writeI32(struct.newNodePoolSize);
        }
        if (struct.isSetNodeType()) {
          oprot.writeI32(struct.nodeType.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adjustNodePoolSize_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cId = iprot.readString();
          struct.setCIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.newNodePoolSize = iprot.readI32();
          struct.setNewNodePoolSizeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nodeType = at.enfilo.def.transfer.dto.NodeType.findByValue(iprot.readI32());
          struct.setNodeTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class adjustNodePoolSize_result implements org.apache.thrift.TBase<adjustNodePoolSize_result, adjustNodePoolSize_result._Fields>, java.io.Serializable, Cloneable, Comparable<adjustNodePoolSize_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("adjustNodePoolSize_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new adjustNodePoolSize_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new adjustNodePoolSize_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(adjustNodePoolSize_result.class, metaDataMap);
    }

    public adjustNodePoolSize_result() {
    }

    public adjustNodePoolSize_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public adjustNodePoolSize_result(adjustNodePoolSize_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public adjustNodePoolSize_result deepCopy() {
      return new adjustNodePoolSize_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public adjustNodePoolSize_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof adjustNodePoolSize_result)
        return this.equals((adjustNodePoolSize_result)that);
      return false;
    }

    public boolean equals(adjustNodePoolSize_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(adjustNodePoolSize_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("adjustNodePoolSize_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class adjustNodePoolSize_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public adjustNodePoolSize_resultStandardScheme getScheme() {
        return new adjustNodePoolSize_resultStandardScheme();
      }
    }

    private static class adjustNodePoolSize_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<adjustNodePoolSize_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, adjustNodePoolSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, adjustNodePoolSize_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class adjustNodePoolSize_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public adjustNodePoolSize_resultTupleScheme getScheme() {
        return new adjustNodePoolSize_resultTupleScheme();
      }
    }

    private static class adjustNodePoolSize_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<adjustNodePoolSize_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, adjustNodePoolSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, adjustNodePoolSize_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createClientRoutine_args implements org.apache.thrift.TBase<createClientRoutine_args, createClientRoutine_args._Fields>, java.io.Serializable, Cloneable, Comparable<createClientRoutine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createClientRoutine_args");

    private static final org.apache.thrift.protocol.TField ROUTINE_FIELD_DESC = new org.apache.thrift.protocol.TField("routine", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createClientRoutine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createClientRoutine_argsTupleSchemeFactory();

    public at.enfilo.def.transfer.dto.RoutineDTO routine; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      ROUTINE((short)1, "routine");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // ROUTINE
            return ROUTINE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.ROUTINE, new org.apache.thrift.meta_data.FieldMetaData("routine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.RoutineDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createClientRoutine_args.class, metaDataMap);
    }

    public createClientRoutine_args() {
    }

    public createClientRoutine_args(
      at.enfilo.def.transfer.dto.RoutineDTO routine)
    {
      this();
      this.routine = routine;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createClientRoutine_args(createClientRoutine_args other) {
      if (other.isSetRoutine()) {
        this.routine = new at.enfilo.def.transfer.dto.RoutineDTO(other.routine);
      }
    }

    public createClientRoutine_args deepCopy() {
      return new createClientRoutine_args(this);
    }

    @Override
    public void clear() {
      this.routine = null;
    }

    public at.enfilo.def.transfer.dto.RoutineDTO getRoutine() {
      return this.routine;
    }

    public createClientRoutine_args setRoutine(at.enfilo.def.transfer.dto.RoutineDTO routine) {
      this.routine = routine;
      return this;
    }

    public void unsetRoutine() {
      this.routine = null;
    }

    /** Returns true if field routine is set (has been assigned a value) and false otherwise */
    public boolean isSetRoutine() {
      return this.routine != null;
    }

    public void setRoutineIsSet(boolean value) {
      if (!value) {
        this.routine = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case ROUTINE:
        if (value == null) {
          unsetRoutine();
        } else {
          setRoutine((at.enfilo.def.transfer.dto.RoutineDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case ROUTINE:
        return getRoutine();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case ROUTINE:
        return isSetRoutine();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createClientRoutine_args)
        return this.equals((createClientRoutine_args)that);
      return false;
    }

    public boolean equals(createClientRoutine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_routine = true && this.isSetRoutine();
      boolean that_present_routine = true && that.isSetRoutine();
      if (this_present_routine || that_present_routine) {
        if (!(this_present_routine && that_present_routine))
          return false;
        if (!this.routine.equals(that.routine))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRoutine()) ? 131071 : 524287);
      if (isSetRoutine())
        hashCode = hashCode * 8191 + routine.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createClientRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRoutine()).compareTo(other.isSetRoutine());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRoutine()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routine, other.routine);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createClientRoutine_args(");
      boolean first = true;

      sb.append("routine:");
      if (this.routine == null) {
        sb.append("null");
      } else {
        sb.append(this.routine);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (routine != null) {
        routine.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createClientRoutine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutine_argsStandardScheme getScheme() {
        return new createClientRoutine_argsStandardScheme();
      }
    }

    private static class createClientRoutine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createClientRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createClientRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // ROUTINE
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.routine = new at.enfilo.def.transfer.dto.RoutineDTO();
                struct.routine.read(iprot);
                struct.setRoutineIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createClientRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.routine != null) {
          oprot.writeFieldBegin(ROUTINE_FIELD_DESC);
          struct.routine.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createClientRoutine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutine_argsTupleScheme getScheme() {
        return new createClientRoutine_argsTupleScheme();
      }
    }

    private static class createClientRoutine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createClientRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createClientRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRoutine()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRoutine()) {
          struct.routine.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createClientRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.routine = new at.enfilo.def.transfer.dto.RoutineDTO();
          struct.routine.read(iprot);
          struct.setRoutineIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createClientRoutine_result implements org.apache.thrift.TBase<createClientRoutine_result, createClientRoutine_result._Fields>, java.io.Serializable, Cloneable, Comparable<createClientRoutine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createClientRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createClientRoutine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createClientRoutine_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createClientRoutine_result.class, metaDataMap);
    }

    public createClientRoutine_result() {
    }

    public createClientRoutine_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createClientRoutine_result(createClientRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createClientRoutine_result deepCopy() {
      return new createClientRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createClientRoutine_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createClientRoutine_result)
        return this.equals((createClientRoutine_result)that);
      return false;
    }

    public boolean equals(createClientRoutine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createClientRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createClientRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createClientRoutine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutine_resultStandardScheme getScheme() {
        return new createClientRoutine_resultStandardScheme();
      }
    }

    private static class createClientRoutine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createClientRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createClientRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createClientRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createClientRoutine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutine_resultTupleScheme getScheme() {
        return new createClientRoutine_resultTupleScheme();
      }
    }

    private static class createClientRoutine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createClientRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createClientRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createClientRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createClientRoutineBinary_args implements org.apache.thrift.TBase<createClientRoutineBinary_args, createClientRoutineBinary_args._Fields>, java.io.Serializable, Cloneable, Comparable<createClientRoutineBinary_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createClientRoutineBinary_args");

    private static final org.apache.thrift.protocol.TField R_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField BINARY_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("binaryName", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)3);
    private static final org.apache.thrift.protocol.TField SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeInBytes", org.apache.thrift.protocol.TType.I64, (short)4);
    private static final org.apache.thrift.protocol.TField IS_PRIMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("isPrimary", org.apache.thrift.protocol.TType.BOOL, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createClientRoutineBinary_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createClientRoutineBinary_argsTupleSchemeFactory();

    public java.lang.String rId; // required
    public java.lang.String binaryName; // required
    public java.lang.String md5; // required
    public long sizeInBytes; // required
    public boolean isPrimary; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      R_ID((short)1, "rId"),
      BINARY_NAME((short)2, "binaryName"),
      MD5((short)3, "md5"),
      SIZE_IN_BYTES((short)4, "sizeInBytes"),
      IS_PRIMARY((short)5, "isPrimary");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // R_ID
            return R_ID;
          case 2: // BINARY_NAME
            return BINARY_NAME;
          case 3: // MD5
            return MD5;
          case 4: // SIZE_IN_BYTES
            return SIZE_IN_BYTES;
          case 5: // IS_PRIMARY
            return IS_PRIMARY;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __SIZEINBYTES_ISSET_ID = 0;
    private static final int __ISPRIMARY_ISSET_ID = 1;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.R_ID, new org.apache.thrift.meta_data.FieldMetaData("rId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.BINARY_NAME, new org.apache.thrift.meta_data.FieldMetaData("binaryName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("sizeInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
      tmpMap.put(_Fields.IS_PRIMARY, new org.apache.thrift.meta_data.FieldMetaData("isPrimary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createClientRoutineBinary_args.class, metaDataMap);
    }

    public createClientRoutineBinary_args() {
    }

    public createClientRoutineBinary_args(
      java.lang.String rId,
      java.lang.String binaryName,
      java.lang.String md5,
      long sizeInBytes,
      boolean isPrimary)
    {
      this();
      this.rId = rId;
      this.binaryName = binaryName;
      this.md5 = md5;
      this.sizeInBytes = sizeInBytes;
      setSizeInBytesIsSet(true);
      this.isPrimary = isPrimary;
      setIsPrimaryIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createClientRoutineBinary_args(createClientRoutineBinary_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetRId()) {
        this.rId = other.rId;
      }
      if (other.isSetBinaryName()) {
        this.binaryName = other.binaryName;
      }
      if (other.isSetMd5()) {
        this.md5 = other.md5;
      }
      this.sizeInBytes = other.sizeInBytes;
      this.isPrimary = other.isPrimary;
    }

    public createClientRoutineBinary_args deepCopy() {
      return new createClientRoutineBinary_args(this);
    }

    @Override
    public void clear() {
      this.rId = null;
      this.binaryName = null;
      this.md5 = null;
      setSizeInBytesIsSet(false);
      this.sizeInBytes = 0;
      setIsPrimaryIsSet(false);
      this.isPrimary = false;
    }

    public java.lang.String getRId() {
      return this.rId;
    }

    public createClientRoutineBinary_args setRId(java.lang.String rId) {
      this.rId = rId;
      return this;
    }

    public void unsetRId() {
      this.rId = null;
    }

    /** Returns true if field rId is set (has been assigned a value) and false otherwise */
    public boolean isSetRId() {
      return this.rId != null;
    }

    public void setRIdIsSet(boolean value) {
      if (!value) {
        this.rId = null;
      }
    }

    public java.lang.String getBinaryName() {
      return this.binaryName;
    }

    public createClientRoutineBinary_args setBinaryName(java.lang.String binaryName) {
      this.binaryName = binaryName;
      return this;
    }

    public void unsetBinaryName() {
      this.binaryName = null;
    }

    /** Returns true if field binaryName is set (has been assigned a value) and false otherwise */
    public boolean isSetBinaryName() {
      return this.binaryName != null;
    }

    public void setBinaryNameIsSet(boolean value) {
      if (!value) {
        this.binaryName = null;
      }
    }

    public java.lang.String getMd5() {
      return this.md5;
    }

    public createClientRoutineBinary_args setMd5(java.lang.String md5) {
      this.md5 = md5;
      return this;
    }

    public void unsetMd5() {
      this.md5 = null;
    }

    /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
    public boolean isSetMd5() {
      return this.md5 != null;
    }

    public void setMd5IsSet(boolean value) {
      if (!value) {
        this.md5 = null;
      }
    }

    public long getSizeInBytes() {
      return this.sizeInBytes;
    }

    public createClientRoutineBinary_args setSizeInBytes(long sizeInBytes) {
      this.sizeInBytes = sizeInBytes;
      setSizeInBytesIsSet(true);
      return this;
    }

    public void unsetSizeInBytes() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
    }

    /** Returns true if field sizeInBytes is set (has been assigned a value) and false otherwise */
    public boolean isSetSizeInBytes() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
    }

    public void setSizeInBytesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID, value);
    }

    public boolean isIsPrimary() {
      return this.isPrimary;
    }

    public createClientRoutineBinary_args setIsPrimary(boolean isPrimary) {
      this.isPrimary = isPrimary;
      setIsPrimaryIsSet(true);
      return this;
    }

    public void unsetIsPrimary() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ISPRIMARY_ISSET_ID);
    }

    /** Returns true if field isPrimary is set (has been assigned a value) and false otherwise */
    public boolean isSetIsPrimary() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ISPRIMARY_ISSET_ID);
    }

    public void setIsPrimaryIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ISPRIMARY_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case R_ID:
        if (value == null) {
          unsetRId();
        } else {
          setRId((java.lang.String)value);
        }
        break;

      case BINARY_NAME:
        if (value == null) {
          unsetBinaryName();
        } else {
          setBinaryName((java.lang.String)value);
        }
        break;

      case MD5:
        if (value == null) {
          unsetMd5();
        } else {
          setMd5((java.lang.String)value);
        }
        break;

      case SIZE_IN_BYTES:
        if (value == null) {
          unsetSizeInBytes();
        } else {
          setSizeInBytes((java.lang.Long)value);
        }
        break;

      case IS_PRIMARY:
        if (value == null) {
          unsetIsPrimary();
        } else {
          setIsPrimary((java.lang.Boolean)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case R_ID:
        return getRId();

      case BINARY_NAME:
        return getBinaryName();

      case MD5:
        return getMd5();

      case SIZE_IN_BYTES:
        return getSizeInBytes();

      case IS_PRIMARY:
        return isIsPrimary();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case R_ID:
        return isSetRId();
      case BINARY_NAME:
        return isSetBinaryName();
      case MD5:
        return isSetMd5();
      case SIZE_IN_BYTES:
        return isSetSizeInBytes();
      case IS_PRIMARY:
        return isSetIsPrimary();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createClientRoutineBinary_args)
        return this.equals((createClientRoutineBinary_args)that);
      return false;
    }

    public boolean equals(createClientRoutineBinary_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rId = true && this.isSetRId();
      boolean that_present_rId = true && that.isSetRId();
      if (this_present_rId || that_present_rId) {
        if (!(this_present_rId && that_present_rId))
          return false;
        if (!this.rId.equals(that.rId))
          return false;
      }

      boolean this_present_binaryName = true && this.isSetBinaryName();
      boolean that_present_binaryName = true && that.isSetBinaryName();
      if (this_present_binaryName || that_present_binaryName) {
        if (!(this_present_binaryName && that_present_binaryName))
          return false;
        if (!this.binaryName.equals(that.binaryName))
          return false;
      }

      boolean this_present_md5 = true && this.isSetMd5();
      boolean that_present_md5 = true && that.isSetMd5();
      if (this_present_md5 || that_present_md5) {
        if (!(this_present_md5 && that_present_md5))
          return false;
        if (!this.md5.equals(that.md5))
          return false;
      }

      boolean this_present_sizeInBytes = true;
      boolean that_present_sizeInBytes = true;
      if (this_present_sizeInBytes || that_present_sizeInBytes) {
        if (!(this_present_sizeInBytes && that_present_sizeInBytes))
          return false;
        if (this.sizeInBytes != that.sizeInBytes)
          return false;
      }

      boolean this_present_isPrimary = true;
      boolean that_present_isPrimary = true;
      if (this_present_isPrimary || that_present_isPrimary) {
        if (!(this_present_isPrimary && that_present_isPrimary))
          return false;
        if (this.isPrimary != that.isPrimary)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRId()) ? 131071 : 524287);
      if (isSetRId())
        hashCode = hashCode * 8191 + rId.hashCode();

      hashCode = hashCode * 8191 + ((isSetBinaryName()) ? 131071 : 524287);
      if (isSetBinaryName())
        hashCode = hashCode * 8191 + binaryName.hashCode();

      hashCode = hashCode * 8191 + ((isSetMd5()) ? 131071 : 524287);
      if (isSetMd5())
        hashCode = hashCode * 8191 + md5.hashCode();

      hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sizeInBytes);

      hashCode = hashCode * 8191 + ((isPrimary) ? 131071 : 524287);

      return hashCode;
    }

    @Override
    public int compareTo(createClientRoutineBinary_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRId()).compareTo(other.isSetRId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rId, other.rId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetBinaryName()).compareTo(other.isSetBinaryName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetBinaryName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.binaryName, other.binaryName);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetMd5()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetSizeInBytes()).compareTo(other.isSetSizeInBytes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSizeInBytes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeInBytes, other.sizeInBytes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetIsPrimary()).compareTo(other.isSetIsPrimary());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetIsPrimary()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.isPrimary, other.isPrimary);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createClientRoutineBinary_args(");
      boolean first = true;

      sb.append("rId:");
      if (this.rId == null) {
        sb.append("null");
      } else {
        sb.append(this.rId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("binaryName:");
      if (this.binaryName == null) {
        sb.append("null");
      } else {
        sb.append(this.binaryName);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("md5:");
      if (this.md5 == null) {
        sb.append("null");
      } else {
        sb.append(this.md5);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("sizeInBytes:");
      sb.append(this.sizeInBytes);
      first = false;
      if (!first) sb.append(", ");
      sb.append("isPrimary:");
      sb.append(this.isPrimary);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createClientRoutineBinary_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutineBinary_argsStandardScheme getScheme() {
        return new createClientRoutineBinary_argsStandardScheme();
      }
    }

    private static class createClientRoutineBinary_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createClientRoutineBinary_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createClientRoutineBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // R_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rId = iprot.readString();
                struct.setRIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // BINARY_NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.binaryName = iprot.readString();
                struct.setBinaryNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // MD5
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.md5 = iprot.readString();
                struct.setMd5IsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // SIZE_IN_BYTES
              if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
                struct.sizeInBytes = iprot.readI64();
                struct.setSizeInBytesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // IS_PRIMARY
              if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
                struct.isPrimary = iprot.readBool();
                struct.setIsPrimaryIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createClientRoutineBinary_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rId != null) {
          oprot.writeFieldBegin(R_ID_FIELD_DESC);
          oprot.writeString(struct.rId);
          oprot.writeFieldEnd();
        }
        if (struct.binaryName != null) {
          oprot.writeFieldBegin(BINARY_NAME_FIELD_DESC);
          oprot.writeString(struct.binaryName);
          oprot.writeFieldEnd();
        }
        if (struct.md5 != null) {
          oprot.writeFieldBegin(MD5_FIELD_DESC);
          oprot.writeString(struct.md5);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(SIZE_IN_BYTES_FIELD_DESC);
        oprot.writeI64(struct.sizeInBytes);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(IS_PRIMARY_FIELD_DESC);
        oprot.writeBool(struct.isPrimary);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createClientRoutineBinary_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutineBinary_argsTupleScheme getScheme() {
        return new createClientRoutineBinary_argsTupleScheme();
      }
    }

    private static class createClientRoutineBinary_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createClientRoutineBinary_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createClientRoutineBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRId()) {
          optionals.set(0);
        }
        if (struct.isSetBinaryName()) {
          optionals.set(1);
        }
        if (struct.isSetMd5()) {
          optionals.set(2);
        }
        if (struct.isSetSizeInBytes()) {
          optionals.set(3);
        }
        if (struct.isSetIsPrimary()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetRId()) {
          oprot.writeString(struct.rId);
        }
        if (struct.isSetBinaryName()) {
          oprot.writeString(struct.binaryName);
        }
        if (struct.isSetMd5()) {
          oprot.writeString(struct.md5);
        }
        if (struct.isSetSizeInBytes()) {
          oprot.writeI64(struct.sizeInBytes);
        }
        if (struct.isSetIsPrimary()) {
          oprot.writeBool(struct.isPrimary);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createClientRoutineBinary_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.rId = iprot.readString();
          struct.setRIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.binaryName = iprot.readString();
          struct.setBinaryNameIsSet(true);
        }
        if (incoming.get(2)) {
          struct.md5 = iprot.readString();
          struct.setMd5IsSet(true);
        }
        if (incoming.get(3)) {
          struct.sizeInBytes = iprot.readI64();
          struct.setSizeInBytesIsSet(true);
        }
        if (incoming.get(4)) {
          struct.isPrimary = iprot.readBool();
          struct.setIsPrimaryIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createClientRoutineBinary_result implements org.apache.thrift.TBase<createClientRoutineBinary_result, createClientRoutineBinary_result._Fields>, java.io.Serializable, Cloneable, Comparable<createClientRoutineBinary_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createClientRoutineBinary_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createClientRoutineBinary_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createClientRoutineBinary_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createClientRoutineBinary_result.class, metaDataMap);
    }

    public createClientRoutineBinary_result() {
    }

    public createClientRoutineBinary_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createClientRoutineBinary_result(createClientRoutineBinary_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createClientRoutineBinary_result deepCopy() {
      return new createClientRoutineBinary_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public createClientRoutineBinary_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createClientRoutineBinary_result)
        return this.equals((createClientRoutineBinary_result)that);
      return false;
    }

    public boolean equals(createClientRoutineBinary_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createClientRoutineBinary_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createClientRoutineBinary_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createClientRoutineBinary_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutineBinary_resultStandardScheme getScheme() {
        return new createClientRoutineBinary_resultStandardScheme();
      }
    }

    private static class createClientRoutineBinary_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createClientRoutineBinary_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createClientRoutineBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createClientRoutineBinary_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createClientRoutineBinary_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createClientRoutineBinary_resultTupleScheme getScheme() {
        return new createClientRoutineBinary_resultTupleScheme();
      }
    }

    private static class createClientRoutineBinary_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createClientRoutineBinary_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createClientRoutineBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createClientRoutineBinary_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadClientRoutineBinaryChunk_args implements org.apache.thrift.TBase<uploadClientRoutineBinaryChunk_args, uploadClientRoutineBinaryChunk_args._Fields>, java.io.Serializable, Cloneable, Comparable<uploadClientRoutineBinaryChunk_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadClientRoutineBinaryChunk_args");

    private static final org.apache.thrift.protocol.TField RB_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rbId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CHUNK_FIELD_DESC = new org.apache.thrift.protocol.TField("chunk", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadClientRoutineBinaryChunk_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadClientRoutineBinaryChunk_argsTupleSchemeFactory();

    public java.lang.String rbId; // required
    public at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RB_ID((short)1, "rbId"),
      CHUNK((short)2, "chunk");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RB_ID
            return RB_ID;
          case 2: // CHUNK
            return CHUNK;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RB_ID, new org.apache.thrift.meta_data.FieldMetaData("rbId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.CHUNK, new org.apache.thrift.meta_data.FieldMetaData("chunk", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadClientRoutineBinaryChunk_args.class, metaDataMap);
    }

    public uploadClientRoutineBinaryChunk_args() {
    }

    public uploadClientRoutineBinaryChunk_args(
      java.lang.String rbId,
      at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk)
    {
      this();
      this.rbId = rbId;
      this.chunk = chunk;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadClientRoutineBinaryChunk_args(uploadClientRoutineBinaryChunk_args other) {
      if (other.isSetRbId()) {
        this.rbId = other.rbId;
      }
      if (other.isSetChunk()) {
        this.chunk = new at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO(other.chunk);
      }
    }

    public uploadClientRoutineBinaryChunk_args deepCopy() {
      return new uploadClientRoutineBinaryChunk_args(this);
    }

    @Override
    public void clear() {
      this.rbId = null;
      this.chunk = null;
    }

    public java.lang.String getRbId() {
      return this.rbId;
    }

    public uploadClientRoutineBinaryChunk_args setRbId(java.lang.String rbId) {
      this.rbId = rbId;
      return this;
    }

    public void unsetRbId() {
      this.rbId = null;
    }

    /** Returns true if field rbId is set (has been assigned a value) and false otherwise */
    public boolean isSetRbId() {
      return this.rbId != null;
    }

    public void setRbIdIsSet(boolean value) {
      if (!value) {
        this.rbId = null;
      }
    }

    public at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO getChunk() {
      return this.chunk;
    }

    public uploadClientRoutineBinaryChunk_args setChunk(at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO chunk) {
      this.chunk = chunk;
      return this;
    }

    public void unsetChunk() {
      this.chunk = null;
    }

    /** Returns true if field chunk is set (has been assigned a value) and false otherwise */
    public boolean isSetChunk() {
      return this.chunk != null;
    }

    public void setChunkIsSet(boolean value) {
      if (!value) {
        this.chunk = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RB_ID:
        if (value == null) {
          unsetRbId();
        } else {
          setRbId((java.lang.String)value);
        }
        break;

      case CHUNK:
        if (value == null) {
          unsetChunk();
        } else {
          setChunk((at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RB_ID:
        return getRbId();

      case CHUNK:
        return getChunk();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RB_ID:
        return isSetRbId();
      case CHUNK:
        return isSetChunk();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadClientRoutineBinaryChunk_args)
        return this.equals((uploadClientRoutineBinaryChunk_args)that);
      return false;
    }

    public boolean equals(uploadClientRoutineBinaryChunk_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rbId = true && this.isSetRbId();
      boolean that_present_rbId = true && that.isSetRbId();
      if (this_present_rbId || that_present_rbId) {
        if (!(this_present_rbId && that_present_rbId))
          return false;
        if (!this.rbId.equals(that.rbId))
          return false;
      }

      boolean this_present_chunk = true && this.isSetChunk();
      boolean that_present_chunk = true && that.isSetChunk();
      if (this_present_chunk || that_present_chunk) {
        if (!(this_present_chunk && that_present_chunk))
          return false;
        if (!this.chunk.equals(that.chunk))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRbId()) ? 131071 : 524287);
      if (isSetRbId())
        hashCode = hashCode * 8191 + rbId.hashCode();

      hashCode = hashCode * 8191 + ((isSetChunk()) ? 131071 : 524287);
      if (isSetChunk())
        hashCode = hashCode * 8191 + chunk.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadClientRoutineBinaryChunk_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRbId()).compareTo(other.isSetRbId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRbId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rbId, other.rbId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetChunk()).compareTo(other.isSetChunk());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetChunk()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.chunk, other.chunk);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadClientRoutineBinaryChunk_args(");
      boolean first = true;

      sb.append("rbId:");
      if (this.rbId == null) {
        sb.append("null");
      } else {
        sb.append(this.rbId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("chunk:");
      if (this.chunk == null) {
        sb.append("null");
      } else {
        sb.append(this.chunk);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (chunk != null) {
        chunk.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadClientRoutineBinaryChunk_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientRoutineBinaryChunk_argsStandardScheme getScheme() {
        return new uploadClientRoutineBinaryChunk_argsStandardScheme();
      }
    }

    private static class uploadClientRoutineBinaryChunk_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadClientRoutineBinaryChunk_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadClientRoutineBinaryChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RB_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rbId = iprot.readString();
                struct.setRbIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CHUNK
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.chunk = new at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO();
                struct.chunk.read(iprot);
                struct.setChunkIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadClientRoutineBinaryChunk_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rbId != null) {
          oprot.writeFieldBegin(RB_ID_FIELD_DESC);
          oprot.writeString(struct.rbId);
          oprot.writeFieldEnd();
        }
        if (struct.chunk != null) {
          oprot.writeFieldBegin(CHUNK_FIELD_DESC);
          struct.chunk.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadClientRoutineBinaryChunk_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientRoutineBinaryChunk_argsTupleScheme getScheme() {
        return new uploadClientRoutineBinaryChunk_argsTupleScheme();
      }
    }

    private static class uploadClientRoutineBinaryChunk_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadClientRoutineBinaryChunk_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadClientRoutineBinaryChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRbId()) {
          optionals.set(0);
        }
        if (struct.isSetChunk()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetRbId()) {
          oprot.writeString(struct.rbId);
        }
        if (struct.isSetChunk()) {
          struct.chunk.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadClientRoutineBinaryChunk_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.rbId = iprot.readString();
          struct.setRbIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.chunk = new at.enfilo.def.transfer.dto.RoutineBinaryChunkDTO();
          struct.chunk.read(iprot);
          struct.setChunkIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class uploadClientRoutineBinaryChunk_result implements org.apache.thrift.TBase<uploadClientRoutineBinaryChunk_result, uploadClientRoutineBinaryChunk_result._Fields>, java.io.Serializable, Cloneable, Comparable<uploadClientRoutineBinaryChunk_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("uploadClientRoutineBinaryChunk_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new uploadClientRoutineBinaryChunk_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new uploadClientRoutineBinaryChunk_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(uploadClientRoutineBinaryChunk_result.class, metaDataMap);
    }

    public uploadClientRoutineBinaryChunk_result() {
    }

    public uploadClientRoutineBinaryChunk_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public uploadClientRoutineBinaryChunk_result(uploadClientRoutineBinaryChunk_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public uploadClientRoutineBinaryChunk_result deepCopy() {
      return new uploadClientRoutineBinaryChunk_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public uploadClientRoutineBinaryChunk_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof uploadClientRoutineBinaryChunk_result)
        return this.equals((uploadClientRoutineBinaryChunk_result)that);
      return false;
    }

    public boolean equals(uploadClientRoutineBinaryChunk_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(uploadClientRoutineBinaryChunk_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("uploadClientRoutineBinaryChunk_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class uploadClientRoutineBinaryChunk_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientRoutineBinaryChunk_resultStandardScheme getScheme() {
        return new uploadClientRoutineBinaryChunk_resultStandardScheme();
      }
    }

    private static class uploadClientRoutineBinaryChunk_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<uploadClientRoutineBinaryChunk_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, uploadClientRoutineBinaryChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, uploadClientRoutineBinaryChunk_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class uploadClientRoutineBinaryChunk_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public uploadClientRoutineBinaryChunk_resultTupleScheme getScheme() {
        return new uploadClientRoutineBinaryChunk_resultTupleScheme();
      }
    }

    private static class uploadClientRoutineBinaryChunk_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<uploadClientRoutineBinaryChunk_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, uploadClientRoutineBinaryChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, uploadClientRoutineBinaryChunk_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeClientRoutine_args implements org.apache.thrift.TBase<removeClientRoutine_args, removeClientRoutine_args._Fields>, java.io.Serializable, Cloneable, Comparable<removeClientRoutine_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeClientRoutine_args");

    private static final org.apache.thrift.protocol.TField RC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("rcId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeClientRoutine_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeClientRoutine_argsTupleSchemeFactory();

    public java.lang.String rcId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      RC_ID((short)1, "rcId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // RC_ID
            return RC_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.RC_ID, new org.apache.thrift.meta_data.FieldMetaData("rcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeClientRoutine_args.class, metaDataMap);
    }

    public removeClientRoutine_args() {
    }

    public removeClientRoutine_args(
      java.lang.String rcId)
    {
      this();
      this.rcId = rcId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeClientRoutine_args(removeClientRoutine_args other) {
      if (other.isSetRcId()) {
        this.rcId = other.rcId;
      }
    }

    public removeClientRoutine_args deepCopy() {
      return new removeClientRoutine_args(this);
    }

    @Override
    public void clear() {
      this.rcId = null;
    }

    public java.lang.String getRcId() {
      return this.rcId;
    }

    public removeClientRoutine_args setRcId(java.lang.String rcId) {
      this.rcId = rcId;
      return this;
    }

    public void unsetRcId() {
      this.rcId = null;
    }

    /** Returns true if field rcId is set (has been assigned a value) and false otherwise */
    public boolean isSetRcId() {
      return this.rcId != null;
    }

    public void setRcIdIsSet(boolean value) {
      if (!value) {
        this.rcId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case RC_ID:
        if (value == null) {
          unsetRcId();
        } else {
          setRcId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case RC_ID:
        return getRcId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case RC_ID:
        return isSetRcId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeClientRoutine_args)
        return this.equals((removeClientRoutine_args)that);
      return false;
    }

    public boolean equals(removeClientRoutine_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_rcId = true && this.isSetRcId();
      boolean that_present_rcId = true && that.isSetRcId();
      if (this_present_rcId || that_present_rcId) {
        if (!(this_present_rcId && that_present_rcId))
          return false;
        if (!this.rcId.equals(that.rcId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetRcId()) ? 131071 : 524287);
      if (isSetRcId())
        hashCode = hashCode * 8191 + rcId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeClientRoutine_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetRcId()).compareTo(other.isSetRcId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetRcId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.rcId, other.rcId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeClientRoutine_args(");
      boolean first = true;

      sb.append("rcId:");
      if (this.rcId == null) {
        sb.append("null");
      } else {
        sb.append(this.rcId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeClientRoutine_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeClientRoutine_argsStandardScheme getScheme() {
        return new removeClientRoutine_argsStandardScheme();
      }
    }

    private static class removeClientRoutine_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeClientRoutine_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeClientRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // RC_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.rcId = iprot.readString();
                struct.setRcIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeClientRoutine_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.rcId != null) {
          oprot.writeFieldBegin(RC_ID_FIELD_DESC);
          oprot.writeString(struct.rcId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeClientRoutine_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeClientRoutine_argsTupleScheme getScheme() {
        return new removeClientRoutine_argsTupleScheme();
      }
    }

    private static class removeClientRoutine_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeClientRoutine_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeClientRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetRcId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetRcId()) {
          oprot.writeString(struct.rcId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeClientRoutine_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.rcId = iprot.readString();
          struct.setRcIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class removeClientRoutine_result implements org.apache.thrift.TBase<removeClientRoutine_result, removeClientRoutine_result._Fields>, java.io.Serializable, Cloneable, Comparable<removeClientRoutine_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("removeClientRoutine_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new removeClientRoutine_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new removeClientRoutine_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(removeClientRoutine_result.class, metaDataMap);
    }

    public removeClientRoutine_result() {
    }

    public removeClientRoutine_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public removeClientRoutine_result(removeClientRoutine_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public removeClientRoutine_result deepCopy() {
      return new removeClientRoutine_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public removeClientRoutine_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof removeClientRoutine_result)
        return this.equals((removeClientRoutine_result)that);
      return false;
    }

    public boolean equals(removeClientRoutine_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(removeClientRoutine_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("removeClientRoutine_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class removeClientRoutine_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeClientRoutine_resultStandardScheme getScheme() {
        return new removeClientRoutine_resultStandardScheme();
      }
    }

    private static class removeClientRoutine_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<removeClientRoutine_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, removeClientRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, removeClientRoutine_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class removeClientRoutine_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public removeClientRoutine_resultTupleScheme getScheme() {
        return new removeClientRoutine_resultTupleScheme();
      }
    }

    private static class removeClientRoutine_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<removeClientRoutine_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, removeClientRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, removeClientRoutine_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFeatureByNameAndVersion_args implements org.apache.thrift.TBase<getFeatureByNameAndVersion_args, getFeatureByNameAndVersion_args._Fields>, java.io.Serializable, Cloneable, Comparable<getFeatureByNameAndVersion_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeatureByNameAndVersion_args");

    private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFeatureByNameAndVersion_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFeatureByNameAndVersion_argsTupleSchemeFactory();

    public java.lang.String name; // required
    public java.lang.String version; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      NAME((short)1, "name"),
      VERSION((short)2, "version");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // NAME
            return NAME;
          case 2: // VERSION
            return VERSION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeatureByNameAndVersion_args.class, metaDataMap);
    }

    public getFeatureByNameAndVersion_args() {
    }

    public getFeatureByNameAndVersion_args(
      java.lang.String name,
      java.lang.String version)
    {
      this();
      this.name = name;
      this.version = version;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeatureByNameAndVersion_args(getFeatureByNameAndVersion_args other) {
      if (other.isSetName()) {
        this.name = other.name;
      }
      if (other.isSetVersion()) {
        this.version = other.version;
      }
    }

    public getFeatureByNameAndVersion_args deepCopy() {
      return new getFeatureByNameAndVersion_args(this);
    }

    @Override
    public void clear() {
      this.name = null;
      this.version = null;
    }

    public java.lang.String getName() {
      return this.name;
    }

    public getFeatureByNameAndVersion_args setName(java.lang.String name) {
      this.name = name;
      return this;
    }

    public void unsetName() {
      this.name = null;
    }

    /** Returns true if field name is set (has been assigned a value) and false otherwise */
    public boolean isSetName() {
      return this.name != null;
    }

    public void setNameIsSet(boolean value) {
      if (!value) {
        this.name = null;
      }
    }

    public java.lang.String getVersion() {
      return this.version;
    }

    public getFeatureByNameAndVersion_args setVersion(java.lang.String version) {
      this.version = version;
      return this;
    }

    public void unsetVersion() {
      this.version = null;
    }

    /** Returns true if field version is set (has been assigned a value) and false otherwise */
    public boolean isSetVersion() {
      return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
      if (!value) {
        this.version = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case NAME:
        if (value == null) {
          unsetName();
        } else {
          setName((java.lang.String)value);
        }
        break;

      case VERSION:
        if (value == null) {
          unsetVersion();
        } else {
          setVersion((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case NAME:
        return getName();

      case VERSION:
        return getVersion();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case NAME:
        return isSetName();
      case VERSION:
        return isSetVersion();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeatureByNameAndVersion_args)
        return this.equals((getFeatureByNameAndVersion_args)that);
      return false;
    }

    public boolean equals(getFeatureByNameAndVersion_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_name = true && this.isSetName();
      boolean that_present_name = true && that.isSetName();
      if (this_present_name || that_present_name) {
        if (!(this_present_name && that_present_name))
          return false;
        if (!this.name.equals(that.name))
          return false;
      }

      boolean this_present_version = true && this.isSetVersion();
      boolean that_present_version = true && that.isSetVersion();
      if (this_present_version || that_present_version) {
        if (!(this_present_version && that_present_version))
          return false;
        if (!this.version.equals(that.version))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
      if (isSetName())
        hashCode = hashCode * 8191 + name.hashCode();

      hashCode = hashCode * 8191 + ((isSetVersion()) ? 131071 : 524287);
      if (isSetVersion())
        hashCode = hashCode * 8191 + version.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFeatureByNameAndVersion_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetName()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetVersion()).compareTo(other.isSetVersion());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetVersion()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, other.version);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFeatureByNameAndVersion_args(");
      boolean first = true;

      sb.append("name:");
      if (this.name == null) {
        sb.append("null");
      } else {
        sb.append(this.name);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("version:");
      if (this.version == null) {
        sb.append("null");
      } else {
        sb.append(this.version);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeatureByNameAndVersion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFeatureByNameAndVersion_argsStandardScheme getScheme() {
        return new getFeatureByNameAndVersion_argsStandardScheme();
      }
    }

    private static class getFeatureByNameAndVersion_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFeatureByNameAndVersion_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeatureByNameAndVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // NAME
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.name = iprot.readString();
                struct.setNameIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // VERSION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.version = iprot.readString();
                struct.setVersionIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeatureByNameAndVersion_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.name != null) {
          oprot.writeFieldBegin(NAME_FIELD_DESC);
          oprot.writeString(struct.name);
          oprot.writeFieldEnd();
        }
        if (struct.version != null) {
          oprot.writeFieldBegin(VERSION_FIELD_DESC);
          oprot.writeString(struct.version);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeatureByNameAndVersion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFeatureByNameAndVersion_argsTupleScheme getScheme() {
        return new getFeatureByNameAndVersion_argsTupleScheme();
      }
    }

    private static class getFeatureByNameAndVersion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFeatureByNameAndVersion_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeatureByNameAndVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetName()) {
          optionals.set(0);
        }
        if (struct.isSetVersion()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetName()) {
          oprot.writeString(struct.name);
        }
        if (struct.isSetVersion()) {
          oprot.writeString(struct.version);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeatureByNameAndVersion_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.name = iprot.readString();
          struct.setNameIsSet(true);
        }
        if (incoming.get(1)) {
          struct.version = iprot.readString();
          struct.setVersionIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getFeatureByNameAndVersion_result implements org.apache.thrift.TBase<getFeatureByNameAndVersion_result, getFeatureByNameAndVersion_result._Fields>, java.io.Serializable, Cloneable, Comparable<getFeatureByNameAndVersion_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getFeatureByNameAndVersion_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getFeatureByNameAndVersion_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getFeatureByNameAndVersion_resultTupleSchemeFactory();

    public java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getFeatureByNameAndVersion_result.class, metaDataMap);
    }

    public getFeatureByNameAndVersion_result() {
    }

    public getFeatureByNameAndVersion_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getFeatureByNameAndVersion_result(getFeatureByNameAndVersion_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getFeatureByNameAndVersion_result deepCopy() {
      return new getFeatureByNameAndVersion_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public getFeatureByNameAndVersion_result setSuccess(java.lang.String success) {
      this.success = success;
      return this;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getFeatureByNameAndVersion_result)
        return this.equals((getFeatureByNameAndVersion_result)that);
      return false;
    }

    public boolean equals(getFeatureByNameAndVersion_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getFeatureByNameAndVersion_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getFeatureByNameAndVersion_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getFeatureByNameAndVersion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFeatureByNameAndVersion_resultStandardScheme getScheme() {
        return new getFeatureByNameAndVersion_resultStandardScheme();
      }
    }

    private static class getFeatureByNameAndVersion_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getFeatureByNameAndVersion_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getFeatureByNameAndVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getFeatureByNameAndVersion_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getFeatureByNameAndVersion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getFeatureByNameAndVersion_resultTupleScheme getScheme() {
        return new getFeatureByNameAndVersion_resultTupleScheme();
      }
    }

    private static class getFeatureByNameAndVersion_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getFeatureByNameAndVersion_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getFeatureByNameAndVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getFeatureByNameAndVersion_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
