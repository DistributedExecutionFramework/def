/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RoutineCommunication_TYPES_H
#define RoutineCommunication_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/stdcxx.h>


namespace at { namespace enfilo { namespace def { namespace routine { namespace api {

struct Command {
  enum type {
    GET_PARAMETER = 0,
    GET_PARAMETER_KEY = 1,
    EXEC_ROUTINE = 2,
    SEND_RESULT = 3,
    ROUTINE_DONE = 4,
    LOG_DEBUG = 5,
    LOG_INFO = 6,
    LOG_ERROR = 7,
    CANCEL = 8
  };
};

extern const std::map<int, const char*> _Command_VALUES_TO_NAMES;

std::ostream& operator<<(std::ostream& out, const Command::type& val);

class Order;

class Result;

typedef struct _Order__isset {
  _Order__isset() : command(false), value(false) {}
  bool command :1;
  bool value :1;
} _Order__isset;

class Order : public virtual ::apache::thrift::TBase {
 public:

  Order(const Order&);
  Order& operator=(const Order&);
  Order() : command((Command::type)0), value() {
  }

  virtual ~Order() throw();
  Command::type command;
  std::string value;

  _Order__isset __isset;

  void __set_command(const Command::type val);

  void __set_value(const std::string& val);

  bool operator == (const Order & rhs) const
  {
    if (!(command == rhs.command))
      return false;
    if (!(value == rhs.value))
      return false;
    return true;
  }
  bool operator != (const Order &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Order & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Order &a, Order &b);

std::ostream& operator<<(std::ostream& out, const Order& obj);

typedef struct _Result__isset {
  _Result__isset() : seq(false), key(false), url(false), data(false) {}
  bool seq :1;
  bool key :1;
  bool url :1;
  bool data :1;
} _Result__isset;

class Result : public virtual ::apache::thrift::TBase {
 public:

  Result(const Result&);
  Result& operator=(const Result&);
  Result() : seq(0), key(), url(), data() {
  }

  virtual ~Result() throw();
  int32_t seq;
  std::string key;
  std::string url;
  std::string data;

  _Result__isset __isset;

  void __set_seq(const int32_t val);

  void __set_key(const std::string& val);

  void __set_url(const std::string& val);

  void __set_data(const std::string& val);

  bool operator == (const Result & rhs) const
  {
    if (!(seq == rhs.seq))
      return false;
    if (!(key == rhs.key))
      return false;
    if (!(url == rhs.url))
      return false;
    if (!(data == rhs.data))
      return false;
    return true;
  }
  bool operator != (const Result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const Result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(Result &a, Result &b);

std::ostream& operator<<(std::ostream& out, const Result& obj);

}}}}} // namespace

#endif
