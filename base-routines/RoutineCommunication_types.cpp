/**
 * Autogenerated by Thrift Compiler (0.12.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "RoutineCommunication_types.h"

#include <algorithm>
#include <ostream>

#include <thrift/TToString.h>

namespace at { namespace enfilo { namespace def { namespace routine { namespace api {

int _kCommandValues[] = {
  Command::GET_PARAMETER,
  Command::GET_PARAMETER_KEY,
  Command::EXEC_ROUTINE,
  Command::SEND_RESULT,
  Command::ROUTINE_DONE,
  Command::LOG_DEBUG,
  Command::LOG_INFO,
  Command::LOG_ERROR,
  Command::CANCEL
};
const char* _kCommandNames[] = {
  "GET_PARAMETER",
  "GET_PARAMETER_KEY",
  "EXEC_ROUTINE",
  "SEND_RESULT",
  "ROUTINE_DONE",
  "LOG_DEBUG",
  "LOG_INFO",
  "LOG_ERROR",
  "CANCEL"
};
const std::map<int, const char*> _Command_VALUES_TO_NAMES(::apache::thrift::TEnumIterator(9, _kCommandValues, _kCommandNames), ::apache::thrift::TEnumIterator(-1, NULL, NULL));

std::ostream& operator<<(std::ostream& out, const Command::type& val) {
  std::map<int, const char*>::const_iterator it = _Command_VALUES_TO_NAMES.find(val);
  if (it != _Command_VALUES_TO_NAMES.end()) {
    out << it->second;
  } else {
    out << static_cast<int>(val);
  }
  return out;
}


Order::~Order() throw() {
}


void Order::__set_command(const Command::type val) {
  this->command = val;
}

void Order::__set_value(const std::string& val) {
  this->value = val;
}
std::ostream& operator<<(std::ostream& out, const Order& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Order::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          int32_t ecast0;
          xfer += iprot->readI32(ecast0);
          this->command = (Command::type)ecast0;
          this->__isset.command = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->value);
          this->__isset.value = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Order::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Order");

  xfer += oprot->writeFieldBegin("command", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32((int32_t)this->command);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("value", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->value);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Order &a, Order &b) {
  using ::std::swap;
  swap(a.command, b.command);
  swap(a.value, b.value);
  swap(a.__isset, b.__isset);
}

Order::Order(const Order& other1) {
  command = other1.command;
  value = other1.value;
  __isset = other1.__isset;
}
Order& Order::operator=(const Order& other2) {
  command = other2.command;
  value = other2.value;
  __isset = other2.__isset;
  return *this;
}
void Order::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Order(";
  out << "command=" << to_string(command);
  out << ", " << "value=" << to_string(value);
  out << ")";
}


Result::~Result() throw() {
}


void Result::__set_seq(const int32_t val) {
  this->seq = val;
}

void Result::__set_key(const std::string& val) {
  this->key = val;
}

void Result::__set_url(const std::string& val) {
  this->url = val;
}

void Result::__set_data(const std::string& val) {
  this->data = val;
}
std::ostream& operator<<(std::ostream& out, const Result& obj)
{
  obj.printTo(out);
  return out;
}


uint32_t Result::read(::apache::thrift::protocol::TProtocol* iprot) {

  ::apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_I32) {
          xfer += iprot->readI32(this->seq);
          this->__isset.seq = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->key);
          this->__isset.key = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 3:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->url);
          this->__isset.url = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 4:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readBinary(this->data);
          this->__isset.data = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t Result::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  ::apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("Result");

  xfer += oprot->writeFieldBegin("seq", ::apache::thrift::protocol::T_I32, 1);
  xfer += oprot->writeI32(this->seq);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("key", ::apache::thrift::protocol::T_STRING, 2);
  xfer += oprot->writeString(this->key);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("url", ::apache::thrift::protocol::T_STRING, 3);
  xfer += oprot->writeString(this->url);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("data", ::apache::thrift::protocol::T_STRING, 4);
  xfer += oprot->writeBinary(this->data);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void swap(Result &a, Result &b) {
  using ::std::swap;
  swap(a.seq, b.seq);
  swap(a.key, b.key);
  swap(a.url, b.url);
  swap(a.data, b.data);
  swap(a.__isset, b.__isset);
}

Result::Result(const Result& other3) {
  seq = other3.seq;
  key = other3.key;
  url = other3.url;
  data = other3.data;
  __isset = other3.__isset;
}
Result& Result::operator=(const Result& other4) {
  seq = other4.seq;
  key = other4.key;
  url = other4.url;
  data = other4.data;
  __isset = other4.__isset;
  return *this;
}
void Result::printTo(std::ostream& out) const {
  using ::apache::thrift::to_string;
  out << "Result(";
  out << "seq=" << to_string(seq);
  out << ", " << "key=" << to_string(key);
  out << ", " << "url=" << to_string(url);
  out << ", " << "data=" << to_string(data);
  out << ")";
}

}}}}} // namespace
