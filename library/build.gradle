apply plugin: 'application'

dependencies {
    // Project dependencies
    compile project(':library-admin-api')
    compile project(':communication')
    compile project(':persistence')
    compile project(':demo-routines')

    // https://mvnrepository.com/artifact/com.h2database/h2
    compile group: 'com.h2database', name: 'h2', version: h2Version
    testCompile project(':persistence').sourceSets.test.output
}

mainClassName = 'at.enfilo.def.library.Library'

shadowJar {
    exclude 'library.yml'
    exclude 'demo-routines.jar'
    exclude 'log4j2.xml'
}

jar {
    exclude '**/demo-routines.jar'
}

remotes {
    defHost {
        host = 'localhost'
        user = 'def'
        password = 'def'
    }
}

// run 'gradle deploy -Phost=<ip>'
task deploy {
    doLast {
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            String host = project.getProperties().get('host')
            remotes.defHost.host = host

            String persistenceBuildDir = project(':persistence').buildDir.path

            println 'Try to deploy on ' + remotes.defHost

            session(remotes.defHost) {
                executeScript file('src/main/sh/stop.sh')
                executeScript file('src/main/sh/clean.sh')
                copy {
                    from "$buildDir/libs"
                    from "$buildDir/resources/main"
                    from "$persistenceBuildDir/resources/main/database.yml"
                    into "$buildDir/library/"
                }
                put from: "$buildDir/library", into: "."
                executeScript file('src/main/sh/start.sh')
            }
        }
    }
}

task restart {
    doLast {
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            String host = project.getProperties().get('host')
            remotes.defHost.host = host

            println 'Try to restart on ' + remotes.defHost
            session(remotes.defHost) {
                executeScript file('src/main/sh/stop.sh')
                executeScript file('src/main/sh/start.sh')
            }
        }
    }
}

// Task deps
deploy.dependsOn shadowJar
compileJava.dependsOn copyDemoRoutines
copyDemoRoutines.dependsOn project(':demo-routines').shadowJar
