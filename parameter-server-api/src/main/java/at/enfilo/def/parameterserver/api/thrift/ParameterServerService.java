/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.parameterserver.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-05-27")
public class ParameterServerService {

  /**
   * Parameter Server Service API.
   */
  public interface Iface {

    /**
     * Set the value for a parameter with the program id and parameter id given.
     * 
     * 
     * @param programId
     * @param parameterId
     * @param parameter
     * @param protocol
     */
    public java.lang.String setParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException;

    /**
     * Creates a new parameter with the given program id, parameter id and type.
     * 
     * 
     * @param programId
     * @param parameterId
     * @param parameter
     * @param protocol
     * @param type
     */
    public java.lang.String createParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, at.enfilo.def.transfer.dto.ParameterType type) throws org.apache.thrift.TException;

    /**
     * Request a parameter with the given program id and parameter id.
     * 
     * @param programId
     * @param parameterId
     * @param protocol
     */
    public java.lang.String getParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException;

    /**
     * Update a stored parameter with the given program id and parameter id by adding the value in the given parameter.
     * 
     * @param programId
     * @param parameterId
     * @param parameter
     * @param protocol
     */
    public java.lang.String addToParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException;

    /**
     * Delete a parameter with the given program id and parameter id
     * 
     * 
     * @param programId
     * @param parameterId
     */
    public java.lang.String deleteParameter(java.lang.String programId, java.lang.String parameterId) throws org.apache.thrift.TException;

    /**
     * Delete all stored parameters for the given programId
     * 
     * 
     * @param programId
     */
    public java.lang.String deleteAllParameters(java.lang.String programId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void setParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void createParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, at.enfilo.def.transfer.dto.ParameterType type, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void addToParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void deleteParameter(java.lang.String programId, java.lang.String parameterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void deleteAllParameters(java.lang.String programId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String setParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException
    {
      send_setParameter(programId, parameterId, parameter, protocol);
      return recv_setParameter();
    }

    public void send_setParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException
    {
      setParameter_args args = new setParameter_args();
      args.setProgramId(programId);
      args.setParameterId(parameterId);
      args.setParameter(parameter);
      args.setProtocol(protocol);
      sendBase("setParameter", args);
    }

    public java.lang.String recv_setParameter() throws org.apache.thrift.TException
    {
      setParameter_result result = new setParameter_result();
      receiveBase(result, "setParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "setParameter failed: unknown result");
    }

    public java.lang.String createParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, at.enfilo.def.transfer.dto.ParameterType type) throws org.apache.thrift.TException
    {
      send_createParameter(programId, parameterId, parameter, protocol, type);
      return recv_createParameter();
    }

    public void send_createParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, at.enfilo.def.transfer.dto.ParameterType type) throws org.apache.thrift.TException
    {
      createParameter_args args = new createParameter_args();
      args.setProgramId(programId);
      args.setParameterId(parameterId);
      args.setParameter(parameter);
      args.setProtocol(protocol);
      args.setType(type);
      sendBase("createParameter", args);
    }

    public java.lang.String recv_createParameter() throws org.apache.thrift.TException
    {
      createParameter_result result = new createParameter_result();
      receiveBase(result, "createParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createParameter failed: unknown result");
    }

    public java.lang.String getParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException
    {
      send_getParameter(programId, parameterId, protocol);
      return recv_getParameter();
    }

    public void send_getParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException
    {
      getParameter_args args = new getParameter_args();
      args.setProgramId(programId);
      args.setParameterId(parameterId);
      args.setProtocol(protocol);
      sendBase("getParameter", args);
    }

    public java.lang.String recv_getParameter() throws org.apache.thrift.TException
    {
      getParameter_result result = new getParameter_result();
      receiveBase(result, "getParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getParameter failed: unknown result");
    }

    public java.lang.String addToParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException
    {
      send_addToParameter(programId, parameterId, parameter, protocol);
      return recv_addToParameter();
    }

    public void send_addToParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol) throws org.apache.thrift.TException
    {
      addToParameter_args args = new addToParameter_args();
      args.setProgramId(programId);
      args.setParameterId(parameterId);
      args.setParameter(parameter);
      args.setProtocol(protocol);
      sendBase("addToParameter", args);
    }

    public java.lang.String recv_addToParameter() throws org.apache.thrift.TException
    {
      addToParameter_result result = new addToParameter_result();
      receiveBase(result, "addToParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "addToParameter failed: unknown result");
    }

    public java.lang.String deleteParameter(java.lang.String programId, java.lang.String parameterId) throws org.apache.thrift.TException
    {
      send_deleteParameter(programId, parameterId);
      return recv_deleteParameter();
    }

    public void send_deleteParameter(java.lang.String programId, java.lang.String parameterId) throws org.apache.thrift.TException
    {
      deleteParameter_args args = new deleteParameter_args();
      args.setProgramId(programId);
      args.setParameterId(parameterId);
      sendBase("deleteParameter", args);
    }

    public java.lang.String recv_deleteParameter() throws org.apache.thrift.TException
    {
      deleteParameter_result result = new deleteParameter_result();
      receiveBase(result, "deleteParameter");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteParameter failed: unknown result");
    }

    public java.lang.String deleteAllParameters(java.lang.String programId) throws org.apache.thrift.TException
    {
      send_deleteAllParameters(programId);
      return recv_deleteAllParameters();
    }

    public void send_deleteAllParameters(java.lang.String programId) throws org.apache.thrift.TException
    {
      deleteAllParameters_args args = new deleteAllParameters_args();
      args.setProgramId(programId);
      sendBase("deleteAllParameters", args);
    }

    public java.lang.String recv_deleteAllParameters() throws org.apache.thrift.TException
    {
      deleteAllParameters_result result = new deleteAllParameters_result();
      receiveBase(result, "deleteAllParameters");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "deleteAllParameters failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void setParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      setParameter_call method_call = new setParameter_call(programId, parameterId, parameter, protocol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class setParameter_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String programId;
      private java.lang.String parameterId;
      private at.enfilo.def.transfer.dto.ResourceDTO parameter;
      private at.enfilo.def.transfer.dto.ParameterProtocol protocol;
      public setParameter_call(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.programId = programId;
        this.parameterId = parameterId;
        this.parameter = parameter;
        this.protocol = protocol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        setParameter_args args = new setParameter_args();
        args.setProgramId(programId);
        args.setParameterId(parameterId);
        args.setParameter(parameter);
        args.setProtocol(protocol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_setParameter();
      }
    }

    public void createParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, at.enfilo.def.transfer.dto.ParameterType type, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createParameter_call method_call = new createParameter_call(programId, parameterId, parameter, protocol, type, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createParameter_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String programId;
      private java.lang.String parameterId;
      private at.enfilo.def.transfer.dto.ResourceDTO parameter;
      private at.enfilo.def.transfer.dto.ParameterProtocol protocol;
      private at.enfilo.def.transfer.dto.ParameterType type;
      public createParameter_call(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, at.enfilo.def.transfer.dto.ParameterType type, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.programId = programId;
        this.parameterId = parameterId;
        this.parameter = parameter;
        this.protocol = protocol;
        this.type = type;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createParameter_args args = new createParameter_args();
        args.setProgramId(programId);
        args.setParameterId(parameterId);
        args.setParameter(parameter);
        args.setProtocol(protocol);
        args.setType(type);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createParameter();
      }
    }

    public void getParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getParameter_call method_call = new getParameter_call(programId, parameterId, protocol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getParameter_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String programId;
      private java.lang.String parameterId;
      private at.enfilo.def.transfer.dto.ParameterProtocol protocol;
      public getParameter_call(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.programId = programId;
        this.parameterId = parameterId;
        this.protocol = protocol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getParameter_args args = new getParameter_args();
        args.setProgramId(programId);
        args.setParameterId(parameterId);
        args.setProtocol(protocol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getParameter();
      }
    }

    public void addToParameter(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      addToParameter_call method_call = new addToParameter_call(programId, parameterId, parameter, protocol, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class addToParameter_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String programId;
      private java.lang.String parameterId;
      private at.enfilo.def.transfer.dto.ResourceDTO parameter;
      private at.enfilo.def.transfer.dto.ParameterProtocol protocol;
      public addToParameter_call(java.lang.String programId, java.lang.String parameterId, at.enfilo.def.transfer.dto.ResourceDTO parameter, at.enfilo.def.transfer.dto.ParameterProtocol protocol, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.programId = programId;
        this.parameterId = parameterId;
        this.parameter = parameter;
        this.protocol = protocol;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("addToParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        addToParameter_args args = new addToParameter_args();
        args.setProgramId(programId);
        args.setParameterId(parameterId);
        args.setParameter(parameter);
        args.setProtocol(protocol);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_addToParameter();
      }
    }

    public void deleteParameter(java.lang.String programId, java.lang.String parameterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteParameter_call method_call = new deleteParameter_call(programId, parameterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteParameter_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String programId;
      private java.lang.String parameterId;
      public deleteParameter_call(java.lang.String programId, java.lang.String parameterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.programId = programId;
        this.parameterId = parameterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteParameter", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteParameter_args args = new deleteParameter_args();
        args.setProgramId(programId);
        args.setParameterId(parameterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteParameter();
      }
    }

    public void deleteAllParameters(java.lang.String programId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      deleteAllParameters_call method_call = new deleteAllParameters_call(programId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class deleteAllParameters_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String programId;
      public deleteAllParameters_call(java.lang.String programId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.programId = programId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("deleteAllParameters", org.apache.thrift.protocol.TMessageType.CALL, 0));
        deleteAllParameters_args args = new deleteAllParameters_args();
        args.setProgramId(programId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_deleteAllParameters();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("setParameter", new setParameter());
      processMap.put("createParameter", new createParameter());
      processMap.put("getParameter", new getParameter());
      processMap.put("addToParameter", new addToParameter());
      processMap.put("deleteParameter", new deleteParameter());
      processMap.put("deleteAllParameters", new deleteAllParameters());
      return processMap;
    }

    public static class setParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setParameter_args> {
      public setParameter() {
        super("setParameter");
      }

      public setParameter_args getEmptyArgsInstance() {
        return new setParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public setParameter_result getResult(I iface, setParameter_args args) throws org.apache.thrift.TException {
        setParameter_result result = new setParameter_result();
        result.success = iface.setParameter(args.programId, args.parameterId, args.parameter, args.protocol);
        return result;
      }
    }

    public static class createParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createParameter_args> {
      public createParameter() {
        super("createParameter");
      }

      public createParameter_args getEmptyArgsInstance() {
        return new createParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createParameter_result getResult(I iface, createParameter_args args) throws org.apache.thrift.TException {
        createParameter_result result = new createParameter_result();
        result.success = iface.createParameter(args.programId, args.parameterId, args.parameter, args.protocol, args.type);
        return result;
      }
    }

    public static class getParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getParameter_args> {
      public getParameter() {
        super("getParameter");
      }

      public getParameter_args getEmptyArgsInstance() {
        return new getParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getParameter_result getResult(I iface, getParameter_args args) throws org.apache.thrift.TException {
        getParameter_result result = new getParameter_result();
        result.success = iface.getParameter(args.programId, args.parameterId, args.protocol);
        return result;
      }
    }

    public static class addToParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, addToParameter_args> {
      public addToParameter() {
        super("addToParameter");
      }

      public addToParameter_args getEmptyArgsInstance() {
        return new addToParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public addToParameter_result getResult(I iface, addToParameter_args args) throws org.apache.thrift.TException {
        addToParameter_result result = new addToParameter_result();
        result.success = iface.addToParameter(args.programId, args.parameterId, args.parameter, args.protocol);
        return result;
      }
    }

    public static class deleteParameter<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteParameter_args> {
      public deleteParameter() {
        super("deleteParameter");
      }

      public deleteParameter_args getEmptyArgsInstance() {
        return new deleteParameter_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteParameter_result getResult(I iface, deleteParameter_args args) throws org.apache.thrift.TException {
        deleteParameter_result result = new deleteParameter_result();
        result.success = iface.deleteParameter(args.programId, args.parameterId);
        return result;
      }
    }

    public static class deleteAllParameters<I extends Iface> extends org.apache.thrift.ProcessFunction<I, deleteAllParameters_args> {
      public deleteAllParameters() {
        super("deleteAllParameters");
      }

      public deleteAllParameters_args getEmptyArgsInstance() {
        return new deleteAllParameters_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public deleteAllParameters_result getResult(I iface, deleteAllParameters_args args) throws org.apache.thrift.TException {
        deleteAllParameters_result result = new deleteAllParameters_result();
        result.success = iface.deleteAllParameters(args.programId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("setParameter", new setParameter());
      processMap.put("createParameter", new createParameter());
      processMap.put("getParameter", new getParameter());
      processMap.put("addToParameter", new addToParameter());
      processMap.put("deleteParameter", new deleteParameter());
      processMap.put("deleteAllParameters", new deleteAllParameters());
      return processMap;
    }

    public static class setParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, setParameter_args, java.lang.String> {
      public setParameter() {
        super("setParameter");
      }

      public setParameter_args getEmptyArgsInstance() {
        return new setParameter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            setParameter_result result = new setParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            setParameter_result result = new setParameter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, setParameter_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.setParameter(args.programId, args.parameterId, args.parameter, args.protocol,resultHandler);
      }
    }

    public static class createParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createParameter_args, java.lang.String> {
      public createParameter() {
        super("createParameter");
      }

      public createParameter_args getEmptyArgsInstance() {
        return new createParameter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createParameter_result result = new createParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createParameter_result result = new createParameter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createParameter_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createParameter(args.programId, args.parameterId, args.parameter, args.protocol, args.type,resultHandler);
      }
    }

    public static class getParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getParameter_args, java.lang.String> {
      public getParameter() {
        super("getParameter");
      }

      public getParameter_args getEmptyArgsInstance() {
        return new getParameter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getParameter_result result = new getParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getParameter_result result = new getParameter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getParameter_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getParameter(args.programId, args.parameterId, args.protocol,resultHandler);
      }
    }

    public static class addToParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, addToParameter_args, java.lang.String> {
      public addToParameter() {
        super("addToParameter");
      }

      public addToParameter_args getEmptyArgsInstance() {
        return new addToParameter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            addToParameter_result result = new addToParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            addToParameter_result result = new addToParameter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, addToParameter_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.addToParameter(args.programId, args.parameterId, args.parameter, args.protocol,resultHandler);
      }
    }

    public static class deleteParameter<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteParameter_args, java.lang.String> {
      public deleteParameter() {
        super("deleteParameter");
      }

      public deleteParameter_args getEmptyArgsInstance() {
        return new deleteParameter_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            deleteParameter_result result = new deleteParameter_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteParameter_result result = new deleteParameter_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteParameter_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.deleteParameter(args.programId, args.parameterId,resultHandler);
      }
    }

    public static class deleteAllParameters<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, deleteAllParameters_args, java.lang.String> {
      public deleteAllParameters() {
        super("deleteAllParameters");
      }

      public deleteAllParameters_args getEmptyArgsInstance() {
        return new deleteAllParameters_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            deleteAllParameters_result result = new deleteAllParameters_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            deleteAllParameters_result result = new deleteAllParameters_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, deleteAllParameters_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.deleteAllParameters(args.programId,resultHandler);
      }
    }

  }

  public static class setParameter_args implements org.apache.thrift.TBase<setParameter_args, setParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<setParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setParameter_args");

    private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setParameter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setParameter_argsTupleSchemeFactory();

    private java.lang.String programId; // required
    private java.lang.String parameterId; // required
    private at.enfilo.def.transfer.dto.ResourceDTO parameter; // required
    private at.enfilo.def.transfer.dto.ParameterProtocol protocol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRAM_ID((short)1, "programId"),
      PARAMETER_ID((short)2, "parameterId"),
      PARAMETER((short)3, "parameter"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ParameterProtocol
       */
      PROTOCOL((short)4, "protocol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRAM_ID
            return PROGRAM_ID;
          case 2: // PARAMETER_ID
            return PARAMETER_ID;
          case 3: // PARAMETER
            return PARAMETER;
          case 4: // PROTOCOL
            return PROTOCOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("parameterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.ResourceDTO.class)));
      tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ParameterProtocol.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setParameter_args.class, metaDataMap);
    }

    public setParameter_args() {
    }

    public setParameter_args(
      java.lang.String programId,
      java.lang.String parameterId,
      at.enfilo.def.transfer.dto.ResourceDTO parameter,
      at.enfilo.def.transfer.dto.ParameterProtocol protocol)
    {
      this();
      this.programId = programId;
      this.parameterId = parameterId;
      this.parameter = parameter;
      this.protocol = protocol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setParameter_args(setParameter_args other) {
      if (other.isSetProgramId()) {
        this.programId = other.programId;
      }
      if (other.isSetParameterId()) {
        this.parameterId = other.parameterId;
      }
      if (other.isSetParameter()) {
        this.parameter = new at.enfilo.def.transfer.dto.ResourceDTO(other.parameter);
      }
      if (other.isSetProtocol()) {
        this.protocol = other.protocol;
      }
    }

    public setParameter_args deepCopy() {
      return new setParameter_args(this);
    }

    @Override
    public void clear() {
      this.programId = null;
      this.parameterId = null;
      this.parameter = null;
      this.protocol = null;
    }

    public java.lang.String getProgramId() {
      return this.programId;
    }

    public void setProgramId(java.lang.String programId) {
      this.programId = programId;
    }

    public void unsetProgramId() {
      this.programId = null;
    }

    /** Returns true if field programId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramId() {
      return this.programId != null;
    }

    public void setProgramIdIsSet(boolean value) {
      if (!value) {
        this.programId = null;
      }
    }

    public java.lang.String getParameterId() {
      return this.parameterId;
    }

    public void setParameterId(java.lang.String parameterId) {
      this.parameterId = parameterId;
    }

    public void unsetParameterId() {
      this.parameterId = null;
    }

    /** Returns true if field parameterId is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterId() {
      return this.parameterId != null;
    }

    public void setParameterIdIsSet(boolean value) {
      if (!value) {
        this.parameterId = null;
      }
    }

    public at.enfilo.def.transfer.dto.ResourceDTO getParameter() {
      return this.parameter;
    }

    public void setParameter(at.enfilo.def.transfer.dto.ResourceDTO parameter) {
      this.parameter = parameter;
    }

    public void unsetParameter() {
      this.parameter = null;
    }

    /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
    public boolean isSetParameter() {
      return this.parameter != null;
    }

    public void setParameterIsSet(boolean value) {
      if (!value) {
        this.parameter = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public at.enfilo.def.transfer.dto.ParameterProtocol getProtocol() {
      return this.protocol;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public void setProtocol(at.enfilo.def.transfer.dto.ParameterProtocol protocol) {
      this.protocol = protocol;
    }

    public void unsetProtocol() {
      this.protocol = null;
    }

    /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocol() {
      return this.protocol != null;
    }

    public void setProtocolIsSet(boolean value) {
      if (!value) {
        this.protocol = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROGRAM_ID:
        if (value == null) {
          unsetProgramId();
        } else {
          setProgramId((java.lang.String)value);
        }
        break;

      case PARAMETER_ID:
        if (value == null) {
          unsetParameterId();
        } else {
          setParameterId((java.lang.String)value);
        }
        break;

      case PARAMETER:
        if (value == null) {
          unsetParameter();
        } else {
          setParameter((at.enfilo.def.transfer.dto.ResourceDTO)value);
        }
        break;

      case PROTOCOL:
        if (value == null) {
          unsetProtocol();
        } else {
          setProtocol((at.enfilo.def.transfer.dto.ParameterProtocol)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRAM_ID:
        return getProgramId();

      case PARAMETER_ID:
        return getParameterId();

      case PARAMETER:
        return getParameter();

      case PROTOCOL:
        return getProtocol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROGRAM_ID:
        return isSetProgramId();
      case PARAMETER_ID:
        return isSetParameterId();
      case PARAMETER:
        return isSetParameter();
      case PROTOCOL:
        return isSetProtocol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setParameter_args)
        return this.equals((setParameter_args)that);
      return false;
    }

    public boolean equals(setParameter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_programId = true && this.isSetProgramId();
      boolean that_present_programId = true && that.isSetProgramId();
      if (this_present_programId || that_present_programId) {
        if (!(this_present_programId && that_present_programId))
          return false;
        if (!this.programId.equals(that.programId))
          return false;
      }

      boolean this_present_parameterId = true && this.isSetParameterId();
      boolean that_present_parameterId = true && that.isSetParameterId();
      if (this_present_parameterId || that_present_parameterId) {
        if (!(this_present_parameterId && that_present_parameterId))
          return false;
        if (!this.parameterId.equals(that.parameterId))
          return false;
      }

      boolean this_present_parameter = true && this.isSetParameter();
      boolean that_present_parameter = true && that.isSetParameter();
      if (this_present_parameter || that_present_parameter) {
        if (!(this_present_parameter && that_present_parameter))
          return false;
        if (!this.parameter.equals(that.parameter))
          return false;
      }

      boolean this_present_protocol = true && this.isSetProtocol();
      boolean that_present_protocol = true && that.isSetProtocol();
      if (this_present_protocol || that_present_protocol) {
        if (!(this_present_protocol && that_present_protocol))
          return false;
        if (!this.protocol.equals(that.protocol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProgramId()) ? 131071 : 524287);
      if (isSetProgramId())
        hashCode = hashCode * 8191 + programId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterId()) ? 131071 : 524287);
      if (isSetParameterId())
        hashCode = hashCode * 8191 + parameterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameter()) ? 131071 : 524287);
      if (isSetParameter())
        hashCode = hashCode * 8191 + parameter.hashCode();

      hashCode = hashCode * 8191 + ((isSetProtocol()) ? 131071 : 524287);
      if (isSetProtocol())
        hashCode = hashCode * 8191 + protocol.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(setParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterId()).compareTo(other.isSetParameterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterId, other.parameterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setParameter_args(");
      boolean first = true;

      sb.append("programId:");
      if (this.programId == null) {
        sb.append("null");
      } else {
        sb.append(this.programId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterId:");
      if (this.parameterId == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocol:");
      if (this.protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.protocol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (parameter != null) {
        parameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setParameter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setParameter_argsStandardScheme getScheme() {
        return new setParameter_argsStandardScheme();
      }
    }

    private static class setParameter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.programId = iprot.readString();
                struct.setProgramIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parameterId = iprot.readString();
                struct.setParameterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parameter = new at.enfilo.def.transfer.dto.ResourceDTO();
                struct.parameter.read(iprot);
                struct.setParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROTOCOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
                struct.setProtocolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.programId != null) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.programId);
          oprot.writeFieldEnd();
        }
        if (struct.parameterId != null) {
          oprot.writeFieldBegin(PARAMETER_ID_FIELD_DESC);
          oprot.writeString(struct.parameterId);
          oprot.writeFieldEnd();
        }
        if (struct.parameter != null) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          struct.parameter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.protocol != null) {
          oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.protocol.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setParameter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setParameter_argsTupleScheme getScheme() {
        return new setParameter_argsTupleScheme();
      }
    }

    private static class setParameter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgramId()) {
          optionals.set(0);
        }
        if (struct.isSetParameterId()) {
          optionals.set(1);
        }
        if (struct.isSetParameter()) {
          optionals.set(2);
        }
        if (struct.isSetProtocol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProgramId()) {
          oprot.writeString(struct.programId);
        }
        if (struct.isSetParameterId()) {
          oprot.writeString(struct.parameterId);
        }
        if (struct.isSetParameter()) {
          struct.parameter.write(oprot);
        }
        if (struct.isSetProtocol()) {
          oprot.writeI32(struct.protocol.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.programId = iprot.readString();
          struct.setProgramIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parameterId = iprot.readString();
          struct.setParameterIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parameter = new at.enfilo.def.transfer.dto.ResourceDTO();
          struct.parameter.read(iprot);
          struct.setParameterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
          struct.setProtocolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class setParameter_result implements org.apache.thrift.TBase<setParameter_result, setParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<setParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("setParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setParameter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setParameter_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setParameter_result.class, metaDataMap);
    }

    public setParameter_result() {
    }

    public setParameter_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public setParameter_result(setParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public setParameter_result deepCopy() {
      return new setParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof setParameter_result)
        return this.equals((setParameter_result)that);
      return false;
    }

    public boolean equals(setParameter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(setParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("setParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class setParameter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setParameter_resultStandardScheme getScheme() {
        return new setParameter_resultStandardScheme();
      }
    }

    private static class setParameter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<setParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, setParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, setParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class setParameter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public setParameter_resultTupleScheme getScheme() {
        return new setParameter_resultTupleScheme();
      }
    }

    private static class setParameter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, setParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, setParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createParameter_args implements org.apache.thrift.TBase<createParameter_args, createParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<createParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createParameter_args");

    private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.I32, (short)4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)5);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createParameter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createParameter_argsTupleSchemeFactory();

    private java.lang.String programId; // required
    private java.lang.String parameterId; // required
    private at.enfilo.def.transfer.dto.ResourceDTO parameter; // required
    private at.enfilo.def.transfer.dto.ParameterProtocol protocol; // required
    private at.enfilo.def.transfer.dto.ParameterType type; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRAM_ID((short)1, "programId"),
      PARAMETER_ID((short)2, "parameterId"),
      PARAMETER((short)3, "parameter"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ParameterProtocol
       */
      PROTOCOL((short)4, "protocol"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ParameterType
       */
      TYPE((short)5, "type");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRAM_ID
            return PROGRAM_ID;
          case 2: // PARAMETER_ID
            return PARAMETER_ID;
          case 3: // PARAMETER
            return PARAMETER;
          case 4: // PROTOCOL
            return PROTOCOL;
          case 5: // TYPE
            return TYPE;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("parameterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.ResourceDTO.class)));
      tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ParameterProtocol.class)));
      tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ParameterType.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createParameter_args.class, metaDataMap);
    }

    public createParameter_args() {
    }

    public createParameter_args(
      java.lang.String programId,
      java.lang.String parameterId,
      at.enfilo.def.transfer.dto.ResourceDTO parameter,
      at.enfilo.def.transfer.dto.ParameterProtocol protocol,
      at.enfilo.def.transfer.dto.ParameterType type)
    {
      this();
      this.programId = programId;
      this.parameterId = parameterId;
      this.parameter = parameter;
      this.protocol = protocol;
      this.type = type;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createParameter_args(createParameter_args other) {
      if (other.isSetProgramId()) {
        this.programId = other.programId;
      }
      if (other.isSetParameterId()) {
        this.parameterId = other.parameterId;
      }
      if (other.isSetParameter()) {
        this.parameter = new at.enfilo.def.transfer.dto.ResourceDTO(other.parameter);
      }
      if (other.isSetProtocol()) {
        this.protocol = other.protocol;
      }
      if (other.isSetType()) {
        this.type = other.type;
      }
    }

    public createParameter_args deepCopy() {
      return new createParameter_args(this);
    }

    @Override
    public void clear() {
      this.programId = null;
      this.parameterId = null;
      this.parameter = null;
      this.protocol = null;
      this.type = null;
    }

    public java.lang.String getProgramId() {
      return this.programId;
    }

    public void setProgramId(java.lang.String programId) {
      this.programId = programId;
    }

    public void unsetProgramId() {
      this.programId = null;
    }

    /** Returns true if field programId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramId() {
      return this.programId != null;
    }

    public void setProgramIdIsSet(boolean value) {
      if (!value) {
        this.programId = null;
      }
    }

    public java.lang.String getParameterId() {
      return this.parameterId;
    }

    public void setParameterId(java.lang.String parameterId) {
      this.parameterId = parameterId;
    }

    public void unsetParameterId() {
      this.parameterId = null;
    }

    /** Returns true if field parameterId is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterId() {
      return this.parameterId != null;
    }

    public void setParameterIdIsSet(boolean value) {
      if (!value) {
        this.parameterId = null;
      }
    }

    public at.enfilo.def.transfer.dto.ResourceDTO getParameter() {
      return this.parameter;
    }

    public void setParameter(at.enfilo.def.transfer.dto.ResourceDTO parameter) {
      this.parameter = parameter;
    }

    public void unsetParameter() {
      this.parameter = null;
    }

    /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
    public boolean isSetParameter() {
      return this.parameter != null;
    }

    public void setParameterIsSet(boolean value) {
      if (!value) {
        this.parameter = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public at.enfilo.def.transfer.dto.ParameterProtocol getProtocol() {
      return this.protocol;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public void setProtocol(at.enfilo.def.transfer.dto.ParameterProtocol protocol) {
      this.protocol = protocol;
    }

    public void unsetProtocol() {
      this.protocol = null;
    }

    /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocol() {
      return this.protocol != null;
    }

    public void setProtocolIsSet(boolean value) {
      if (!value) {
        this.protocol = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterType
     */
    public at.enfilo.def.transfer.dto.ParameterType getType() {
      return this.type;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterType
     */
    public void setType(at.enfilo.def.transfer.dto.ParameterType type) {
      this.type = type;
    }

    public void unsetType() {
      this.type = null;
    }

    /** Returns true if field type is set (has been assigned a value) and false otherwise */
    public boolean isSetType() {
      return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
      if (!value) {
        this.type = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROGRAM_ID:
        if (value == null) {
          unsetProgramId();
        } else {
          setProgramId((java.lang.String)value);
        }
        break;

      case PARAMETER_ID:
        if (value == null) {
          unsetParameterId();
        } else {
          setParameterId((java.lang.String)value);
        }
        break;

      case PARAMETER:
        if (value == null) {
          unsetParameter();
        } else {
          setParameter((at.enfilo.def.transfer.dto.ResourceDTO)value);
        }
        break;

      case PROTOCOL:
        if (value == null) {
          unsetProtocol();
        } else {
          setProtocol((at.enfilo.def.transfer.dto.ParameterProtocol)value);
        }
        break;

      case TYPE:
        if (value == null) {
          unsetType();
        } else {
          setType((at.enfilo.def.transfer.dto.ParameterType)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRAM_ID:
        return getProgramId();

      case PARAMETER_ID:
        return getParameterId();

      case PARAMETER:
        return getParameter();

      case PROTOCOL:
        return getProtocol();

      case TYPE:
        return getType();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROGRAM_ID:
        return isSetProgramId();
      case PARAMETER_ID:
        return isSetParameterId();
      case PARAMETER:
        return isSetParameter();
      case PROTOCOL:
        return isSetProtocol();
      case TYPE:
        return isSetType();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createParameter_args)
        return this.equals((createParameter_args)that);
      return false;
    }

    public boolean equals(createParameter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_programId = true && this.isSetProgramId();
      boolean that_present_programId = true && that.isSetProgramId();
      if (this_present_programId || that_present_programId) {
        if (!(this_present_programId && that_present_programId))
          return false;
        if (!this.programId.equals(that.programId))
          return false;
      }

      boolean this_present_parameterId = true && this.isSetParameterId();
      boolean that_present_parameterId = true && that.isSetParameterId();
      if (this_present_parameterId || that_present_parameterId) {
        if (!(this_present_parameterId && that_present_parameterId))
          return false;
        if (!this.parameterId.equals(that.parameterId))
          return false;
      }

      boolean this_present_parameter = true && this.isSetParameter();
      boolean that_present_parameter = true && that.isSetParameter();
      if (this_present_parameter || that_present_parameter) {
        if (!(this_present_parameter && that_present_parameter))
          return false;
        if (!this.parameter.equals(that.parameter))
          return false;
      }

      boolean this_present_protocol = true && this.isSetProtocol();
      boolean that_present_protocol = true && that.isSetProtocol();
      if (this_present_protocol || that_present_protocol) {
        if (!(this_present_protocol && that_present_protocol))
          return false;
        if (!this.protocol.equals(that.protocol))
          return false;
      }

      boolean this_present_type = true && this.isSetType();
      boolean that_present_type = true && that.isSetType();
      if (this_present_type || that_present_type) {
        if (!(this_present_type && that_present_type))
          return false;
        if (!this.type.equals(that.type))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProgramId()) ? 131071 : 524287);
      if (isSetProgramId())
        hashCode = hashCode * 8191 + programId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterId()) ? 131071 : 524287);
      if (isSetParameterId())
        hashCode = hashCode * 8191 + parameterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameter()) ? 131071 : 524287);
      if (isSetParameter())
        hashCode = hashCode * 8191 + parameter.hashCode();

      hashCode = hashCode * 8191 + ((isSetProtocol()) ? 131071 : 524287);
      if (isSetProtocol())
        hashCode = hashCode * 8191 + protocol.getValue();

      hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
      if (isSetType())
        hashCode = hashCode * 8191 + type.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(createParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterId()).compareTo(other.isSetParameterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterId, other.parameterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createParameter_args(");
      boolean first = true;

      sb.append("programId:");
      if (this.programId == null) {
        sb.append("null");
      } else {
        sb.append(this.programId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterId:");
      if (this.parameterId == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocol:");
      if (this.protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.protocol);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (parameter != null) {
        parameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createParameter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createParameter_argsStandardScheme getScheme() {
        return new createParameter_argsStandardScheme();
      }
    }

    private static class createParameter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.programId = iprot.readString();
                struct.setProgramIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parameterId = iprot.readString();
                struct.setParameterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parameter = new at.enfilo.def.transfer.dto.ResourceDTO();
                struct.parameter.read(iprot);
                struct.setParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROTOCOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
                struct.setProtocolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 5: // TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.type = at.enfilo.def.transfer.dto.ParameterType.findByValue(iprot.readI32());
                struct.setTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.programId != null) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.programId);
          oprot.writeFieldEnd();
        }
        if (struct.parameterId != null) {
          oprot.writeFieldBegin(PARAMETER_ID_FIELD_DESC);
          oprot.writeString(struct.parameterId);
          oprot.writeFieldEnd();
        }
        if (struct.parameter != null) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          struct.parameter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.protocol != null) {
          oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.protocol.getValue());
          oprot.writeFieldEnd();
        }
        if (struct.type != null) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          oprot.writeI32(struct.type.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createParameter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createParameter_argsTupleScheme getScheme() {
        return new createParameter_argsTupleScheme();
      }
    }

    private static class createParameter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgramId()) {
          optionals.set(0);
        }
        if (struct.isSetParameterId()) {
          optionals.set(1);
        }
        if (struct.isSetParameter()) {
          optionals.set(2);
        }
        if (struct.isSetProtocol()) {
          optionals.set(3);
        }
        if (struct.isSetType()) {
          optionals.set(4);
        }
        oprot.writeBitSet(optionals, 5);
        if (struct.isSetProgramId()) {
          oprot.writeString(struct.programId);
        }
        if (struct.isSetParameterId()) {
          oprot.writeString(struct.parameterId);
        }
        if (struct.isSetParameter()) {
          struct.parameter.write(oprot);
        }
        if (struct.isSetProtocol()) {
          oprot.writeI32(struct.protocol.getValue());
        }
        if (struct.isSetType()) {
          oprot.writeI32(struct.type.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(5);
        if (incoming.get(0)) {
          struct.programId = iprot.readString();
          struct.setProgramIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parameterId = iprot.readString();
          struct.setParameterIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parameter = new at.enfilo.def.transfer.dto.ResourceDTO();
          struct.parameter.read(iprot);
          struct.setParameterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
          struct.setProtocolIsSet(true);
        }
        if (incoming.get(4)) {
          struct.type = at.enfilo.def.transfer.dto.ParameterType.findByValue(iprot.readI32());
          struct.setTypeIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createParameter_result implements org.apache.thrift.TBase<createParameter_result, createParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<createParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createParameter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createParameter_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createParameter_result.class, metaDataMap);
    }

    public createParameter_result() {
    }

    public createParameter_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createParameter_result(createParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createParameter_result deepCopy() {
      return new createParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createParameter_result)
        return this.equals((createParameter_result)that);
      return false;
    }

    public boolean equals(createParameter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createParameter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createParameter_resultStandardScheme getScheme() {
        return new createParameter_resultStandardScheme();
      }
    }

    private static class createParameter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createParameter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createParameter_resultTupleScheme getScheme() {
        return new createParameter_resultTupleScheme();
      }
    }

    private static class createParameter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getParameter_args implements org.apache.thrift.TBase<getParameter_args, getParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<getParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getParameter_args");

    private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getParameter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getParameter_argsTupleSchemeFactory();

    private java.lang.String programId; // required
    private java.lang.String parameterId; // required
    private at.enfilo.def.transfer.dto.ParameterProtocol protocol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRAM_ID((short)1, "programId"),
      PARAMETER_ID((short)2, "parameterId"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ParameterProtocol
       */
      PROTOCOL((short)3, "protocol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRAM_ID
            return PROGRAM_ID;
          case 2: // PARAMETER_ID
            return PARAMETER_ID;
          case 3: // PROTOCOL
            return PROTOCOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("parameterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ParameterProtocol.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getParameter_args.class, metaDataMap);
    }

    public getParameter_args() {
    }

    public getParameter_args(
      java.lang.String programId,
      java.lang.String parameterId,
      at.enfilo.def.transfer.dto.ParameterProtocol protocol)
    {
      this();
      this.programId = programId;
      this.parameterId = parameterId;
      this.protocol = protocol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getParameter_args(getParameter_args other) {
      if (other.isSetProgramId()) {
        this.programId = other.programId;
      }
      if (other.isSetParameterId()) {
        this.parameterId = other.parameterId;
      }
      if (other.isSetProtocol()) {
        this.protocol = other.protocol;
      }
    }

    public getParameter_args deepCopy() {
      return new getParameter_args(this);
    }

    @Override
    public void clear() {
      this.programId = null;
      this.parameterId = null;
      this.protocol = null;
    }

    public java.lang.String getProgramId() {
      return this.programId;
    }

    public void setProgramId(java.lang.String programId) {
      this.programId = programId;
    }

    public void unsetProgramId() {
      this.programId = null;
    }

    /** Returns true if field programId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramId() {
      return this.programId != null;
    }

    public void setProgramIdIsSet(boolean value) {
      if (!value) {
        this.programId = null;
      }
    }

    public java.lang.String getParameterId() {
      return this.parameterId;
    }

    public void setParameterId(java.lang.String parameterId) {
      this.parameterId = parameterId;
    }

    public void unsetParameterId() {
      this.parameterId = null;
    }

    /** Returns true if field parameterId is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterId() {
      return this.parameterId != null;
    }

    public void setParameterIdIsSet(boolean value) {
      if (!value) {
        this.parameterId = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public at.enfilo.def.transfer.dto.ParameterProtocol getProtocol() {
      return this.protocol;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public void setProtocol(at.enfilo.def.transfer.dto.ParameterProtocol protocol) {
      this.protocol = protocol;
    }

    public void unsetProtocol() {
      this.protocol = null;
    }

    /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocol() {
      return this.protocol != null;
    }

    public void setProtocolIsSet(boolean value) {
      if (!value) {
        this.protocol = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROGRAM_ID:
        if (value == null) {
          unsetProgramId();
        } else {
          setProgramId((java.lang.String)value);
        }
        break;

      case PARAMETER_ID:
        if (value == null) {
          unsetParameterId();
        } else {
          setParameterId((java.lang.String)value);
        }
        break;

      case PROTOCOL:
        if (value == null) {
          unsetProtocol();
        } else {
          setProtocol((at.enfilo.def.transfer.dto.ParameterProtocol)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRAM_ID:
        return getProgramId();

      case PARAMETER_ID:
        return getParameterId();

      case PROTOCOL:
        return getProtocol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROGRAM_ID:
        return isSetProgramId();
      case PARAMETER_ID:
        return isSetParameterId();
      case PROTOCOL:
        return isSetProtocol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getParameter_args)
        return this.equals((getParameter_args)that);
      return false;
    }

    public boolean equals(getParameter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_programId = true && this.isSetProgramId();
      boolean that_present_programId = true && that.isSetProgramId();
      if (this_present_programId || that_present_programId) {
        if (!(this_present_programId && that_present_programId))
          return false;
        if (!this.programId.equals(that.programId))
          return false;
      }

      boolean this_present_parameterId = true && this.isSetParameterId();
      boolean that_present_parameterId = true && that.isSetParameterId();
      if (this_present_parameterId || that_present_parameterId) {
        if (!(this_present_parameterId && that_present_parameterId))
          return false;
        if (!this.parameterId.equals(that.parameterId))
          return false;
      }

      boolean this_present_protocol = true && this.isSetProtocol();
      boolean that_present_protocol = true && that.isSetProtocol();
      if (this_present_protocol || that_present_protocol) {
        if (!(this_present_protocol && that_present_protocol))
          return false;
        if (!this.protocol.equals(that.protocol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProgramId()) ? 131071 : 524287);
      if (isSetProgramId())
        hashCode = hashCode * 8191 + programId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterId()) ? 131071 : 524287);
      if (isSetParameterId())
        hashCode = hashCode * 8191 + parameterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetProtocol()) ? 131071 : 524287);
      if (isSetProtocol())
        hashCode = hashCode * 8191 + protocol.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(getParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterId()).compareTo(other.isSetParameterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterId, other.parameterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getParameter_args(");
      boolean first = true;

      sb.append("programId:");
      if (this.programId == null) {
        sb.append("null");
      } else {
        sb.append(this.programId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterId:");
      if (this.parameterId == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocol:");
      if (this.protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.protocol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getParameter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getParameter_argsStandardScheme getScheme() {
        return new getParameter_argsStandardScheme();
      }
    }

    private static class getParameter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.programId = iprot.readString();
                struct.setProgramIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parameterId = iprot.readString();
                struct.setParameterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PROTOCOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
                struct.setProtocolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.programId != null) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.programId);
          oprot.writeFieldEnd();
        }
        if (struct.parameterId != null) {
          oprot.writeFieldBegin(PARAMETER_ID_FIELD_DESC);
          oprot.writeString(struct.parameterId);
          oprot.writeFieldEnd();
        }
        if (struct.protocol != null) {
          oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.protocol.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getParameter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getParameter_argsTupleScheme getScheme() {
        return new getParameter_argsTupleScheme();
      }
    }

    private static class getParameter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgramId()) {
          optionals.set(0);
        }
        if (struct.isSetParameterId()) {
          optionals.set(1);
        }
        if (struct.isSetProtocol()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetProgramId()) {
          oprot.writeString(struct.programId);
        }
        if (struct.isSetParameterId()) {
          oprot.writeString(struct.parameterId);
        }
        if (struct.isSetProtocol()) {
          oprot.writeI32(struct.protocol.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.programId = iprot.readString();
          struct.setProgramIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parameterId = iprot.readString();
          struct.setParameterIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
          struct.setProtocolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getParameter_result implements org.apache.thrift.TBase<getParameter_result, getParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<getParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getParameter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getParameter_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getParameter_result.class, metaDataMap);
    }

    public getParameter_result() {
    }

    public getParameter_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getParameter_result(getParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getParameter_result deepCopy() {
      return new getParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getParameter_result)
        return this.equals((getParameter_result)that);
      return false;
    }

    public boolean equals(getParameter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getParameter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getParameter_resultStandardScheme getScheme() {
        return new getParameter_resultStandardScheme();
      }
    }

    private static class getParameter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getParameter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getParameter_resultTupleScheme getScheme() {
        return new getParameter_resultTupleScheme();
      }
    }

    private static class getParameter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addToParameter_args implements org.apache.thrift.TBase<addToParameter_args, addToParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<addToParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToParameter_args");

    private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("parameter", org.apache.thrift.protocol.TType.STRUCT, (short)3);
    private static final org.apache.thrift.protocol.TField PROTOCOL_FIELD_DESC = new org.apache.thrift.protocol.TField("protocol", org.apache.thrift.protocol.TType.I32, (short)4);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addToParameter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addToParameter_argsTupleSchemeFactory();

    private java.lang.String programId; // required
    private java.lang.String parameterId; // required
    private at.enfilo.def.transfer.dto.ResourceDTO parameter; // required
    private at.enfilo.def.transfer.dto.ParameterProtocol protocol; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRAM_ID((short)1, "programId"),
      PARAMETER_ID((short)2, "parameterId"),
      PARAMETER((short)3, "parameter"),
      /**
       * 
       * @see at.enfilo.def.transfer.dto.ParameterProtocol
       */
      PROTOCOL((short)4, "protocol");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRAM_ID
            return PROGRAM_ID;
          case 2: // PARAMETER_ID
            return PARAMETER_ID;
          case 3: // PARAMETER
            return PARAMETER;
          case 4: // PROTOCOL
            return PROTOCOL;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("parameterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("parameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.ResourceDTO.class)));
      tmpMap.put(_Fields.PROTOCOL, new org.apache.thrift.meta_data.FieldMetaData("protocol", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.transfer.dto.ParameterProtocol.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToParameter_args.class, metaDataMap);
    }

    public addToParameter_args() {
    }

    public addToParameter_args(
      java.lang.String programId,
      java.lang.String parameterId,
      at.enfilo.def.transfer.dto.ResourceDTO parameter,
      at.enfilo.def.transfer.dto.ParameterProtocol protocol)
    {
      this();
      this.programId = programId;
      this.parameterId = parameterId;
      this.parameter = parameter;
      this.protocol = protocol;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToParameter_args(addToParameter_args other) {
      if (other.isSetProgramId()) {
        this.programId = other.programId;
      }
      if (other.isSetParameterId()) {
        this.parameterId = other.parameterId;
      }
      if (other.isSetParameter()) {
        this.parameter = new at.enfilo.def.transfer.dto.ResourceDTO(other.parameter);
      }
      if (other.isSetProtocol()) {
        this.protocol = other.protocol;
      }
    }

    public addToParameter_args deepCopy() {
      return new addToParameter_args(this);
    }

    @Override
    public void clear() {
      this.programId = null;
      this.parameterId = null;
      this.parameter = null;
      this.protocol = null;
    }

    public java.lang.String getProgramId() {
      return this.programId;
    }

    public void setProgramId(java.lang.String programId) {
      this.programId = programId;
    }

    public void unsetProgramId() {
      this.programId = null;
    }

    /** Returns true if field programId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramId() {
      return this.programId != null;
    }

    public void setProgramIdIsSet(boolean value) {
      if (!value) {
        this.programId = null;
      }
    }

    public java.lang.String getParameterId() {
      return this.parameterId;
    }

    public void setParameterId(java.lang.String parameterId) {
      this.parameterId = parameterId;
    }

    public void unsetParameterId() {
      this.parameterId = null;
    }

    /** Returns true if field parameterId is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterId() {
      return this.parameterId != null;
    }

    public void setParameterIdIsSet(boolean value) {
      if (!value) {
        this.parameterId = null;
      }
    }

    public at.enfilo.def.transfer.dto.ResourceDTO getParameter() {
      return this.parameter;
    }

    public void setParameter(at.enfilo.def.transfer.dto.ResourceDTO parameter) {
      this.parameter = parameter;
    }

    public void unsetParameter() {
      this.parameter = null;
    }

    /** Returns true if field parameter is set (has been assigned a value) and false otherwise */
    public boolean isSetParameter() {
      return this.parameter != null;
    }

    public void setParameterIsSet(boolean value) {
      if (!value) {
        this.parameter = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public at.enfilo.def.transfer.dto.ParameterProtocol getProtocol() {
      return this.protocol;
    }

    /**
     * 
     * @see at.enfilo.def.transfer.dto.ParameterProtocol
     */
    public void setProtocol(at.enfilo.def.transfer.dto.ParameterProtocol protocol) {
      this.protocol = protocol;
    }

    public void unsetProtocol() {
      this.protocol = null;
    }

    /** Returns true if field protocol is set (has been assigned a value) and false otherwise */
    public boolean isSetProtocol() {
      return this.protocol != null;
    }

    public void setProtocolIsSet(boolean value) {
      if (!value) {
        this.protocol = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROGRAM_ID:
        if (value == null) {
          unsetProgramId();
        } else {
          setProgramId((java.lang.String)value);
        }
        break;

      case PARAMETER_ID:
        if (value == null) {
          unsetParameterId();
        } else {
          setParameterId((java.lang.String)value);
        }
        break;

      case PARAMETER:
        if (value == null) {
          unsetParameter();
        } else {
          setParameter((at.enfilo.def.transfer.dto.ResourceDTO)value);
        }
        break;

      case PROTOCOL:
        if (value == null) {
          unsetProtocol();
        } else {
          setProtocol((at.enfilo.def.transfer.dto.ParameterProtocol)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRAM_ID:
        return getProgramId();

      case PARAMETER_ID:
        return getParameterId();

      case PARAMETER:
        return getParameter();

      case PROTOCOL:
        return getProtocol();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROGRAM_ID:
        return isSetProgramId();
      case PARAMETER_ID:
        return isSetParameterId();
      case PARAMETER:
        return isSetParameter();
      case PROTOCOL:
        return isSetProtocol();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addToParameter_args)
        return this.equals((addToParameter_args)that);
      return false;
    }

    public boolean equals(addToParameter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_programId = true && this.isSetProgramId();
      boolean that_present_programId = true && that.isSetProgramId();
      if (this_present_programId || that_present_programId) {
        if (!(this_present_programId && that_present_programId))
          return false;
        if (!this.programId.equals(that.programId))
          return false;
      }

      boolean this_present_parameterId = true && this.isSetParameterId();
      boolean that_present_parameterId = true && that.isSetParameterId();
      if (this_present_parameterId || that_present_parameterId) {
        if (!(this_present_parameterId && that_present_parameterId))
          return false;
        if (!this.parameterId.equals(that.parameterId))
          return false;
      }

      boolean this_present_parameter = true && this.isSetParameter();
      boolean that_present_parameter = true && that.isSetParameter();
      if (this_present_parameter || that_present_parameter) {
        if (!(this_present_parameter && that_present_parameter))
          return false;
        if (!this.parameter.equals(that.parameter))
          return false;
      }

      boolean this_present_protocol = true && this.isSetProtocol();
      boolean that_present_protocol = true && that.isSetProtocol();
      if (this_present_protocol || that_present_protocol) {
        if (!(this_present_protocol && that_present_protocol))
          return false;
        if (!this.protocol.equals(that.protocol))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProgramId()) ? 131071 : 524287);
      if (isSetProgramId())
        hashCode = hashCode * 8191 + programId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterId()) ? 131071 : 524287);
      if (isSetParameterId())
        hashCode = hashCode * 8191 + parameterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameter()) ? 131071 : 524287);
      if (isSetParameter())
        hashCode = hashCode * 8191 + parameter.hashCode();

      hashCode = hashCode * 8191 + ((isSetProtocol()) ? 131071 : 524287);
      if (isSetProtocol())
        hashCode = hashCode * 8191 + protocol.getValue();

      return hashCode;
    }

    @Override
    public int compareTo(addToParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterId()).compareTo(other.isSetParameterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterId, other.parameterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameter()).compareTo(other.isSetParameter());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameter()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameter, other.parameter);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProtocol()).compareTo(other.isSetProtocol());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProtocol()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.protocol, other.protocol);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addToParameter_args(");
      boolean first = true;

      sb.append("programId:");
      if (this.programId == null) {
        sb.append("null");
      } else {
        sb.append(this.programId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterId:");
      if (this.parameterId == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameter:");
      if (this.parameter == null) {
        sb.append("null");
      } else {
        sb.append(this.parameter);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("protocol:");
      if (this.protocol == null) {
        sb.append("null");
      } else {
        sb.append(this.protocol);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (parameter != null) {
        parameter.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToParameter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addToParameter_argsStandardScheme getScheme() {
        return new addToParameter_argsStandardScheme();
      }
    }

    private static class addToParameter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<addToParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.programId = iprot.readString();
                struct.setProgramIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parameterId = iprot.readString();
                struct.setParameterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // PARAMETER
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.parameter = new at.enfilo.def.transfer.dto.ResourceDTO();
                struct.parameter.read(iprot);
                struct.setParameterIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 4: // PROTOCOL
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
                struct.setProtocolIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.programId != null) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.programId);
          oprot.writeFieldEnd();
        }
        if (struct.parameterId != null) {
          oprot.writeFieldBegin(PARAMETER_ID_FIELD_DESC);
          oprot.writeString(struct.parameterId);
          oprot.writeFieldEnd();
        }
        if (struct.parameter != null) {
          oprot.writeFieldBegin(PARAMETER_FIELD_DESC);
          struct.parameter.write(oprot);
          oprot.writeFieldEnd();
        }
        if (struct.protocol != null) {
          oprot.writeFieldBegin(PROTOCOL_FIELD_DESC);
          oprot.writeI32(struct.protocol.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToParameter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addToParameter_argsTupleScheme getScheme() {
        return new addToParameter_argsTupleScheme();
      }
    }

    private static class addToParameter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<addToParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgramId()) {
          optionals.set(0);
        }
        if (struct.isSetParameterId()) {
          optionals.set(1);
        }
        if (struct.isSetParameter()) {
          optionals.set(2);
        }
        if (struct.isSetProtocol()) {
          optionals.set(3);
        }
        oprot.writeBitSet(optionals, 4);
        if (struct.isSetProgramId()) {
          oprot.writeString(struct.programId);
        }
        if (struct.isSetParameterId()) {
          oprot.writeString(struct.parameterId);
        }
        if (struct.isSetParameter()) {
          struct.parameter.write(oprot);
        }
        if (struct.isSetProtocol()) {
          oprot.writeI32(struct.protocol.getValue());
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(4);
        if (incoming.get(0)) {
          struct.programId = iprot.readString();
          struct.setProgramIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parameterId = iprot.readString();
          struct.setParameterIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.parameter = new at.enfilo.def.transfer.dto.ResourceDTO();
          struct.parameter.read(iprot);
          struct.setParameterIsSet(true);
        }
        if (incoming.get(3)) {
          struct.protocol = at.enfilo.def.transfer.dto.ParameterProtocol.findByValue(iprot.readI32());
          struct.setProtocolIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class addToParameter_result implements org.apache.thrift.TBase<addToParameter_result, addToParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<addToParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("addToParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new addToParameter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new addToParameter_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(addToParameter_result.class, metaDataMap);
    }

    public addToParameter_result() {
    }

    public addToParameter_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public addToParameter_result(addToParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public addToParameter_result deepCopy() {
      return new addToParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof addToParameter_result)
        return this.equals((addToParameter_result)that);
      return false;
    }

    public boolean equals(addToParameter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(addToParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("addToParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class addToParameter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addToParameter_resultStandardScheme getScheme() {
        return new addToParameter_resultStandardScheme();
      }
    }

    private static class addToParameter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<addToParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, addToParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, addToParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class addToParameter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public addToParameter_resultTupleScheme getScheme() {
        return new addToParameter_resultTupleScheme();
      }
    }

    private static class addToParameter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<addToParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, addToParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, addToParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteParameter_args implements org.apache.thrift.TBase<deleteParameter_args, deleteParameter_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteParameter_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteParameter_args");

    private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PARAMETER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("parameterId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteParameter_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteParameter_argsTupleSchemeFactory();

    private java.lang.String programId; // required
    private java.lang.String parameterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRAM_ID((short)1, "programId"),
      PARAMETER_ID((short)2, "parameterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRAM_ID
            return PROGRAM_ID;
          case 2: // PARAMETER_ID
            return PARAMETER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PARAMETER_ID, new org.apache.thrift.meta_data.FieldMetaData("parameterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteParameter_args.class, metaDataMap);
    }

    public deleteParameter_args() {
    }

    public deleteParameter_args(
      java.lang.String programId,
      java.lang.String parameterId)
    {
      this();
      this.programId = programId;
      this.parameterId = parameterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteParameter_args(deleteParameter_args other) {
      if (other.isSetProgramId()) {
        this.programId = other.programId;
      }
      if (other.isSetParameterId()) {
        this.parameterId = other.parameterId;
      }
    }

    public deleteParameter_args deepCopy() {
      return new deleteParameter_args(this);
    }

    @Override
    public void clear() {
      this.programId = null;
      this.parameterId = null;
    }

    public java.lang.String getProgramId() {
      return this.programId;
    }

    public void setProgramId(java.lang.String programId) {
      this.programId = programId;
    }

    public void unsetProgramId() {
      this.programId = null;
    }

    /** Returns true if field programId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramId() {
      return this.programId != null;
    }

    public void setProgramIdIsSet(boolean value) {
      if (!value) {
        this.programId = null;
      }
    }

    public java.lang.String getParameterId() {
      return this.parameterId;
    }

    public void setParameterId(java.lang.String parameterId) {
      this.parameterId = parameterId;
    }

    public void unsetParameterId() {
      this.parameterId = null;
    }

    /** Returns true if field parameterId is set (has been assigned a value) and false otherwise */
    public boolean isSetParameterId() {
      return this.parameterId != null;
    }

    public void setParameterIdIsSet(boolean value) {
      if (!value) {
        this.parameterId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROGRAM_ID:
        if (value == null) {
          unsetProgramId();
        } else {
          setProgramId((java.lang.String)value);
        }
        break;

      case PARAMETER_ID:
        if (value == null) {
          unsetParameterId();
        } else {
          setParameterId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRAM_ID:
        return getProgramId();

      case PARAMETER_ID:
        return getParameterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROGRAM_ID:
        return isSetProgramId();
      case PARAMETER_ID:
        return isSetParameterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteParameter_args)
        return this.equals((deleteParameter_args)that);
      return false;
    }

    public boolean equals(deleteParameter_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_programId = true && this.isSetProgramId();
      boolean that_present_programId = true && that.isSetProgramId();
      if (this_present_programId || that_present_programId) {
        if (!(this_present_programId && that_present_programId))
          return false;
        if (!this.programId.equals(that.programId))
          return false;
      }

      boolean this_present_parameterId = true && this.isSetParameterId();
      boolean that_present_parameterId = true && that.isSetParameterId();
      if (this_present_parameterId || that_present_parameterId) {
        if (!(this_present_parameterId && that_present_parameterId))
          return false;
        if (!this.parameterId.equals(that.parameterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProgramId()) ? 131071 : 524287);
      if (isSetProgramId())
        hashCode = hashCode * 8191 + programId.hashCode();

      hashCode = hashCode * 8191 + ((isSetParameterId()) ? 131071 : 524287);
      if (isSetParameterId())
        hashCode = hashCode * 8191 + parameterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteParameter_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetParameterId()).compareTo(other.isSetParameterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetParameterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.parameterId, other.parameterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteParameter_args(");
      boolean first = true;

      sb.append("programId:");
      if (this.programId == null) {
        sb.append("null");
      } else {
        sb.append(this.programId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("parameterId:");
      if (this.parameterId == null) {
        sb.append("null");
      } else {
        sb.append(this.parameterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteParameter_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteParameter_argsStandardScheme getScheme() {
        return new deleteParameter_argsStandardScheme();
      }
    }

    private static class deleteParameter_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteParameter_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.programId = iprot.readString();
                struct.setProgramIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PARAMETER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.parameterId = iprot.readString();
                struct.setParameterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteParameter_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.programId != null) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.programId);
          oprot.writeFieldEnd();
        }
        if (struct.parameterId != null) {
          oprot.writeFieldBegin(PARAMETER_ID_FIELD_DESC);
          oprot.writeString(struct.parameterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteParameter_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteParameter_argsTupleScheme getScheme() {
        return new deleteParameter_argsTupleScheme();
      }
    }

    private static class deleteParameter_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteParameter_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgramId()) {
          optionals.set(0);
        }
        if (struct.isSetParameterId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetProgramId()) {
          oprot.writeString(struct.programId);
        }
        if (struct.isSetParameterId()) {
          oprot.writeString(struct.parameterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteParameter_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.programId = iprot.readString();
          struct.setProgramIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.parameterId = iprot.readString();
          struct.setParameterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteParameter_result implements org.apache.thrift.TBase<deleteParameter_result, deleteParameter_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteParameter_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteParameter_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteParameter_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteParameter_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteParameter_result.class, metaDataMap);
    }

    public deleteParameter_result() {
    }

    public deleteParameter_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteParameter_result(deleteParameter_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteParameter_result deepCopy() {
      return new deleteParameter_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteParameter_result)
        return this.equals((deleteParameter_result)that);
      return false;
    }

    public boolean equals(deleteParameter_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteParameter_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteParameter_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteParameter_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteParameter_resultStandardScheme getScheme() {
        return new deleteParameter_resultStandardScheme();
      }
    }

    private static class deleteParameter_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteParameter_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteParameter_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteParameter_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteParameter_resultTupleScheme getScheme() {
        return new deleteParameter_resultTupleScheme();
      }
    }

    private static class deleteParameter_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteParameter_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteParameter_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAllParameters_args implements org.apache.thrift.TBase<deleteAllParameters_args, deleteAllParameters_args._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllParameters_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllParameters_args");

    private static final org.apache.thrift.protocol.TField PROGRAM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("programId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAllParameters_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAllParameters_argsTupleSchemeFactory();

    private java.lang.String programId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      PROGRAM_ID((short)1, "programId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // PROGRAM_ID
            return PROGRAM_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.PROGRAM_ID, new org.apache.thrift.meta_data.FieldMetaData("programId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllParameters_args.class, metaDataMap);
    }

    public deleteAllParameters_args() {
    }

    public deleteAllParameters_args(
      java.lang.String programId)
    {
      this();
      this.programId = programId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllParameters_args(deleteAllParameters_args other) {
      if (other.isSetProgramId()) {
        this.programId = other.programId;
      }
    }

    public deleteAllParameters_args deepCopy() {
      return new deleteAllParameters_args(this);
    }

    @Override
    public void clear() {
      this.programId = null;
    }

    public java.lang.String getProgramId() {
      return this.programId;
    }

    public void setProgramId(java.lang.String programId) {
      this.programId = programId;
    }

    public void unsetProgramId() {
      this.programId = null;
    }

    /** Returns true if field programId is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramId() {
      return this.programId != null;
    }

    public void setProgramIdIsSet(boolean value) {
      if (!value) {
        this.programId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case PROGRAM_ID:
        if (value == null) {
          unsetProgramId();
        } else {
          setProgramId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case PROGRAM_ID:
        return getProgramId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case PROGRAM_ID:
        return isSetProgramId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllParameters_args)
        return this.equals((deleteAllParameters_args)that);
      return false;
    }

    public boolean equals(deleteAllParameters_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_programId = true && this.isSetProgramId();
      boolean that_present_programId = true && that.isSetProgramId();
      if (this_present_programId || that_present_programId) {
        if (!(this_present_programId && that_present_programId))
          return false;
        if (!this.programId.equals(that.programId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetProgramId()) ? 131071 : 524287);
      if (isSetProgramId())
        hashCode = hashCode * 8191 + programId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAllParameters_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetProgramId()).compareTo(other.isSetProgramId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programId, other.programId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAllParameters_args(");
      boolean first = true;

      sb.append("programId:");
      if (this.programId == null) {
        sb.append("null");
      } else {
        sb.append(this.programId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllParameters_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllParameters_argsStandardScheme getScheme() {
        return new deleteAllParameters_argsStandardScheme();
      }
    }

    private static class deleteAllParameters_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAllParameters_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllParameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // PROGRAM_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.programId = iprot.readString();
                struct.setProgramIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllParameters_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.programId != null) {
          oprot.writeFieldBegin(PROGRAM_ID_FIELD_DESC);
          oprot.writeString(struct.programId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllParameters_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllParameters_argsTupleScheme getScheme() {
        return new deleteAllParameters_argsTupleScheme();
      }
    }

    private static class deleteAllParameters_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAllParameters_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllParameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetProgramId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetProgramId()) {
          oprot.writeString(struct.programId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllParameters_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.programId = iprot.readString();
          struct.setProgramIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class deleteAllParameters_result implements org.apache.thrift.TBase<deleteAllParameters_result, deleteAllParameters_result._Fields>, java.io.Serializable, Cloneable, Comparable<deleteAllParameters_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("deleteAllParameters_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new deleteAllParameters_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new deleteAllParameters_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(deleteAllParameters_result.class, metaDataMap);
    }

    public deleteAllParameters_result() {
    }

    public deleteAllParameters_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public deleteAllParameters_result(deleteAllParameters_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public deleteAllParameters_result deepCopy() {
      return new deleteAllParameters_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof deleteAllParameters_result)
        return this.equals((deleteAllParameters_result)that);
      return false;
    }

    public boolean equals(deleteAllParameters_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(deleteAllParameters_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("deleteAllParameters_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class deleteAllParameters_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllParameters_resultStandardScheme getScheme() {
        return new deleteAllParameters_resultStandardScheme();
      }
    }

    private static class deleteAllParameters_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<deleteAllParameters_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, deleteAllParameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, deleteAllParameters_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class deleteAllParameters_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public deleteAllParameters_resultTupleScheme getScheme() {
        return new deleteAllParameters_resultTupleScheme();
      }
    }

    private static class deleteAllParameters_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<deleteAllParameters_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, deleteAllParameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, deleteAllParameters_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
