/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.transfer.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-30")
@JsonIgnoreProperties(ignoreUnknown = true)
public class RoutineDTO implements org.apache.thrift.TBase<RoutineDTO, RoutineDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RoutineDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoutineDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField PRIVATE_ROUTINE_FIELD_DESC = new org.apache.thrift.protocol.TField("privateRoutine", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("name", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField DESCRIPTION_FIELD_DESC = new org.apache.thrift.protocol.TField("description", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField REVISION_FIELD_DESC = new org.apache.thrift.protocol.TField("revision", org.apache.thrift.protocol.TType.I16, (short)5);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.I32, (short)6);
  private static final org.apache.thrift.protocol.TField IN_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("inParameters", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField OUT_PARAMETER_FIELD_DESC = new org.apache.thrift.protocol.TField("outParameter", org.apache.thrift.protocol.TType.STRUCT, (short)9);
  private static final org.apache.thrift.protocol.TField ROUTINE_BINARIES_FIELD_DESC = new org.apache.thrift.protocol.TField("routineBinaries", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField ARGUMENTS_FIELD_DESC = new org.apache.thrift.protocol.TField("arguments", org.apache.thrift.protocol.TType.LIST, (short)11);
  private static final org.apache.thrift.protocol.TField REQUIRED_FEATURES_FIELD_DESC = new org.apache.thrift.protocol.TField("requiredFeatures", org.apache.thrift.protocol.TType.LIST, (short)12);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RoutineDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RoutineDTOTupleSchemeFactory();

  public java.lang.String id; // required
  public boolean privateRoutine; // required
  public java.lang.String name; // required
  public java.lang.String description; // required
  public short revision; // required
  /**
   * 
   * @see RoutineType
   */
  public RoutineType type; // required
  public java.util.List<FormalParameterDTO> inParameters; // required
  public FormalParameterDTO outParameter; // required
  public java.util.Set<RoutineBinaryDTO> routineBinaries; // required
  public java.util.List<java.lang.String> arguments; // required
  public java.util.List<FeatureDTO> requiredFeatures; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    PRIVATE_ROUTINE((short)2, "privateRoutine"),
    NAME((short)3, "name"),
    DESCRIPTION((short)4, "description"),
    REVISION((short)5, "revision"),
    /**
     * 
     * @see RoutineType
     */
    TYPE((short)6, "type"),
    IN_PARAMETERS((short)8, "inParameters"),
    OUT_PARAMETER((short)9, "outParameter"),
    ROUTINE_BINARIES((short)10, "routineBinaries"),
    ARGUMENTS((short)11, "arguments"),
    REQUIRED_FEATURES((short)12, "requiredFeatures");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // PRIVATE_ROUTINE
          return PRIVATE_ROUTINE;
        case 3: // NAME
          return NAME;
        case 4: // DESCRIPTION
          return DESCRIPTION;
        case 5: // REVISION
          return REVISION;
        case 6: // TYPE
          return TYPE;
        case 8: // IN_PARAMETERS
          return IN_PARAMETERS;
        case 9: // OUT_PARAMETER
          return OUT_PARAMETER;
        case 10: // ROUTINE_BINARIES
          return ROUTINE_BINARIES;
        case 11: // ARGUMENTS
          return ARGUMENTS;
        case 12: // REQUIRED_FEATURES
          return REQUIRED_FEATURES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __PRIVATEROUTINE_ISSET_ID = 0;
  private static final int __REVISION_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.PRIVATE_ROUTINE, new org.apache.thrift.meta_data.FieldMetaData("privateRoutine", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NAME, new org.apache.thrift.meta_data.FieldMetaData("name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.DESCRIPTION, new org.apache.thrift.meta_data.FieldMetaData("description", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REVISION, new org.apache.thrift.meta_data.FieldMetaData("revision", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RoutineType.class)));
    tmpMap.put(_Fields.IN_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("inParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FormalParameterDTO"))));
    tmpMap.put(_Fields.OUT_PARAMETER, new org.apache.thrift.meta_data.FieldMetaData("outParameter", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "FormalParameterDTO")));
    tmpMap.put(_Fields.ROUTINE_BINARIES, new org.apache.thrift.meta_data.FieldMetaData("routineBinaries", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "RoutineBinaryDTO"))));
    tmpMap.put(_Fields.ARGUMENTS, new org.apache.thrift.meta_data.FieldMetaData("arguments", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.REQUIRED_FEATURES, new org.apache.thrift.meta_data.FieldMetaData("requiredFeatures", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT            , "FeatureDTO"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoutineDTO.class, metaDataMap);
  }

  public RoutineDTO() {
  }

  public RoutineDTO(
    java.lang.String id,
    boolean privateRoutine,
    java.lang.String name,
    java.lang.String description,
    short revision,
    RoutineType type,
    java.util.List<FormalParameterDTO> inParameters,
    FormalParameterDTO outParameter,
    java.util.Set<RoutineBinaryDTO> routineBinaries,
    java.util.List<java.lang.String> arguments,
    java.util.List<FeatureDTO> requiredFeatures)
  {
    this();
    this.id = id;
    this.privateRoutine = privateRoutine;
    setPrivateRoutineIsSet(true);
    this.name = name;
    this.description = description;
    this.revision = revision;
    setRevisionIsSet(true);
    this.type = type;
    this.inParameters = inParameters;
    this.outParameter = outParameter;
    this.routineBinaries = routineBinaries;
    this.arguments = arguments;
    this.requiredFeatures = requiredFeatures;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoutineDTO(RoutineDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.privateRoutine = other.privateRoutine;
    if (other.isSetName()) {
      this.name = other.name;
    }
    if (other.isSetDescription()) {
      this.description = other.description;
    }
    this.revision = other.revision;
    if (other.isSetType()) {
      this.type = other.type;
    }
    if (other.isSetInParameters()) {
      java.util.List<FormalParameterDTO> __this__inParameters = new java.util.ArrayList<FormalParameterDTO>(other.inParameters.size());
      for (FormalParameterDTO other_element : other.inParameters) {
        __this__inParameters.add(new FormalParameterDTO(other_element));
      }
      this.inParameters = __this__inParameters;
    }
    if (other.isSetOutParameter()) {
      this.outParameter = new FormalParameterDTO(other.outParameter);
    }
    if (other.isSetRoutineBinaries()) {
      java.util.Set<RoutineBinaryDTO> __this__routineBinaries = new java.util.HashSet<RoutineBinaryDTO>(other.routineBinaries.size());
      for (RoutineBinaryDTO other_element : other.routineBinaries) {
        __this__routineBinaries.add(new RoutineBinaryDTO(other_element));
      }
      this.routineBinaries = __this__routineBinaries;
    }
    if (other.isSetArguments()) {
      java.util.List<java.lang.String> __this__arguments = new java.util.ArrayList<java.lang.String>(other.arguments);
      this.arguments = __this__arguments;
    }
    if (other.isSetRequiredFeatures()) {
      java.util.List<FeatureDTO> __this__requiredFeatures = new java.util.ArrayList<FeatureDTO>(other.requiredFeatures.size());
      for (FeatureDTO other_element : other.requiredFeatures) {
        __this__requiredFeatures.add(new FeatureDTO(other_element));
      }
      this.requiredFeatures = __this__requiredFeatures;
    }
  }

  public RoutineDTO deepCopy() {
    return new RoutineDTO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setPrivateRoutineIsSet(false);
    this.privateRoutine = false;
    this.name = null;
    this.description = null;
    setRevisionIsSet(false);
    this.revision = 0;
    this.type = null;
    this.inParameters = null;
    this.outParameter = null;
    this.routineBinaries = null;
    this.arguments = null;
    this.requiredFeatures = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public RoutineDTO setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public boolean isPrivateRoutine() {
    return this.privateRoutine;
  }

  public RoutineDTO setPrivateRoutine(boolean privateRoutine) {
    this.privateRoutine = privateRoutine;
    setPrivateRoutineIsSet(true);
    return this;
  }

  public void unsetPrivateRoutine() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIVATEROUTINE_ISSET_ID);
  }

  /** Returns true if field privateRoutine is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivateRoutine() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIVATEROUTINE_ISSET_ID);
  }

  public void setPrivateRoutineIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIVATEROUTINE_ISSET_ID, value);
  }

  public java.lang.String getName() {
    return this.name;
  }

  public RoutineDTO setName(java.lang.String name) {
    this.name = name;
    return this;
  }

  public void unsetName() {
    this.name = null;
  }

  /** Returns true if field name is set (has been assigned a value) and false otherwise */
  public boolean isSetName() {
    return this.name != null;
  }

  public void setNameIsSet(boolean value) {
    if (!value) {
      this.name = null;
    }
  }

  public java.lang.String getDescription() {
    return this.description;
  }

  public RoutineDTO setDescription(java.lang.String description) {
    this.description = description;
    return this;
  }

  public void unsetDescription() {
    this.description = null;
  }

  /** Returns true if field description is set (has been assigned a value) and false otherwise */
  public boolean isSetDescription() {
    return this.description != null;
  }

  public void setDescriptionIsSet(boolean value) {
    if (!value) {
      this.description = null;
    }
  }

  public short getRevision() {
    return this.revision;
  }

  public RoutineDTO setRevision(short revision) {
    this.revision = revision;
    setRevisionIsSet(true);
    return this;
  }

  public void unsetRevision() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  /** Returns true if field revision is set (has been assigned a value) and false otherwise */
  public boolean isSetRevision() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __REVISION_ISSET_ID);
  }

  public void setRevisionIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __REVISION_ISSET_ID, value);
  }

  /**
   * 
   * @see RoutineType
   */
  public RoutineType getType() {
    return this.type;
  }

  /**
   * 
   * @see RoutineType
   */
  public RoutineDTO setType(RoutineType type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public int getInParametersSize() {
    return (this.inParameters == null) ? 0 : this.inParameters.size();
  }

  public java.util.Iterator<FormalParameterDTO> getInParametersIterator() {
    return (this.inParameters == null) ? null : this.inParameters.iterator();
  }

  public void addToInParameters(FormalParameterDTO elem) {
    if (this.inParameters == null) {
      this.inParameters = new java.util.ArrayList<FormalParameterDTO>();
    }
    this.inParameters.add(elem);
  }

  public java.util.List<FormalParameterDTO> getInParameters() {
    return this.inParameters;
  }

  public RoutineDTO setInParameters(java.util.List<FormalParameterDTO> inParameters) {
    this.inParameters = inParameters;
    return this;
  }

  public void unsetInParameters() {
    this.inParameters = null;
  }

  /** Returns true if field inParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetInParameters() {
    return this.inParameters != null;
  }

  public void setInParametersIsSet(boolean value) {
    if (!value) {
      this.inParameters = null;
    }
  }

  public FormalParameterDTO getOutParameter() {
    return this.outParameter;
  }

  public RoutineDTO setOutParameter(FormalParameterDTO outParameter) {
    this.outParameter = outParameter;
    return this;
  }

  public void unsetOutParameter() {
    this.outParameter = null;
  }

  /** Returns true if field outParameter is set (has been assigned a value) and false otherwise */
  public boolean isSetOutParameter() {
    return this.outParameter != null;
  }

  public void setOutParameterIsSet(boolean value) {
    if (!value) {
      this.outParameter = null;
    }
  }

  public int getRoutineBinariesSize() {
    return (this.routineBinaries == null) ? 0 : this.routineBinaries.size();
  }

  public java.util.Iterator<RoutineBinaryDTO> getRoutineBinariesIterator() {
    return (this.routineBinaries == null) ? null : this.routineBinaries.iterator();
  }

  public void addToRoutineBinaries(RoutineBinaryDTO elem) {
    if (this.routineBinaries == null) {
      this.routineBinaries = new java.util.HashSet<RoutineBinaryDTO>();
    }
    this.routineBinaries.add(elem);
  }

  public java.util.Set<RoutineBinaryDTO> getRoutineBinaries() {
    return this.routineBinaries;
  }

  public RoutineDTO setRoutineBinaries(java.util.Set<RoutineBinaryDTO> routineBinaries) {
    this.routineBinaries = routineBinaries;
    return this;
  }

  public void unsetRoutineBinaries() {
    this.routineBinaries = null;
  }

  /** Returns true if field routineBinaries is set (has been assigned a value) and false otherwise */
  public boolean isSetRoutineBinaries() {
    return this.routineBinaries != null;
  }

  public void setRoutineBinariesIsSet(boolean value) {
    if (!value) {
      this.routineBinaries = null;
    }
  }

  public int getArgumentsSize() {
    return (this.arguments == null) ? 0 : this.arguments.size();
  }

  public java.util.Iterator<java.lang.String> getArgumentsIterator() {
    return (this.arguments == null) ? null : this.arguments.iterator();
  }

  public void addToArguments(java.lang.String elem) {
    if (this.arguments == null) {
      this.arguments = new java.util.ArrayList<java.lang.String>();
    }
    this.arguments.add(elem);
  }

  public java.util.List<java.lang.String> getArguments() {
    return this.arguments;
  }

  public RoutineDTO setArguments(java.util.List<java.lang.String> arguments) {
    this.arguments = arguments;
    return this;
  }

  public void unsetArguments() {
    this.arguments = null;
  }

  /** Returns true if field arguments is set (has been assigned a value) and false otherwise */
  public boolean isSetArguments() {
    return this.arguments != null;
  }

  public void setArgumentsIsSet(boolean value) {
    if (!value) {
      this.arguments = null;
    }
  }

  public int getRequiredFeaturesSize() {
    return (this.requiredFeatures == null) ? 0 : this.requiredFeatures.size();
  }

  public java.util.Iterator<FeatureDTO> getRequiredFeaturesIterator() {
    return (this.requiredFeatures == null) ? null : this.requiredFeatures.iterator();
  }

  public void addToRequiredFeatures(FeatureDTO elem) {
    if (this.requiredFeatures == null) {
      this.requiredFeatures = new java.util.ArrayList<FeatureDTO>();
    }
    this.requiredFeatures.add(elem);
  }

  public java.util.List<FeatureDTO> getRequiredFeatures() {
    return this.requiredFeatures;
  }

  public RoutineDTO setRequiredFeatures(java.util.List<FeatureDTO> requiredFeatures) {
    this.requiredFeatures = requiredFeatures;
    return this;
  }

  public void unsetRequiredFeatures() {
    this.requiredFeatures = null;
  }

  /** Returns true if field requiredFeatures is set (has been assigned a value) and false otherwise */
  public boolean isSetRequiredFeatures() {
    return this.requiredFeatures != null;
  }

  public void setRequiredFeaturesIsSet(boolean value) {
    if (!value) {
      this.requiredFeatures = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case PRIVATE_ROUTINE:
      if (value == null) {
        unsetPrivateRoutine();
      } else {
        setPrivateRoutine((java.lang.Boolean)value);
      }
      break;

    case NAME:
      if (value == null) {
        unsetName();
      } else {
        setName((java.lang.String)value);
      }
      break;

    case DESCRIPTION:
      if (value == null) {
        unsetDescription();
      } else {
        setDescription((java.lang.String)value);
      }
      break;

    case REVISION:
      if (value == null) {
        unsetRevision();
      } else {
        setRevision((java.lang.Short)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((RoutineType)value);
      }
      break;

    case IN_PARAMETERS:
      if (value == null) {
        unsetInParameters();
      } else {
        setInParameters((java.util.List<FormalParameterDTO>)value);
      }
      break;

    case OUT_PARAMETER:
      if (value == null) {
        unsetOutParameter();
      } else {
        setOutParameter((FormalParameterDTO)value);
      }
      break;

    case ROUTINE_BINARIES:
      if (value == null) {
        unsetRoutineBinaries();
      } else {
        setRoutineBinaries((java.util.Set<RoutineBinaryDTO>)value);
      }
      break;

    case ARGUMENTS:
      if (value == null) {
        unsetArguments();
      } else {
        setArguments((java.util.List<java.lang.String>)value);
      }
      break;

    case REQUIRED_FEATURES:
      if (value == null) {
        unsetRequiredFeatures();
      } else {
        setRequiredFeatures((java.util.List<FeatureDTO>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case PRIVATE_ROUTINE:
      return isPrivateRoutine();

    case NAME:
      return getName();

    case DESCRIPTION:
      return getDescription();

    case REVISION:
      return getRevision();

    case TYPE:
      return getType();

    case IN_PARAMETERS:
      return getInParameters();

    case OUT_PARAMETER:
      return getOutParameter();

    case ROUTINE_BINARIES:
      return getRoutineBinaries();

    case ARGUMENTS:
      return getArguments();

    case REQUIRED_FEATURES:
      return getRequiredFeatures();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case PRIVATE_ROUTINE:
      return isSetPrivateRoutine();
    case NAME:
      return isSetName();
    case DESCRIPTION:
      return isSetDescription();
    case REVISION:
      return isSetRevision();
    case TYPE:
      return isSetType();
    case IN_PARAMETERS:
      return isSetInParameters();
    case OUT_PARAMETER:
      return isSetOutParameter();
    case ROUTINE_BINARIES:
      return isSetRoutineBinaries();
    case ARGUMENTS:
      return isSetArguments();
    case REQUIRED_FEATURES:
      return isSetRequiredFeatures();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RoutineDTO)
      return this.equals((RoutineDTO)that);
    return false;
  }

  public boolean equals(RoutineDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_privateRoutine = true;
    boolean that_present_privateRoutine = true;
    if (this_present_privateRoutine || that_present_privateRoutine) {
      if (!(this_present_privateRoutine && that_present_privateRoutine))
        return false;
      if (this.privateRoutine != that.privateRoutine)
        return false;
    }

    boolean this_present_name = true && this.isSetName();
    boolean that_present_name = true && that.isSetName();
    if (this_present_name || that_present_name) {
      if (!(this_present_name && that_present_name))
        return false;
      if (!this.name.equals(that.name))
        return false;
    }

    boolean this_present_description = true && this.isSetDescription();
    boolean that_present_description = true && that.isSetDescription();
    if (this_present_description || that_present_description) {
      if (!(this_present_description && that_present_description))
        return false;
      if (!this.description.equals(that.description))
        return false;
    }

    boolean this_present_revision = true;
    boolean that_present_revision = true;
    if (this_present_revision || that_present_revision) {
      if (!(this_present_revision && that_present_revision))
        return false;
      if (this.revision != that.revision)
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    boolean this_present_inParameters = true && this.isSetInParameters();
    boolean that_present_inParameters = true && that.isSetInParameters();
    if (this_present_inParameters || that_present_inParameters) {
      if (!(this_present_inParameters && that_present_inParameters))
        return false;
      if (!this.inParameters.equals(that.inParameters))
        return false;
    }

    boolean this_present_outParameter = true && this.isSetOutParameter();
    boolean that_present_outParameter = true && that.isSetOutParameter();
    if (this_present_outParameter || that_present_outParameter) {
      if (!(this_present_outParameter && that_present_outParameter))
        return false;
      if (!this.outParameter.equals(that.outParameter))
        return false;
    }

    boolean this_present_routineBinaries = true && this.isSetRoutineBinaries();
    boolean that_present_routineBinaries = true && that.isSetRoutineBinaries();
    if (this_present_routineBinaries || that_present_routineBinaries) {
      if (!(this_present_routineBinaries && that_present_routineBinaries))
        return false;
      if (!this.routineBinaries.equals(that.routineBinaries))
        return false;
    }

    boolean this_present_arguments = true && this.isSetArguments();
    boolean that_present_arguments = true && that.isSetArguments();
    if (this_present_arguments || that_present_arguments) {
      if (!(this_present_arguments && that_present_arguments))
        return false;
      if (!this.arguments.equals(that.arguments))
        return false;
    }

    boolean this_present_requiredFeatures = true && this.isSetRequiredFeatures();
    boolean that_present_requiredFeatures = true && that.isSetRequiredFeatures();
    if (this_present_requiredFeatures || that_present_requiredFeatures) {
      if (!(this_present_requiredFeatures && that_present_requiredFeatures))
        return false;
      if (!this.requiredFeatures.equals(that.requiredFeatures))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((privateRoutine) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetName()) ? 131071 : 524287);
    if (isSetName())
      hashCode = hashCode * 8191 + name.hashCode();

    hashCode = hashCode * 8191 + ((isSetDescription()) ? 131071 : 524287);
    if (isSetDescription())
      hashCode = hashCode * 8191 + description.hashCode();

    hashCode = hashCode * 8191 + revision;

    hashCode = hashCode * 8191 + ((isSetType()) ? 131071 : 524287);
    if (isSetType())
      hashCode = hashCode * 8191 + type.getValue();

    hashCode = hashCode * 8191 + ((isSetInParameters()) ? 131071 : 524287);
    if (isSetInParameters())
      hashCode = hashCode * 8191 + inParameters.hashCode();

    hashCode = hashCode * 8191 + ((isSetOutParameter()) ? 131071 : 524287);
    if (isSetOutParameter())
      hashCode = hashCode * 8191 + outParameter.hashCode();

    hashCode = hashCode * 8191 + ((isSetRoutineBinaries()) ? 131071 : 524287);
    if (isSetRoutineBinaries())
      hashCode = hashCode * 8191 + routineBinaries.hashCode();

    hashCode = hashCode * 8191 + ((isSetArguments()) ? 131071 : 524287);
    if (isSetArguments())
      hashCode = hashCode * 8191 + arguments.hashCode();

    hashCode = hashCode * 8191 + ((isSetRequiredFeatures()) ? 131071 : 524287);
    if (isSetRequiredFeatures())
      hashCode = hashCode * 8191 + requiredFeatures.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RoutineDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivateRoutine()).compareTo(other.isSetPrivateRoutine());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivateRoutine()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateRoutine, other.privateRoutine);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetName()).compareTo(other.isSetName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.name, other.name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetDescription()).compareTo(other.isSetDescription());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDescription()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.description, other.description);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRevision()).compareTo(other.isSetRevision());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRevision()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.revision, other.revision);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetType()).compareTo(other.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, other.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInParameters()).compareTo(other.isSetInParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inParameters, other.inParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOutParameter()).compareTo(other.isSetOutParameter());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOutParameter()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outParameter, other.outParameter);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRoutineBinaries()).compareTo(other.isSetRoutineBinaries());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoutineBinaries()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routineBinaries, other.routineBinaries);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetArguments()).compareTo(other.isSetArguments());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetArguments()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.arguments, other.arguments);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRequiredFeatures()).compareTo(other.isSetRequiredFeatures());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRequiredFeatures()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.requiredFeatures, other.requiredFeatures);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RoutineDTO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privateRoutine:");
    sb.append(this.privateRoutine);
    first = false;
    if (!first) sb.append(", ");
    sb.append("name:");
    if (this.name == null) {
      sb.append("null");
    } else {
      sb.append(this.name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("description:");
    if (this.description == null) {
      sb.append("null");
    } else {
      sb.append(this.description);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("revision:");
    sb.append(this.revision);
    first = false;
    if (!first) sb.append(", ");
    sb.append("type:");
    if (this.type == null) {
      sb.append("null");
    } else {
      sb.append(this.type);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inParameters:");
    if (this.inParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.inParameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outParameter:");
    if (this.outParameter == null) {
      sb.append("null");
    } else {
      sb.append(this.outParameter);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("routineBinaries:");
    if (this.routineBinaries == null) {
      sb.append("null");
    } else {
      sb.append(this.routineBinaries);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("arguments:");
    if (this.arguments == null) {
      sb.append("null");
    } else {
      sb.append(this.arguments);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("requiredFeatures:");
    if (this.requiredFeatures == null) {
      sb.append("null");
    } else {
      sb.append(this.requiredFeatures);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoutineDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoutineDTOStandardScheme getScheme() {
      return new RoutineDTOStandardScheme();
    }
  }

  private static class RoutineDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<RoutineDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoutineDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // PRIVATE_ROUTINE
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.privateRoutine = iprot.readBool();
              struct.setPrivateRoutineIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.name = iprot.readString();
              struct.setNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // DESCRIPTION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.description = iprot.readString();
              struct.setDescriptionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // REVISION
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.revision = iprot.readI16();
              struct.setRevisionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.type = at.enfilo.def.transfer.dto.RoutineType.findByValue(iprot.readI32());
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // IN_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list86 = iprot.readListBegin();
                struct.inParameters = new java.util.ArrayList<FormalParameterDTO>(_list86.size);
                FormalParameterDTO _elem87;
                for (int _i88 = 0; _i88 < _list86.size; ++_i88)
                {
                  _elem87 = new FormalParameterDTO();
                  _elem87.read(iprot);
                  struct.inParameters.add(_elem87);
                }
                iprot.readListEnd();
              }
              struct.setInParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // OUT_PARAMETER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.outParameter = new FormalParameterDTO();
              struct.outParameter.read(iprot);
              struct.setOutParameterIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // ROUTINE_BINARIES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set89 = iprot.readSetBegin();
                struct.routineBinaries = new java.util.HashSet<RoutineBinaryDTO>(2*_set89.size);
                RoutineBinaryDTO _elem90;
                for (int _i91 = 0; _i91 < _set89.size; ++_i91)
                {
                  _elem90 = new RoutineBinaryDTO();
                  _elem90.read(iprot);
                  struct.routineBinaries.add(_elem90);
                }
                iprot.readSetEnd();
              }
              struct.setRoutineBinariesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // ARGUMENTS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list92 = iprot.readListBegin();
                struct.arguments = new java.util.ArrayList<java.lang.String>(_list92.size);
                java.lang.String _elem93;
                for (int _i94 = 0; _i94 < _list92.size; ++_i94)
                {
                  _elem93 = iprot.readString();
                  struct.arguments.add(_elem93);
                }
                iprot.readListEnd();
              }
              struct.setArgumentsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // REQUIRED_FEATURES
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list95 = iprot.readListBegin();
                struct.requiredFeatures = new java.util.ArrayList<FeatureDTO>(_list95.size);
                FeatureDTO _elem96;
                for (int _i97 = 0; _i97 < _list95.size; ++_i97)
                {
                  _elem96 = new FeatureDTO();
                  _elem96.read(iprot);
                  struct.requiredFeatures.add(_elem96);
                }
                iprot.readListEnd();
              }
              struct.setRequiredFeaturesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoutineDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(PRIVATE_ROUTINE_FIELD_DESC);
      oprot.writeBool(struct.privateRoutine);
      oprot.writeFieldEnd();
      if (struct.name != null) {
        oprot.writeFieldBegin(NAME_FIELD_DESC);
        oprot.writeString(struct.name);
        oprot.writeFieldEnd();
      }
      if (struct.description != null) {
        oprot.writeFieldBegin(DESCRIPTION_FIELD_DESC);
        oprot.writeString(struct.description);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(REVISION_FIELD_DESC);
      oprot.writeI16(struct.revision);
      oprot.writeFieldEnd();
      if (struct.type != null) {
        oprot.writeFieldBegin(TYPE_FIELD_DESC);
        oprot.writeI32(struct.type.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.inParameters != null) {
        oprot.writeFieldBegin(IN_PARAMETERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.inParameters.size()));
          for (FormalParameterDTO _iter98 : struct.inParameters)
          {
            _iter98.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.outParameter != null) {
        oprot.writeFieldBegin(OUT_PARAMETER_FIELD_DESC);
        struct.outParameter.write(oprot);
        oprot.writeFieldEnd();
      }
      if (struct.routineBinaries != null) {
        oprot.writeFieldBegin(ROUTINE_BINARIES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, struct.routineBinaries.size()));
          for (RoutineBinaryDTO _iter99 : struct.routineBinaries)
          {
            _iter99.write(oprot);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.arguments != null) {
        oprot.writeFieldBegin(ARGUMENTS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.arguments.size()));
          for (java.lang.String _iter100 : struct.arguments)
          {
            oprot.writeString(_iter100);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.requiredFeatures != null) {
        oprot.writeFieldBegin(REQUIRED_FEATURES_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.requiredFeatures.size()));
          for (FeatureDTO _iter101 : struct.requiredFeatures)
          {
            _iter101.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoutineDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoutineDTOTupleScheme getScheme() {
      return new RoutineDTOTupleScheme();
    }
  }

  private static class RoutineDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<RoutineDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoutineDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetPrivateRoutine()) {
        optionals.set(1);
      }
      if (struct.isSetName()) {
        optionals.set(2);
      }
      if (struct.isSetDescription()) {
        optionals.set(3);
      }
      if (struct.isSetRevision()) {
        optionals.set(4);
      }
      if (struct.isSetType()) {
        optionals.set(5);
      }
      if (struct.isSetInParameters()) {
        optionals.set(6);
      }
      if (struct.isSetOutParameter()) {
        optionals.set(7);
      }
      if (struct.isSetRoutineBinaries()) {
        optionals.set(8);
      }
      if (struct.isSetArguments()) {
        optionals.set(9);
      }
      if (struct.isSetRequiredFeatures()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetPrivateRoutine()) {
        oprot.writeBool(struct.privateRoutine);
      }
      if (struct.isSetName()) {
        oprot.writeString(struct.name);
      }
      if (struct.isSetDescription()) {
        oprot.writeString(struct.description);
      }
      if (struct.isSetRevision()) {
        oprot.writeI16(struct.revision);
      }
      if (struct.isSetType()) {
        oprot.writeI32(struct.type.getValue());
      }
      if (struct.isSetInParameters()) {
        {
          oprot.writeI32(struct.inParameters.size());
          for (FormalParameterDTO _iter102 : struct.inParameters)
          {
            _iter102.write(oprot);
          }
        }
      }
      if (struct.isSetOutParameter()) {
        struct.outParameter.write(oprot);
      }
      if (struct.isSetRoutineBinaries()) {
        {
          oprot.writeI32(struct.routineBinaries.size());
          for (RoutineBinaryDTO _iter103 : struct.routineBinaries)
          {
            _iter103.write(oprot);
          }
        }
      }
      if (struct.isSetArguments()) {
        {
          oprot.writeI32(struct.arguments.size());
          for (java.lang.String _iter104 : struct.arguments)
          {
            oprot.writeString(_iter104);
          }
        }
      }
      if (struct.isSetRequiredFeatures()) {
        {
          oprot.writeI32(struct.requiredFeatures.size());
          for (FeatureDTO _iter105 : struct.requiredFeatures)
          {
            _iter105.write(oprot);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoutineDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.privateRoutine = iprot.readBool();
        struct.setPrivateRoutineIsSet(true);
      }
      if (incoming.get(2)) {
        struct.name = iprot.readString();
        struct.setNameIsSet(true);
      }
      if (incoming.get(3)) {
        struct.description = iprot.readString();
        struct.setDescriptionIsSet(true);
      }
      if (incoming.get(4)) {
        struct.revision = iprot.readI16();
        struct.setRevisionIsSet(true);
      }
      if (incoming.get(5)) {
        struct.type = at.enfilo.def.transfer.dto.RoutineType.findByValue(iprot.readI32());
        struct.setTypeIsSet(true);
      }
      if (incoming.get(6)) {
        {
          org.apache.thrift.protocol.TList _list106 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inParameters = new java.util.ArrayList<FormalParameterDTO>(_list106.size);
          FormalParameterDTO _elem107;
          for (int _i108 = 0; _i108 < _list106.size; ++_i108)
          {
            _elem107 = new FormalParameterDTO();
            _elem107.read(iprot);
            struct.inParameters.add(_elem107);
          }
        }
        struct.setInParametersIsSet(true);
      }
      if (incoming.get(7)) {
        struct.outParameter = new FormalParameterDTO();
        struct.outParameter.read(iprot);
        struct.setOutParameterIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TSet _set109 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.routineBinaries = new java.util.HashSet<RoutineBinaryDTO>(2*_set109.size);
          RoutineBinaryDTO _elem110;
          for (int _i111 = 0; _i111 < _set109.size; ++_i111)
          {
            _elem110 = new RoutineBinaryDTO();
            _elem110.read(iprot);
            struct.routineBinaries.add(_elem110);
          }
        }
        struct.setRoutineBinariesIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TList _list112 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.arguments = new java.util.ArrayList<java.lang.String>(_list112.size);
          java.lang.String _elem113;
          for (int _i114 = 0; _i114 < _list112.size; ++_i114)
          {
            _elem113 = iprot.readString();
            struct.arguments.add(_elem113);
          }
        }
        struct.setArgumentsIsSet(true);
      }
      if (incoming.get(10)) {
        {
          org.apache.thrift.protocol.TList _list115 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.requiredFeatures = new java.util.ArrayList<FeatureDTO>(_list115.size);
          FeatureDTO _elem116;
          for (int _i117 = 0; _i117 < _list115.size; ++_i117)
          {
            _elem116 = new FeatureDTO();
            _elem116.read(iprot);
            struct.requiredFeatures.add(_elem116);
          }
        }
        struct.setRequiredFeaturesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

