/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.transfer.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-08-13")
@JsonIgnoreProperties(ignoreUnknown = true)
public class RoutineInstanceDTO implements org.apache.thrift.TBase<RoutineInstanceDTO, RoutineInstanceDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RoutineInstanceDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoutineInstanceDTO");

  private static final org.apache.thrift.protocol.TField ROUTINE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("routineId", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField IN_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("inParameters", org.apache.thrift.protocol.TType.MAP, (short)2);
  private static final org.apache.thrift.protocol.TField MISSING_PARAMETERS_FIELD_DESC = new org.apache.thrift.protocol.TField("missingParameters", org.apache.thrift.protocol.TType.LIST, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RoutineInstanceDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RoutineInstanceDTOTupleSchemeFactory();

  private java.lang.String routineId; // required
  private java.util.Map<java.lang.String,ResourceDTO> inParameters; // required
  private java.util.List<java.lang.String> missingParameters; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROUTINE_ID((short)1, "routineId"),
    IN_PARAMETERS((short)2, "inParameters"),
    MISSING_PARAMETERS((short)3, "missingParameters");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROUTINE_ID
          return ROUTINE_ID;
        case 2: // IN_PARAMETERS
          return IN_PARAMETERS;
        case 3: // MISSING_PARAMETERS
          return MISSING_PARAMETERS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROUTINE_ID, new org.apache.thrift.meta_data.FieldMetaData("routineId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.IN_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("inParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, ResourceDTO.class))));
    tmpMap.put(_Fields.MISSING_PARAMETERS, new org.apache.thrift.meta_data.FieldMetaData("missingParameters", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoutineInstanceDTO.class, metaDataMap);
  }

  public RoutineInstanceDTO() {
  }

  public RoutineInstanceDTO(
    java.lang.String routineId,
    java.util.Map<java.lang.String,ResourceDTO> inParameters,
    java.util.List<java.lang.String> missingParameters)
  {
    this();
    this.routineId = routineId;
    this.inParameters = inParameters;
    this.missingParameters = missingParameters;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoutineInstanceDTO(RoutineInstanceDTO other) {
    if (other.isSetRoutineId()) {
      this.routineId = other.routineId;
    }
    if (other.isSetInParameters()) {
      java.util.Map<java.lang.String,ResourceDTO> __this__inParameters = new java.util.HashMap<java.lang.String,ResourceDTO>(other.inParameters.size());
      for (java.util.Map.Entry<java.lang.String, ResourceDTO> other_element : other.inParameters.entrySet()) {

        java.lang.String other_element_key = other_element.getKey();
        ResourceDTO other_element_value = other_element.getValue();

        java.lang.String __this__inParameters_copy_key = other_element_key;

        ResourceDTO __this__inParameters_copy_value = new ResourceDTO(other_element_value);

        __this__inParameters.put(__this__inParameters_copy_key, __this__inParameters_copy_value);
      }
      this.inParameters = __this__inParameters;
    }
    if (other.isSetMissingParameters()) {
      java.util.List<java.lang.String> __this__missingParameters = new java.util.ArrayList<java.lang.String>(other.missingParameters);
      this.missingParameters = __this__missingParameters;
    }
  }

  public RoutineInstanceDTO deepCopy() {
    return new RoutineInstanceDTO(this);
  }

  @Override
  public void clear() {
    this.routineId = null;
    this.inParameters = null;
    this.missingParameters = null;
  }

  public java.lang.String getRoutineId() {
    return this.routineId;
  }

  public void setRoutineId(java.lang.String routineId) {
    this.routineId = routineId;
  }

  public void unsetRoutineId() {
    this.routineId = null;
  }

  /** Returns true if field routineId is set (has been assigned a value) and false otherwise */
  public boolean isSetRoutineId() {
    return this.routineId != null;
  }

  public void setRoutineIdIsSet(boolean value) {
    if (!value) {
      this.routineId = null;
    }
  }

  public int getInParametersSize() {
    return (this.inParameters == null) ? 0 : this.inParameters.size();
  }

  public void putToInParameters(java.lang.String key, ResourceDTO val) {
    if (this.inParameters == null) {
      this.inParameters = new java.util.HashMap<java.lang.String,ResourceDTO>();
    }
    this.inParameters.put(key, val);
  }

  public java.util.Map<java.lang.String,ResourceDTO> getInParameters() {
    return this.inParameters;
  }

  public void setInParameters(java.util.Map<java.lang.String,ResourceDTO> inParameters) {
    this.inParameters = inParameters;
  }

  public void unsetInParameters() {
    this.inParameters = null;
  }

  /** Returns true if field inParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetInParameters() {
    return this.inParameters != null;
  }

  public void setInParametersIsSet(boolean value) {
    if (!value) {
      this.inParameters = null;
    }
  }

  public int getMissingParametersSize() {
    return (this.missingParameters == null) ? 0 : this.missingParameters.size();
  }

  public java.util.Iterator<java.lang.String> getMissingParametersIterator() {
    return (this.missingParameters == null) ? null : this.missingParameters.iterator();
  }

  public void addToMissingParameters(java.lang.String elem) {
    if (this.missingParameters == null) {
      this.missingParameters = new java.util.ArrayList<java.lang.String>();
    }
    this.missingParameters.add(elem);
  }

  public java.util.List<java.lang.String> getMissingParameters() {
    return this.missingParameters;
  }

  public void setMissingParameters(java.util.List<java.lang.String> missingParameters) {
    this.missingParameters = missingParameters;
  }

  public void unsetMissingParameters() {
    this.missingParameters = null;
  }

  /** Returns true if field missingParameters is set (has been assigned a value) and false otherwise */
  public boolean isSetMissingParameters() {
    return this.missingParameters != null;
  }

  public void setMissingParametersIsSet(boolean value) {
    if (!value) {
      this.missingParameters = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ROUTINE_ID:
      if (value == null) {
        unsetRoutineId();
      } else {
        setRoutineId((java.lang.String)value);
      }
      break;

    case IN_PARAMETERS:
      if (value == null) {
        unsetInParameters();
      } else {
        setInParameters((java.util.Map<java.lang.String,ResourceDTO>)value);
      }
      break;

    case MISSING_PARAMETERS:
      if (value == null) {
        unsetMissingParameters();
      } else {
        setMissingParameters((java.util.List<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ROUTINE_ID:
      return getRoutineId();

    case IN_PARAMETERS:
      return getInParameters();

    case MISSING_PARAMETERS:
      return getMissingParameters();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ROUTINE_ID:
      return isSetRoutineId();
    case IN_PARAMETERS:
      return isSetInParameters();
    case MISSING_PARAMETERS:
      return isSetMissingParameters();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RoutineInstanceDTO)
      return this.equals((RoutineInstanceDTO)that);
    return false;
  }

  public boolean equals(RoutineInstanceDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_routineId = true && this.isSetRoutineId();
    boolean that_present_routineId = true && that.isSetRoutineId();
    if (this_present_routineId || that_present_routineId) {
      if (!(this_present_routineId && that_present_routineId))
        return false;
      if (!this.routineId.equals(that.routineId))
        return false;
    }

    boolean this_present_inParameters = true && this.isSetInParameters();
    boolean that_present_inParameters = true && that.isSetInParameters();
    if (this_present_inParameters || that_present_inParameters) {
      if (!(this_present_inParameters && that_present_inParameters))
        return false;
      if (!this.inParameters.equals(that.inParameters))
        return false;
    }

    boolean this_present_missingParameters = true && this.isSetMissingParameters();
    boolean that_present_missingParameters = true && that.isSetMissingParameters();
    if (this_present_missingParameters || that_present_missingParameters) {
      if (!(this_present_missingParameters && that_present_missingParameters))
        return false;
      if (!this.missingParameters.equals(that.missingParameters))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetRoutineId()) ? 131071 : 524287);
    if (isSetRoutineId())
      hashCode = hashCode * 8191 + routineId.hashCode();

    hashCode = hashCode * 8191 + ((isSetInParameters()) ? 131071 : 524287);
    if (isSetInParameters())
      hashCode = hashCode * 8191 + inParameters.hashCode();

    hashCode = hashCode * 8191 + ((isSetMissingParameters()) ? 131071 : 524287);
    if (isSetMissingParameters())
      hashCode = hashCode * 8191 + missingParameters.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RoutineInstanceDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetRoutineId()).compareTo(other.isSetRoutineId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRoutineId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.routineId, other.routineId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetInParameters()).compareTo(other.isSetInParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inParameters, other.inParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMissingParameters()).compareTo(other.isSetMissingParameters());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMissingParameters()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.missingParameters, other.missingParameters);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RoutineInstanceDTO(");
    boolean first = true;

    sb.append("routineId:");
    if (this.routineId == null) {
      sb.append("null");
    } else {
      sb.append(this.routineId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inParameters:");
    if (this.inParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.inParameters);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("missingParameters:");
    if (this.missingParameters == null) {
      sb.append("null");
    } else {
      sb.append(this.missingParameters);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoutineInstanceDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoutineInstanceDTOStandardScheme getScheme() {
      return new RoutineInstanceDTOStandardScheme();
    }
  }

  private static class RoutineInstanceDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<RoutineInstanceDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoutineInstanceDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROUTINE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.routineId = iprot.readString();
              struct.setRoutineIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // IN_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map74 = iprot.readMapBegin();
                struct.inParameters = new java.util.HashMap<java.lang.String,ResourceDTO>(2*_map74.size);
                java.lang.String _key75;
                ResourceDTO _val76;
                for (int _i77 = 0; _i77 < _map74.size; ++_i77)
                {
                  _key75 = iprot.readString();
                  _val76 = new ResourceDTO();
                  _val76.read(iprot);
                  struct.inParameters.put(_key75, _val76);
                }
                iprot.readMapEnd();
              }
              struct.setInParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MISSING_PARAMETERS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list78 = iprot.readListBegin();
                struct.missingParameters = new java.util.ArrayList<java.lang.String>(_list78.size);
                java.lang.String _elem79;
                for (int _i80 = 0; _i80 < _list78.size; ++_i80)
                {
                  _elem79 = iprot.readString();
                  struct.missingParameters.add(_elem79);
                }
                iprot.readListEnd();
              }
              struct.setMissingParametersIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoutineInstanceDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.routineId != null) {
        oprot.writeFieldBegin(ROUTINE_ID_FIELD_DESC);
        oprot.writeString(struct.routineId);
        oprot.writeFieldEnd();
      }
      if (struct.inParameters != null) {
        oprot.writeFieldBegin(IN_PARAMETERS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, struct.inParameters.size()));
          for (java.util.Map.Entry<java.lang.String, ResourceDTO> _iter81 : struct.inParameters.entrySet())
          {
            oprot.writeString(_iter81.getKey());
            _iter81.getValue().write(oprot);
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.missingParameters != null) {
        oprot.writeFieldBegin(MISSING_PARAMETERS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.missingParameters.size()));
          for (java.lang.String _iter82 : struct.missingParameters)
          {
            oprot.writeString(_iter82);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoutineInstanceDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoutineInstanceDTOTupleScheme getScheme() {
      return new RoutineInstanceDTOTupleScheme();
    }
  }

  private static class RoutineInstanceDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<RoutineInstanceDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoutineInstanceDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetRoutineId()) {
        optionals.set(0);
      }
      if (struct.isSetInParameters()) {
        optionals.set(1);
      }
      if (struct.isSetMissingParameters()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRoutineId()) {
        oprot.writeString(struct.routineId);
      }
      if (struct.isSetInParameters()) {
        {
          oprot.writeI32(struct.inParameters.size());
          for (java.util.Map.Entry<java.lang.String, ResourceDTO> _iter83 : struct.inParameters.entrySet())
          {
            oprot.writeString(_iter83.getKey());
            _iter83.getValue().write(oprot);
          }
        }
      }
      if (struct.isSetMissingParameters()) {
        {
          oprot.writeI32(struct.missingParameters.size());
          for (java.lang.String _iter84 : struct.missingParameters)
          {
            oprot.writeString(_iter84);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoutineInstanceDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.routineId = iprot.readString();
        struct.setRoutineIdIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TMap _map85 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.inParameters = new java.util.HashMap<java.lang.String,ResourceDTO>(2*_map85.size);
          java.lang.String _key86;
          ResourceDTO _val87;
          for (int _i88 = 0; _i88 < _map85.size; ++_i88)
          {
            _key86 = iprot.readString();
            _val87 = new ResourceDTO();
            _val87.read(iprot);
            struct.inParameters.put(_key86, _val87);
          }
        }
        struct.setInParametersIsSet(true);
      }
      if (incoming.get(2)) {
        {
          org.apache.thrift.protocol.TList _list89 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.missingParameters = new java.util.ArrayList<java.lang.String>(_list89.size);
          java.lang.String _elem90;
          for (int _i91 = 0; _i91 < _list89.size; ++_i91)
          {
            _elem90 = iprot.readString();
            struct.missingParameters.add(_elem90);
          }
        }
        struct.setMissingParametersIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

