/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.transfer.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-30")
@JsonIgnoreProperties(ignoreUnknown = true)
public class LibraryInfoDTO implements org.apache.thrift.TBase<LibraryInfoDTO, LibraryInfoDTO._Fields>, java.io.Serializable, Cloneable, Comparable<LibraryInfoDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("LibraryInfoDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField LIBRARY_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("libraryType", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField STORE_DRIVER_FIELD_DESC = new org.apache.thrift.protocol.TField("storeDriver", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField STORED_ROUTINES_FIELD_DESC = new org.apache.thrift.protocol.TField("storedRoutines", org.apache.thrift.protocol.TType.SET, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new LibraryInfoDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new LibraryInfoDTOTupleSchemeFactory();

  public java.lang.String id; // required
  /**
   * 
   * @see LibraryType
   */
  public LibraryType libraryType; // required
  public java.lang.String storeDriver; // required
  public java.util.Set<java.lang.String> storedRoutines; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    /**
     * 
     * @see LibraryType
     */
    LIBRARY_TYPE((short)2, "libraryType"),
    STORE_DRIVER((short)3, "storeDriver"),
    STORED_ROUTINES((short)4, "storedRoutines");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // LIBRARY_TYPE
          return LIBRARY_TYPE;
        case 3: // STORE_DRIVER
          return STORE_DRIVER;
        case 4: // STORED_ROUTINES
          return STORED_ROUTINES;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.LIBRARY_TYPE, new org.apache.thrift.meta_data.FieldMetaData("libraryType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, LibraryType.class)));
    tmpMap.put(_Fields.STORE_DRIVER, new org.apache.thrift.meta_data.FieldMetaData("storeDriver", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.STORED_ROUTINES, new org.apache.thrift.meta_data.FieldMetaData("storedRoutines", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING            , "Id"))));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(LibraryInfoDTO.class, metaDataMap);
  }

  public LibraryInfoDTO() {
  }

  public LibraryInfoDTO(
    java.lang.String id,
    LibraryType libraryType,
    java.lang.String storeDriver,
    java.util.Set<java.lang.String> storedRoutines)
  {
    this();
    this.id = id;
    this.libraryType = libraryType;
    this.storeDriver = storeDriver;
    this.storedRoutines = storedRoutines;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public LibraryInfoDTO(LibraryInfoDTO other) {
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetLibraryType()) {
      this.libraryType = other.libraryType;
    }
    if (other.isSetStoreDriver()) {
      this.storeDriver = other.storeDriver;
    }
    if (other.isSetStoredRoutines()) {
      java.util.Set<java.lang.String> __this__storedRoutines = new java.util.HashSet<java.lang.String>(other.storedRoutines.size());
      for (java.lang.String other_element : other.storedRoutines) {
        __this__storedRoutines.add(other_element);
      }
      this.storedRoutines = __this__storedRoutines;
    }
  }

  public LibraryInfoDTO deepCopy() {
    return new LibraryInfoDTO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.libraryType = null;
    this.storeDriver = null;
    this.storedRoutines = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public LibraryInfoDTO setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  /**
   * 
   * @see LibraryType
   */
  public LibraryType getLibraryType() {
    return this.libraryType;
  }

  /**
   * 
   * @see LibraryType
   */
  public LibraryInfoDTO setLibraryType(LibraryType libraryType) {
    this.libraryType = libraryType;
    return this;
  }

  public void unsetLibraryType() {
    this.libraryType = null;
  }

  /** Returns true if field libraryType is set (has been assigned a value) and false otherwise */
  public boolean isSetLibraryType() {
    return this.libraryType != null;
  }

  public void setLibraryTypeIsSet(boolean value) {
    if (!value) {
      this.libraryType = null;
    }
  }

  public java.lang.String getStoreDriver() {
    return this.storeDriver;
  }

  public LibraryInfoDTO setStoreDriver(java.lang.String storeDriver) {
    this.storeDriver = storeDriver;
    return this;
  }

  public void unsetStoreDriver() {
    this.storeDriver = null;
  }

  /** Returns true if field storeDriver is set (has been assigned a value) and false otherwise */
  public boolean isSetStoreDriver() {
    return this.storeDriver != null;
  }

  public void setStoreDriverIsSet(boolean value) {
    if (!value) {
      this.storeDriver = null;
    }
  }

  public int getStoredRoutinesSize() {
    return (this.storedRoutines == null) ? 0 : this.storedRoutines.size();
  }

  public java.util.Iterator<java.lang.String> getStoredRoutinesIterator() {
    return (this.storedRoutines == null) ? null : this.storedRoutines.iterator();
  }

  public void addToStoredRoutines(java.lang.String elem) {
    if (this.storedRoutines == null) {
      this.storedRoutines = new java.util.HashSet<java.lang.String>();
    }
    this.storedRoutines.add(elem);
  }

  public java.util.Set<java.lang.String> getStoredRoutines() {
    return this.storedRoutines;
  }

  public LibraryInfoDTO setStoredRoutines(java.util.Set<java.lang.String> storedRoutines) {
    this.storedRoutines = storedRoutines;
    return this;
  }

  public void unsetStoredRoutines() {
    this.storedRoutines = null;
  }

  /** Returns true if field storedRoutines is set (has been assigned a value) and false otherwise */
  public boolean isSetStoredRoutines() {
    return this.storedRoutines != null;
  }

  public void setStoredRoutinesIsSet(boolean value) {
    if (!value) {
      this.storedRoutines = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case LIBRARY_TYPE:
      if (value == null) {
        unsetLibraryType();
      } else {
        setLibraryType((LibraryType)value);
      }
      break;

    case STORE_DRIVER:
      if (value == null) {
        unsetStoreDriver();
      } else {
        setStoreDriver((java.lang.String)value);
      }
      break;

    case STORED_ROUTINES:
      if (value == null) {
        unsetStoredRoutines();
      } else {
        setStoredRoutines((java.util.Set<java.lang.String>)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case LIBRARY_TYPE:
      return getLibraryType();

    case STORE_DRIVER:
      return getStoreDriver();

    case STORED_ROUTINES:
      return getStoredRoutines();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case LIBRARY_TYPE:
      return isSetLibraryType();
    case STORE_DRIVER:
      return isSetStoreDriver();
    case STORED_ROUTINES:
      return isSetStoredRoutines();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof LibraryInfoDTO)
      return this.equals((LibraryInfoDTO)that);
    return false;
  }

  public boolean equals(LibraryInfoDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_libraryType = true && this.isSetLibraryType();
    boolean that_present_libraryType = true && that.isSetLibraryType();
    if (this_present_libraryType || that_present_libraryType) {
      if (!(this_present_libraryType && that_present_libraryType))
        return false;
      if (!this.libraryType.equals(that.libraryType))
        return false;
    }

    boolean this_present_storeDriver = true && this.isSetStoreDriver();
    boolean that_present_storeDriver = true && that.isSetStoreDriver();
    if (this_present_storeDriver || that_present_storeDriver) {
      if (!(this_present_storeDriver && that_present_storeDriver))
        return false;
      if (!this.storeDriver.equals(that.storeDriver))
        return false;
    }

    boolean this_present_storedRoutines = true && this.isSetStoredRoutines();
    boolean that_present_storedRoutines = true && that.isSetStoredRoutines();
    if (this_present_storedRoutines || that_present_storedRoutines) {
      if (!(this_present_storedRoutines && that_present_storedRoutines))
        return false;
      if (!this.storedRoutines.equals(that.storedRoutines))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetLibraryType()) ? 131071 : 524287);
    if (isSetLibraryType())
      hashCode = hashCode * 8191 + libraryType.getValue();

    hashCode = hashCode * 8191 + ((isSetStoreDriver()) ? 131071 : 524287);
    if (isSetStoreDriver())
      hashCode = hashCode * 8191 + storeDriver.hashCode();

    hashCode = hashCode * 8191 + ((isSetStoredRoutines()) ? 131071 : 524287);
    if (isSetStoredRoutines())
      hashCode = hashCode * 8191 + storedRoutines.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(LibraryInfoDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLibraryType()).compareTo(other.isSetLibraryType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLibraryType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.libraryType, other.libraryType);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoreDriver()).compareTo(other.isSetStoreDriver());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoreDriver()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storeDriver, other.storeDriver);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetStoredRoutines()).compareTo(other.isSetStoredRoutines());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStoredRoutines()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.storedRoutines, other.storedRoutines);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("LibraryInfoDTO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("libraryType:");
    if (this.libraryType == null) {
      sb.append("null");
    } else {
      sb.append(this.libraryType);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storeDriver:");
    if (this.storeDriver == null) {
      sb.append("null");
    } else {
      sb.append(this.storeDriver);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("storedRoutines:");
    if (this.storedRoutines == null) {
      sb.append("null");
    } else {
      sb.append(this.storedRoutines);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class LibraryInfoDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LibraryInfoDTOStandardScheme getScheme() {
      return new LibraryInfoDTOStandardScheme();
    }
  }

  private static class LibraryInfoDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<LibraryInfoDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, LibraryInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LIBRARY_TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.libraryType = at.enfilo.def.transfer.dto.LibraryType.findByValue(iprot.readI32());
              struct.setLibraryTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // STORE_DRIVER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.storeDriver = iprot.readString();
              struct.setStoreDriverIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // STORED_ROUTINES
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set0 = iprot.readSetBegin();
                struct.storedRoutines = new java.util.HashSet<java.lang.String>(2*_set0.size);
                java.lang.String _elem1;
                for (int _i2 = 0; _i2 < _set0.size; ++_i2)
                {
                  _elem1 = iprot.readString();
                  struct.storedRoutines.add(_elem1);
                }
                iprot.readSetEnd();
              }
              struct.setStoredRoutinesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, LibraryInfoDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.libraryType != null) {
        oprot.writeFieldBegin(LIBRARY_TYPE_FIELD_DESC);
        oprot.writeI32(struct.libraryType.getValue());
        oprot.writeFieldEnd();
      }
      if (struct.storeDriver != null) {
        oprot.writeFieldBegin(STORE_DRIVER_FIELD_DESC);
        oprot.writeString(struct.storeDriver);
        oprot.writeFieldEnd();
      }
      if (struct.storedRoutines != null) {
        oprot.writeFieldBegin(STORED_ROUTINES_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, struct.storedRoutines.size()));
          for (java.lang.String _iter3 : struct.storedRoutines)
          {
            oprot.writeString(_iter3);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class LibraryInfoDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public LibraryInfoDTOTupleScheme getScheme() {
      return new LibraryInfoDTOTupleScheme();
    }
  }

  private static class LibraryInfoDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<LibraryInfoDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, LibraryInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetLibraryType()) {
        optionals.set(1);
      }
      if (struct.isSetStoreDriver()) {
        optionals.set(2);
      }
      if (struct.isSetStoredRoutines()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetLibraryType()) {
        oprot.writeI32(struct.libraryType.getValue());
      }
      if (struct.isSetStoreDriver()) {
        oprot.writeString(struct.storeDriver);
      }
      if (struct.isSetStoredRoutines()) {
        {
          oprot.writeI32(struct.storedRoutines.size());
          for (java.lang.String _iter4 : struct.storedRoutines)
          {
            oprot.writeString(_iter4);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, LibraryInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.libraryType = at.enfilo.def.transfer.dto.LibraryType.findByValue(iprot.readI32());
        struct.setLibraryTypeIsSet(true);
      }
      if (incoming.get(2)) {
        struct.storeDriver = iprot.readString();
        struct.setStoreDriverIsSet(true);
      }
      if (incoming.get(3)) {
        {
          org.apache.thrift.protocol.TSet _set5 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.storedRoutines = new java.util.HashSet<java.lang.String>(2*_set5.size);
          java.lang.String _elem6;
          for (int _i7 = 0; _i7 < _set5.size; ++_i7)
          {
            _elem6 = iprot.readString();
            struct.storedRoutines.add(_elem6);
          }
        }
        struct.setStoredRoutinesIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

