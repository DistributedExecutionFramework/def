/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.transfer.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;
import com.fasterxml.jackson.annotation.JsonSetter;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-08-13")
@JsonIgnoreProperties(ignoreUnknown = true)
public class RoutineBinaryDTO implements org.apache.thrift.TBase<RoutineBinaryDTO, RoutineBinaryDTO._Fields>, java.io.Serializable, Cloneable, Comparable<RoutineBinaryDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RoutineBinaryDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField MD5_FIELD_DESC = new org.apache.thrift.protocol.TField("md5", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField SIZE_IN_BYTES_FIELD_DESC = new org.apache.thrift.protocol.TField("sizeInBytes", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField PRIMARY_FIELD_DESC = new org.apache.thrift.protocol.TField("primary", org.apache.thrift.protocol.TType.BOOL, (short)4);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField URL_FIELD_DESC = new org.apache.thrift.protocol.TField("url", org.apache.thrift.protocol.TType.STRING, (short)6);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new RoutineBinaryDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new RoutineBinaryDTOTupleSchemeFactory();

  private java.lang.String id; // required
  private java.lang.String md5; // required
  private long sizeInBytes; // required
  private boolean primary; // required
  private java.nio.ByteBuffer data; // optional
  private java.lang.String url; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    MD5((short)2, "md5"),
    SIZE_IN_BYTES((short)3, "sizeInBytes"),
    PRIMARY((short)4, "primary"),
    DATA((short)5, "data"),
    URL((short)6, "url");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // MD5
          return MD5;
        case 3: // SIZE_IN_BYTES
          return SIZE_IN_BYTES;
        case 4: // PRIMARY
          return PRIMARY;
        case 5: // DATA
          return DATA;
        case 6: // URL
          return URL;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __SIZEINBYTES_ISSET_ID = 0;
  private static final int __PRIMARY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields.DATA,_Fields.URL};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.MD5, new org.apache.thrift.meta_data.FieldMetaData("md5", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SIZE_IN_BYTES, new org.apache.thrift.meta_data.FieldMetaData("sizeInBytes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.PRIMARY, new org.apache.thrift.meta_data.FieldMetaData("primary", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.URL, new org.apache.thrift.meta_data.FieldMetaData("url", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RoutineBinaryDTO.class, metaDataMap);
  }

  public RoutineBinaryDTO() {
  }

  public RoutineBinaryDTO(
    java.lang.String id,
    java.lang.String md5,
    long sizeInBytes,
    boolean primary)
  {
    this();
    this.id = id;
    this.md5 = md5;
    this.sizeInBytes = sizeInBytes;
    setSizeInBytesIsSet(true);
    this.primary = primary;
    setPrimaryIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RoutineBinaryDTO(RoutineBinaryDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    if (other.isSetMd5()) {
      this.md5 = other.md5;
    }
    this.sizeInBytes = other.sizeInBytes;
    this.primary = other.primary;
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
    }
    if (other.isSetUrl()) {
      this.url = other.url;
    }
  }

  public RoutineBinaryDTO deepCopy() {
    return new RoutineBinaryDTO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    this.md5 = null;
    setSizeInBytesIsSet(false);
    this.sizeInBytes = 0;
    setPrimaryIsSet(false);
    this.primary = false;
    this.data = null;
    this.url = null;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public void setId(java.lang.String id) {
    this.id = id;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public java.lang.String getMd5() {
    return this.md5;
  }

  public void setMd5(java.lang.String md5) {
    this.md5 = md5;
  }

  public void unsetMd5() {
    this.md5 = null;
  }

  /** Returns true if field md5 is set (has been assigned a value) and false otherwise */
  public boolean isSetMd5() {
    return this.md5 != null;
  }

  public void setMd5IsSet(boolean value) {
    if (!value) {
      this.md5 = null;
    }
  }

  public long getSizeInBytes() {
    return this.sizeInBytes;
  }

  public void setSizeInBytes(long sizeInBytes) {
    this.sizeInBytes = sizeInBytes;
    setSizeInBytesIsSet(true);
  }

  public void unsetSizeInBytes() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
  }

  /** Returns true if field sizeInBytes is set (has been assigned a value) and false otherwise */
  public boolean isSetSizeInBytes() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID);
  }

  public void setSizeInBytesIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __SIZEINBYTES_ISSET_ID, value);
  }

  public boolean isPrimary() {
    return this.primary;
  }

  public void setPrimary(boolean primary) {
    this.primary = primary;
    setPrimaryIsSet(true);
  }

  public void unsetPrimary() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __PRIMARY_ISSET_ID);
  }

  /** Returns true if field primary is set (has been assigned a value) and false otherwise */
  public boolean isSetPrimary() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __PRIMARY_ISSET_ID);
  }

  public void setPrimaryIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __PRIMARY_ISSET_ID, value);
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public java.nio.ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  @JsonSetter
  public void setData(byte[] data) {
    this.data = data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(data.clone());
  }

  public void setData(java.nio.ByteBuffer data) {
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public java.lang.String getUrl() {
    return this.url;
  }

  public void setUrl(java.lang.String url) {
    this.url = url;
  }

  public void unsetUrl() {
    this.url = null;
  }

  /** Returns true if field url is set (has been assigned a value) and false otherwise */
  public boolean isSetUrl() {
    return this.url != null;
  }

  public void setUrlIsSet(boolean value) {
    if (!value) {
      this.url = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case MD5:
      if (value == null) {
        unsetMd5();
      } else {
        setMd5((java.lang.String)value);
      }
      break;

    case SIZE_IN_BYTES:
      if (value == null) {
        unsetSizeInBytes();
      } else {
        setSizeInBytes((java.lang.Long)value);
      }
      break;

    case PRIMARY:
      if (value == null) {
        unsetPrimary();
      } else {
        setPrimary((java.lang.Boolean)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        if (value instanceof byte[]) {
          setData((byte[])value);
        } else {
          setData((java.nio.ByteBuffer)value);
        }
      }
      break;

    case URL:
      if (value == null) {
        unsetUrl();
      } else {
        setUrl((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case MD5:
      return getMd5();

    case SIZE_IN_BYTES:
      return getSizeInBytes();

    case PRIMARY:
      return isPrimary();

    case DATA:
      return getData();

    case URL:
      return getUrl();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case MD5:
      return isSetMd5();
    case SIZE_IN_BYTES:
      return isSetSizeInBytes();
    case PRIMARY:
      return isSetPrimary();
    case DATA:
      return isSetData();
    case URL:
      return isSetUrl();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof RoutineBinaryDTO)
      return this.equals((RoutineBinaryDTO)that);
    return false;
  }

  public boolean equals(RoutineBinaryDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_md5 = true && this.isSetMd5();
    boolean that_present_md5 = true && that.isSetMd5();
    if (this_present_md5 || that_present_md5) {
      if (!(this_present_md5 && that_present_md5))
        return false;
      if (!this.md5.equals(that.md5))
        return false;
    }

    boolean this_present_sizeInBytes = true;
    boolean that_present_sizeInBytes = true;
    if (this_present_sizeInBytes || that_present_sizeInBytes) {
      if (!(this_present_sizeInBytes && that_present_sizeInBytes))
        return false;
      if (this.sizeInBytes != that.sizeInBytes)
        return false;
    }

    boolean this_present_primary = true;
    boolean that_present_primary = true;
    if (this_present_primary || that_present_primary) {
      if (!(this_present_primary && that_present_primary))
        return false;
      if (this.primary != that.primary)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_url = true && this.isSetUrl();
    boolean that_present_url = true && that.isSetUrl();
    if (this_present_url || that_present_url) {
      if (!(this_present_url && that_present_url))
        return false;
      if (!this.url.equals(that.url))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((isSetMd5()) ? 131071 : 524287);
    if (isSetMd5())
      hashCode = hashCode * 8191 + md5.hashCode();

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(sizeInBytes);

    hashCode = hashCode * 8191 + ((primary) ? 131071 : 524287);

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((isSetUrl()) ? 131071 : 524287);
    if (isSetUrl())
      hashCode = hashCode * 8191 + url.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(RoutineBinaryDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetMd5()).compareTo(other.isSetMd5());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMd5()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.md5, other.md5);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSizeInBytes()).compareTo(other.isSetSizeInBytes());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSizeInBytes()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sizeInBytes, other.sizeInBytes);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrimary()).compareTo(other.isSetPrimary());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrimary()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.primary, other.primary);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetUrl()).compareTo(other.isSetUrl());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetUrl()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.url, other.url);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("RoutineBinaryDTO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("md5:");
    if (this.md5 == null) {
      sb.append("null");
    } else {
      sb.append(this.md5);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sizeInBytes:");
    sb.append(this.sizeInBytes);
    first = false;
    if (!first) sb.append(", ");
    sb.append("primary:");
    sb.append(this.primary);
    first = false;
    if (isSetData()) {
      if (!first) sb.append(", ");
      sb.append("data:");
      if (this.data == null) {
        sb.append("null");
      } else {
        org.apache.thrift.TBaseHelper.toString(this.data, sb);
      }
      first = false;
    }
    if (isSetUrl()) {
      if (!first) sb.append(", ");
      sb.append("url:");
      if (this.url == null) {
        sb.append("null");
      } else {
        sb.append(this.url);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RoutineBinaryDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoutineBinaryDTOStandardScheme getScheme() {
      return new RoutineBinaryDTOStandardScheme();
    }
  }

  private static class RoutineBinaryDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<RoutineBinaryDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RoutineBinaryDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MD5
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.md5 = iprot.readString();
              struct.setMd5IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // SIZE_IN_BYTES
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.sizeInBytes = iprot.readI64();
              struct.setSizeInBytesIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PRIMARY
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.primary = iprot.readBool();
              struct.setPrimaryIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // URL
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.url = iprot.readString();
              struct.setUrlIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RoutineBinaryDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      if (struct.md5 != null) {
        oprot.writeFieldBegin(MD5_FIELD_DESC);
        oprot.writeString(struct.md5);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(SIZE_IN_BYTES_FIELD_DESC);
      oprot.writeI64(struct.sizeInBytes);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(PRIMARY_FIELD_DESC);
      oprot.writeBool(struct.primary);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        if (struct.isSetData()) {
          oprot.writeFieldBegin(DATA_FIELD_DESC);
          oprot.writeBinary(struct.data);
          oprot.writeFieldEnd();
        }
      }
      if (struct.url != null) {
        if (struct.isSetUrl()) {
          oprot.writeFieldBegin(URL_FIELD_DESC);
          oprot.writeString(struct.url);
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RoutineBinaryDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public RoutineBinaryDTOTupleScheme getScheme() {
      return new RoutineBinaryDTOTupleScheme();
    }
  }

  private static class RoutineBinaryDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<RoutineBinaryDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RoutineBinaryDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetMd5()) {
        optionals.set(1);
      }
      if (struct.isSetSizeInBytes()) {
        optionals.set(2);
      }
      if (struct.isSetPrimary()) {
        optionals.set(3);
      }
      if (struct.isSetData()) {
        optionals.set(4);
      }
      if (struct.isSetUrl()) {
        optionals.set(5);
      }
      oprot.writeBitSet(optionals, 6);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetMd5()) {
        oprot.writeString(struct.md5);
      }
      if (struct.isSetSizeInBytes()) {
        oprot.writeI64(struct.sizeInBytes);
      }
      if (struct.isSetPrimary()) {
        oprot.writeBool(struct.primary);
      }
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetUrl()) {
        oprot.writeString(struct.url);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RoutineBinaryDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(6);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.md5 = iprot.readString();
        struct.setMd5IsSet(true);
      }
      if (incoming.get(2)) {
        struct.sizeInBytes = iprot.readI64();
        struct.setSizeInBytesIsSet(true);
      }
      if (incoming.get(3)) {
        struct.primary = iprot.readBool();
        struct.setPrimaryIsSet(true);
      }
      if (incoming.get(4)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(5)) {
        struct.url = iprot.readString();
        struct.setUrlIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

