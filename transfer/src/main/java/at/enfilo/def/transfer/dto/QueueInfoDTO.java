/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.transfer.dto;

import com.fasterxml.jackson.annotation.JsonIgnoreProperties;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
/**
 * QueueInfo Data Transfer Object.
 * Contains all relevant Task-Queue information.
 */
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-07-30")
@JsonIgnoreProperties(ignoreUnknown = true)
public class QueueInfoDTO implements org.apache.thrift.TBase<QueueInfoDTO, QueueInfoDTO._Fields>, java.io.Serializable, Cloneable, Comparable<QueueInfoDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("QueueInfoDTO");

  private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField("id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField RELEASED_FIELD_DESC = new org.apache.thrift.protocol.TField("released", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField NUMBER_OF_TASKS_FIELD_DESC = new org.apache.thrift.protocol.TField("numberOfTasks", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new QueueInfoDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new QueueInfoDTOTupleSchemeFactory();

  public java.lang.String id; // required
  public boolean released; // required
  public int numberOfTasks; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ID((short)1, "id"),
    RELEASED((short)2, "released"),
    NUMBER_OF_TASKS((short)3, "numberOfTasks");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ID
          return ID;
        case 2: // RELEASED
          return RELEASED;
        case 3: // NUMBER_OF_TASKS
          return NUMBER_OF_TASKS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __RELEASED_ISSET_ID = 0;
  private static final int __NUMBEROFTASKS_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ID, new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.RELEASED, new org.apache.thrift.meta_data.FieldMetaData("released", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.NUMBER_OF_TASKS, new org.apache.thrift.meta_data.FieldMetaData("numberOfTasks", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(QueueInfoDTO.class, metaDataMap);
  }

  public QueueInfoDTO() {
  }

  public QueueInfoDTO(
    java.lang.String id,
    boolean released,
    int numberOfTasks)
  {
    this();
    this.id = id;
    this.released = released;
    setReleasedIsSet(true);
    this.numberOfTasks = numberOfTasks;
    setNumberOfTasksIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public QueueInfoDTO(QueueInfoDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetId()) {
      this.id = other.id;
    }
    this.released = other.released;
    this.numberOfTasks = other.numberOfTasks;
  }

  public QueueInfoDTO deepCopy() {
    return new QueueInfoDTO(this);
  }

  @Override
  public void clear() {
    this.id = null;
    setReleasedIsSet(false);
    this.released = false;
    setNumberOfTasksIsSet(false);
    this.numberOfTasks = 0;
  }

  public java.lang.String getId() {
    return this.id;
  }

  public QueueInfoDTO setId(java.lang.String id) {
    this.id = id;
    return this;
  }

  public void unsetId() {
    this.id = null;
  }

  /** Returns true if field id is set (has been assigned a value) and false otherwise */
  public boolean isSetId() {
    return this.id != null;
  }

  public void setIdIsSet(boolean value) {
    if (!value) {
      this.id = null;
    }
  }

  public boolean isReleased() {
    return this.released;
  }

  public QueueInfoDTO setReleased(boolean released) {
    this.released = released;
    setReleasedIsSet(true);
    return this;
  }

  public void unsetReleased() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __RELEASED_ISSET_ID);
  }

  /** Returns true if field released is set (has been assigned a value) and false otherwise */
  public boolean isSetReleased() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __RELEASED_ISSET_ID);
  }

  public void setReleasedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __RELEASED_ISSET_ID, value);
  }

  public int getNumberOfTasks() {
    return this.numberOfTasks;
  }

  public QueueInfoDTO setNumberOfTasks(int numberOfTasks) {
    this.numberOfTasks = numberOfTasks;
    setNumberOfTasksIsSet(true);
    return this;
  }

  public void unsetNumberOfTasks() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NUMBEROFTASKS_ISSET_ID);
  }

  /** Returns true if field numberOfTasks is set (has been assigned a value) and false otherwise */
  public boolean isSetNumberOfTasks() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NUMBEROFTASKS_ISSET_ID);
  }

  public void setNumberOfTasksIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NUMBEROFTASKS_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ID:
      if (value == null) {
        unsetId();
      } else {
        setId((java.lang.String)value);
      }
      break;

    case RELEASED:
      if (value == null) {
        unsetReleased();
      } else {
        setReleased((java.lang.Boolean)value);
      }
      break;

    case NUMBER_OF_TASKS:
      if (value == null) {
        unsetNumberOfTasks();
      } else {
        setNumberOfTasks((java.lang.Integer)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ID:
      return getId();

    case RELEASED:
      return isReleased();

    case NUMBER_OF_TASKS:
      return getNumberOfTasks();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ID:
      return isSetId();
    case RELEASED:
      return isSetReleased();
    case NUMBER_OF_TASKS:
      return isSetNumberOfTasks();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof QueueInfoDTO)
      return this.equals((QueueInfoDTO)that);
    return false;
  }

  public boolean equals(QueueInfoDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_id = true && this.isSetId();
    boolean that_present_id = true && that.isSetId();
    if (this_present_id || that_present_id) {
      if (!(this_present_id && that_present_id))
        return false;
      if (!this.id.equals(that.id))
        return false;
    }

    boolean this_present_released = true;
    boolean that_present_released = true;
    if (this_present_released || that_present_released) {
      if (!(this_present_released && that_present_released))
        return false;
      if (this.released != that.released)
        return false;
    }

    boolean this_present_numberOfTasks = true;
    boolean that_present_numberOfTasks = true;
    if (this_present_numberOfTasks || that_present_numberOfTasks) {
      if (!(this_present_numberOfTasks && that_present_numberOfTasks))
        return false;
      if (this.numberOfTasks != that.numberOfTasks)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetId()) ? 131071 : 524287);
    if (isSetId())
      hashCode = hashCode * 8191 + id.hashCode();

    hashCode = hashCode * 8191 + ((released) ? 131071 : 524287);

    hashCode = hashCode * 8191 + numberOfTasks;

    return hashCode;
  }

  @Override
  public int compareTo(QueueInfoDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReleased()).compareTo(other.isSetReleased());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReleased()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.released, other.released);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetNumberOfTasks()).compareTo(other.isSetNumberOfTasks());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetNumberOfTasks()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.numberOfTasks, other.numberOfTasks);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("QueueInfoDTO(");
    boolean first = true;

    sb.append("id:");
    if (this.id == null) {
      sb.append("null");
    } else {
      sb.append(this.id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("released:");
    sb.append(this.released);
    first = false;
    if (!first) sb.append(", ");
    sb.append("numberOfTasks:");
    sb.append(this.numberOfTasks);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class QueueInfoDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueueInfoDTOStandardScheme getScheme() {
      return new QueueInfoDTOStandardScheme();
    }
  }

  private static class QueueInfoDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<QueueInfoDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, QueueInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.id = iprot.readString();
              struct.setIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // RELEASED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.released = iprot.readBool();
              struct.setReleasedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // NUMBER_OF_TASKS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.numberOfTasks = iprot.readI32();
              struct.setNumberOfTasksIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, QueueInfoDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.id != null) {
        oprot.writeFieldBegin(ID_FIELD_DESC);
        oprot.writeString(struct.id);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(RELEASED_FIELD_DESC);
      oprot.writeBool(struct.released);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(NUMBER_OF_TASKS_FIELD_DESC);
      oprot.writeI32(struct.numberOfTasks);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class QueueInfoDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public QueueInfoDTOTupleScheme getScheme() {
      return new QueueInfoDTOTupleScheme();
    }
  }

  private static class QueueInfoDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<QueueInfoDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, QueueInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetId()) {
        optionals.set(0);
      }
      if (struct.isSetReleased()) {
        optionals.set(1);
      }
      if (struct.isSetNumberOfTasks()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetId()) {
        oprot.writeString(struct.id);
      }
      if (struct.isSetReleased()) {
        oprot.writeBool(struct.released);
      }
      if (struct.isSetNumberOfTasks()) {
        oprot.writeI32(struct.numberOfTasks);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, QueueInfoDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.id = iprot.readString();
        struct.setIdIsSet(true);
      }
      if (incoming.get(1)) {
        struct.released = iprot.readBool();
        struct.setReleasedIsSet(true);
      }
      if (incoming.get(2)) {
        struct.numberOfTasks = iprot.readI32();
        struct.setNumberOfTasksIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

