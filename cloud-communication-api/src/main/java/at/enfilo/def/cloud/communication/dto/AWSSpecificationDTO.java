/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.cloud.communication.dto;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-06")
public class AWSSpecificationDTO implements org.apache.thrift.TBase<AWSSpecificationDTO, AWSSpecificationDTO._Fields>, java.io.Serializable, Cloneable, Comparable<AWSSpecificationDTO> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("AWSSpecificationDTO");

  private static final org.apache.thrift.protocol.TField ACCESS_KEY_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("accessKeyID", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField SECRET_KEY_FIELD_DESC = new org.apache.thrift.protocol.TField("secretKey", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField("region", org.apache.thrift.protocol.TType.STRING, (short)3);
  private static final org.apache.thrift.protocol.TField PUBLIC_SUBNET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("publicSubnetId", org.apache.thrift.protocol.TType.STRING, (short)4);
  private static final org.apache.thrift.protocol.TField PRIVATE_SUBNET_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("privateSubnetId", org.apache.thrift.protocol.TType.STRING, (short)5);
  private static final org.apache.thrift.protocol.TField VPC_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("vpcId", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField KEYPAIR_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("keypairName", org.apache.thrift.protocol.TType.STRING, (short)7);
  private static final org.apache.thrift.protocol.TField VPN_DYNAMIC_IP_NETWORK_ADDRESS_FIELD_DESC = new org.apache.thrift.protocol.TField("vpnDynamicIpNetworkAddress", org.apache.thrift.protocol.TType.STRING, (short)8);
  private static final org.apache.thrift.protocol.TField VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX_FIELD_DESC = new org.apache.thrift.protocol.TField("vpnDynamicIpSubnetMaskSuffix", org.apache.thrift.protocol.TType.I32, (short)9);
  private static final org.apache.thrift.protocol.TField CLUSTER_IMAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterImageId", org.apache.thrift.protocol.TType.STRING, (short)10);
  private static final org.apache.thrift.protocol.TField CLUSTER_INSTANCE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("clusterInstanceSize", org.apache.thrift.protocol.TType.STRING, (short)11);
  private static final org.apache.thrift.protocol.TField WORKER_IMAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("workerImageId", org.apache.thrift.protocol.TType.STRING, (short)12);
  private static final org.apache.thrift.protocol.TField WORKER_INSTANCE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("workerInstanceSize", org.apache.thrift.protocol.TType.STRING, (short)13);
  private static final org.apache.thrift.protocol.TField REDUCER_IMAGE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("reducerImageId", org.apache.thrift.protocol.TType.STRING, (short)14);
  private static final org.apache.thrift.protocol.TField REDUCER_INSTANCE_SIZE_FIELD_DESC = new org.apache.thrift.protocol.TField("reducerInstanceSize", org.apache.thrift.protocol.TType.STRING, (short)15);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AWSSpecificationDTOStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AWSSpecificationDTOTupleSchemeFactory();

  private java.lang.String accessKeyID; // required
  private java.lang.String secretKey; // required
  private java.lang.String region; // required
  private java.lang.String publicSubnetId; // required
  private java.lang.String privateSubnetId; // required
  private java.lang.String vpcId; // required
  private java.lang.String keypairName; // required
  private java.lang.String vpnDynamicIpNetworkAddress; // required
  private int vpnDynamicIpSubnetMaskSuffix; // required
  private java.lang.String clusterImageId; // required
  private java.lang.String clusterInstanceSize; // required
  private java.lang.String workerImageId; // required
  private java.lang.String workerInstanceSize; // required
  private java.lang.String reducerImageId; // required
  private java.lang.String reducerInstanceSize; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ACCESS_KEY_ID((short)1, "accessKeyID"),
    SECRET_KEY((short)2, "secretKey"),
    REGION((short)3, "region"),
    PUBLIC_SUBNET_ID((short)4, "publicSubnetId"),
    PRIVATE_SUBNET_ID((short)5, "privateSubnetId"),
    VPC_ID((short)6, "vpcId"),
    KEYPAIR_NAME((short)7, "keypairName"),
    VPN_DYNAMIC_IP_NETWORK_ADDRESS((short)8, "vpnDynamicIpNetworkAddress"),
    VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX((short)9, "vpnDynamicIpSubnetMaskSuffix"),
    CLUSTER_IMAGE_ID((short)10, "clusterImageId"),
    CLUSTER_INSTANCE_SIZE((short)11, "clusterInstanceSize"),
    WORKER_IMAGE_ID((short)12, "workerImageId"),
    WORKER_INSTANCE_SIZE((short)13, "workerInstanceSize"),
    REDUCER_IMAGE_ID((short)14, "reducerImageId"),
    REDUCER_INSTANCE_SIZE((short)15, "reducerInstanceSize");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ACCESS_KEY_ID
          return ACCESS_KEY_ID;
        case 2: // SECRET_KEY
          return SECRET_KEY;
        case 3: // REGION
          return REGION;
        case 4: // PUBLIC_SUBNET_ID
          return PUBLIC_SUBNET_ID;
        case 5: // PRIVATE_SUBNET_ID
          return PRIVATE_SUBNET_ID;
        case 6: // VPC_ID
          return VPC_ID;
        case 7: // KEYPAIR_NAME
          return KEYPAIR_NAME;
        case 8: // VPN_DYNAMIC_IP_NETWORK_ADDRESS
          return VPN_DYNAMIC_IP_NETWORK_ADDRESS;
        case 9: // VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX
          return VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX;
        case 10: // CLUSTER_IMAGE_ID
          return CLUSTER_IMAGE_ID;
        case 11: // CLUSTER_INSTANCE_SIZE
          return CLUSTER_INSTANCE_SIZE;
        case 12: // WORKER_IMAGE_ID
          return WORKER_IMAGE_ID;
        case 13: // WORKER_INSTANCE_SIZE
          return WORKER_INSTANCE_SIZE;
        case 14: // REDUCER_IMAGE_ID
          return REDUCER_IMAGE_ID;
        case 15: // REDUCER_INSTANCE_SIZE
          return REDUCER_INSTANCE_SIZE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __VPNDYNAMICIPSUBNETMASKSUFFIX_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ACCESS_KEY_ID, new org.apache.thrift.meta_data.FieldMetaData("accessKeyID", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.SECRET_KEY, new org.apache.thrift.meta_data.FieldMetaData("secretKey", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PUBLIC_SUBNET_ID, new org.apache.thrift.meta_data.FieldMetaData("publicSubnetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.PRIVATE_SUBNET_ID, new org.apache.thrift.meta_data.FieldMetaData("privateSubnetId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VPC_ID, new org.apache.thrift.meta_data.FieldMetaData("vpcId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.KEYPAIR_NAME, new org.apache.thrift.meta_data.FieldMetaData("keypairName", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VPN_DYNAMIC_IP_NETWORK_ADDRESS, new org.apache.thrift.meta_data.FieldMetaData("vpnDynamicIpNetworkAddress", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX, new org.apache.thrift.meta_data.FieldMetaData("vpnDynamicIpSubnetMaskSuffix", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.CLUSTER_IMAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("clusterImageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.CLUSTER_INSTANCE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("clusterInstanceSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKER_IMAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("workerImageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.WORKER_INSTANCE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("workerInstanceSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REDUCER_IMAGE_ID, new org.apache.thrift.meta_data.FieldMetaData("reducerImageId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.REDUCER_INSTANCE_SIZE, new org.apache.thrift.meta_data.FieldMetaData("reducerInstanceSize", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AWSSpecificationDTO.class, metaDataMap);
  }

  public AWSSpecificationDTO() {
  }

  public AWSSpecificationDTO(
    java.lang.String accessKeyID,
    java.lang.String secretKey,
    java.lang.String region,
    java.lang.String publicSubnetId,
    java.lang.String privateSubnetId,
    java.lang.String vpcId,
    java.lang.String keypairName,
    java.lang.String vpnDynamicIpNetworkAddress,
    int vpnDynamicIpSubnetMaskSuffix,
    java.lang.String clusterImageId,
    java.lang.String clusterInstanceSize,
    java.lang.String workerImageId,
    java.lang.String workerInstanceSize,
    java.lang.String reducerImageId,
    java.lang.String reducerInstanceSize)
  {
    this();
    this.accessKeyID = accessKeyID;
    this.secretKey = secretKey;
    this.region = region;
    this.publicSubnetId = publicSubnetId;
    this.privateSubnetId = privateSubnetId;
    this.vpcId = vpcId;
    this.keypairName = keypairName;
    this.vpnDynamicIpNetworkAddress = vpnDynamicIpNetworkAddress;
    this.vpnDynamicIpSubnetMaskSuffix = vpnDynamicIpSubnetMaskSuffix;
    setVpnDynamicIpSubnetMaskSuffixIsSet(true);
    this.clusterImageId = clusterImageId;
    this.clusterInstanceSize = clusterInstanceSize;
    this.workerImageId = workerImageId;
    this.workerInstanceSize = workerInstanceSize;
    this.reducerImageId = reducerImageId;
    this.reducerInstanceSize = reducerInstanceSize;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public AWSSpecificationDTO(AWSSpecificationDTO other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetAccessKeyID()) {
      this.accessKeyID = other.accessKeyID;
    }
    if (other.isSetSecretKey()) {
      this.secretKey = other.secretKey;
    }
    if (other.isSetRegion()) {
      this.region = other.region;
    }
    if (other.isSetPublicSubnetId()) {
      this.publicSubnetId = other.publicSubnetId;
    }
    if (other.isSetPrivateSubnetId()) {
      this.privateSubnetId = other.privateSubnetId;
    }
    if (other.isSetVpcId()) {
      this.vpcId = other.vpcId;
    }
    if (other.isSetKeypairName()) {
      this.keypairName = other.keypairName;
    }
    if (other.isSetVpnDynamicIpNetworkAddress()) {
      this.vpnDynamicIpNetworkAddress = other.vpnDynamicIpNetworkAddress;
    }
    this.vpnDynamicIpSubnetMaskSuffix = other.vpnDynamicIpSubnetMaskSuffix;
    if (other.isSetClusterImageId()) {
      this.clusterImageId = other.clusterImageId;
    }
    if (other.isSetClusterInstanceSize()) {
      this.clusterInstanceSize = other.clusterInstanceSize;
    }
    if (other.isSetWorkerImageId()) {
      this.workerImageId = other.workerImageId;
    }
    if (other.isSetWorkerInstanceSize()) {
      this.workerInstanceSize = other.workerInstanceSize;
    }
    if (other.isSetReducerImageId()) {
      this.reducerImageId = other.reducerImageId;
    }
    if (other.isSetReducerInstanceSize()) {
      this.reducerInstanceSize = other.reducerInstanceSize;
    }
  }

  public AWSSpecificationDTO deepCopy() {
    return new AWSSpecificationDTO(this);
  }

  @Override
  public void clear() {
    this.accessKeyID = null;
    this.secretKey = null;
    this.region = null;
    this.publicSubnetId = null;
    this.privateSubnetId = null;
    this.vpcId = null;
    this.keypairName = null;
    this.vpnDynamicIpNetworkAddress = null;
    setVpnDynamicIpSubnetMaskSuffixIsSet(false);
    this.vpnDynamicIpSubnetMaskSuffix = 0;
    this.clusterImageId = null;
    this.clusterInstanceSize = null;
    this.workerImageId = null;
    this.workerInstanceSize = null;
    this.reducerImageId = null;
    this.reducerInstanceSize = null;
  }

  public java.lang.String getAccessKeyID() {
    return this.accessKeyID;
  }

  public void setAccessKeyID(java.lang.String accessKeyID) {
    this.accessKeyID = accessKeyID;
  }

  public void unsetAccessKeyID() {
    this.accessKeyID = null;
  }

  /** Returns true if field accessKeyID is set (has been assigned a value) and false otherwise */
  public boolean isSetAccessKeyID() {
    return this.accessKeyID != null;
  }

  public void setAccessKeyIDIsSet(boolean value) {
    if (!value) {
      this.accessKeyID = null;
    }
  }

  public java.lang.String getSecretKey() {
    return this.secretKey;
  }

  public void setSecretKey(java.lang.String secretKey) {
    this.secretKey = secretKey;
  }

  public void unsetSecretKey() {
    this.secretKey = null;
  }

  /** Returns true if field secretKey is set (has been assigned a value) and false otherwise */
  public boolean isSetSecretKey() {
    return this.secretKey != null;
  }

  public void setSecretKeyIsSet(boolean value) {
    if (!value) {
      this.secretKey = null;
    }
  }

  public java.lang.String getRegion() {
    return this.region;
  }

  public void setRegion(java.lang.String region) {
    this.region = region;
  }

  public void unsetRegion() {
    this.region = null;
  }

  /** Returns true if field region is set (has been assigned a value) and false otherwise */
  public boolean isSetRegion() {
    return this.region != null;
  }

  public void setRegionIsSet(boolean value) {
    if (!value) {
      this.region = null;
    }
  }

  public java.lang.String getPublicSubnetId() {
    return this.publicSubnetId;
  }

  public void setPublicSubnetId(java.lang.String publicSubnetId) {
    this.publicSubnetId = publicSubnetId;
  }

  public void unsetPublicSubnetId() {
    this.publicSubnetId = null;
  }

  /** Returns true if field publicSubnetId is set (has been assigned a value) and false otherwise */
  public boolean isSetPublicSubnetId() {
    return this.publicSubnetId != null;
  }

  public void setPublicSubnetIdIsSet(boolean value) {
    if (!value) {
      this.publicSubnetId = null;
    }
  }

  public java.lang.String getPrivateSubnetId() {
    return this.privateSubnetId;
  }

  public void setPrivateSubnetId(java.lang.String privateSubnetId) {
    this.privateSubnetId = privateSubnetId;
  }

  public void unsetPrivateSubnetId() {
    this.privateSubnetId = null;
  }

  /** Returns true if field privateSubnetId is set (has been assigned a value) and false otherwise */
  public boolean isSetPrivateSubnetId() {
    return this.privateSubnetId != null;
  }

  public void setPrivateSubnetIdIsSet(boolean value) {
    if (!value) {
      this.privateSubnetId = null;
    }
  }

  public java.lang.String getVpcId() {
    return this.vpcId;
  }

  public void setVpcId(java.lang.String vpcId) {
    this.vpcId = vpcId;
  }

  public void unsetVpcId() {
    this.vpcId = null;
  }

  /** Returns true if field vpcId is set (has been assigned a value) and false otherwise */
  public boolean isSetVpcId() {
    return this.vpcId != null;
  }

  public void setVpcIdIsSet(boolean value) {
    if (!value) {
      this.vpcId = null;
    }
  }

  public java.lang.String getKeypairName() {
    return this.keypairName;
  }

  public void setKeypairName(java.lang.String keypairName) {
    this.keypairName = keypairName;
  }

  public void unsetKeypairName() {
    this.keypairName = null;
  }

  /** Returns true if field keypairName is set (has been assigned a value) and false otherwise */
  public boolean isSetKeypairName() {
    return this.keypairName != null;
  }

  public void setKeypairNameIsSet(boolean value) {
    if (!value) {
      this.keypairName = null;
    }
  }

  public java.lang.String getVpnDynamicIpNetworkAddress() {
    return this.vpnDynamicIpNetworkAddress;
  }

  public void setVpnDynamicIpNetworkAddress(java.lang.String vpnDynamicIpNetworkAddress) {
    this.vpnDynamicIpNetworkAddress = vpnDynamicIpNetworkAddress;
  }

  public void unsetVpnDynamicIpNetworkAddress() {
    this.vpnDynamicIpNetworkAddress = null;
  }

  /** Returns true if field vpnDynamicIpNetworkAddress is set (has been assigned a value) and false otherwise */
  public boolean isSetVpnDynamicIpNetworkAddress() {
    return this.vpnDynamicIpNetworkAddress != null;
  }

  public void setVpnDynamicIpNetworkAddressIsSet(boolean value) {
    if (!value) {
      this.vpnDynamicIpNetworkAddress = null;
    }
  }

  public int getVpnDynamicIpSubnetMaskSuffix() {
    return this.vpnDynamicIpSubnetMaskSuffix;
  }

  public void setVpnDynamicIpSubnetMaskSuffix(int vpnDynamicIpSubnetMaskSuffix) {
    this.vpnDynamicIpSubnetMaskSuffix = vpnDynamicIpSubnetMaskSuffix;
    setVpnDynamicIpSubnetMaskSuffixIsSet(true);
  }

  public void unsetVpnDynamicIpSubnetMaskSuffix() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __VPNDYNAMICIPSUBNETMASKSUFFIX_ISSET_ID);
  }

  /** Returns true if field vpnDynamicIpSubnetMaskSuffix is set (has been assigned a value) and false otherwise */
  public boolean isSetVpnDynamicIpSubnetMaskSuffix() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __VPNDYNAMICIPSUBNETMASKSUFFIX_ISSET_ID);
  }

  public void setVpnDynamicIpSubnetMaskSuffixIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __VPNDYNAMICIPSUBNETMASKSUFFIX_ISSET_ID, value);
  }

  public java.lang.String getClusterImageId() {
    return this.clusterImageId;
  }

  public void setClusterImageId(java.lang.String clusterImageId) {
    this.clusterImageId = clusterImageId;
  }

  public void unsetClusterImageId() {
    this.clusterImageId = null;
  }

  /** Returns true if field clusterImageId is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterImageId() {
    return this.clusterImageId != null;
  }

  public void setClusterImageIdIsSet(boolean value) {
    if (!value) {
      this.clusterImageId = null;
    }
  }

  public java.lang.String getClusterInstanceSize() {
    return this.clusterInstanceSize;
  }

  public void setClusterInstanceSize(java.lang.String clusterInstanceSize) {
    this.clusterInstanceSize = clusterInstanceSize;
  }

  public void unsetClusterInstanceSize() {
    this.clusterInstanceSize = null;
  }

  /** Returns true if field clusterInstanceSize is set (has been assigned a value) and false otherwise */
  public boolean isSetClusterInstanceSize() {
    return this.clusterInstanceSize != null;
  }

  public void setClusterInstanceSizeIsSet(boolean value) {
    if (!value) {
      this.clusterInstanceSize = null;
    }
  }

  public java.lang.String getWorkerImageId() {
    return this.workerImageId;
  }

  public void setWorkerImageId(java.lang.String workerImageId) {
    this.workerImageId = workerImageId;
  }

  public void unsetWorkerImageId() {
    this.workerImageId = null;
  }

  /** Returns true if field workerImageId is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerImageId() {
    return this.workerImageId != null;
  }

  public void setWorkerImageIdIsSet(boolean value) {
    if (!value) {
      this.workerImageId = null;
    }
  }

  public java.lang.String getWorkerInstanceSize() {
    return this.workerInstanceSize;
  }

  public void setWorkerInstanceSize(java.lang.String workerInstanceSize) {
    this.workerInstanceSize = workerInstanceSize;
  }

  public void unsetWorkerInstanceSize() {
    this.workerInstanceSize = null;
  }

  /** Returns true if field workerInstanceSize is set (has been assigned a value) and false otherwise */
  public boolean isSetWorkerInstanceSize() {
    return this.workerInstanceSize != null;
  }

  public void setWorkerInstanceSizeIsSet(boolean value) {
    if (!value) {
      this.workerInstanceSize = null;
    }
  }

  public java.lang.String getReducerImageId() {
    return this.reducerImageId;
  }

  public void setReducerImageId(java.lang.String reducerImageId) {
    this.reducerImageId = reducerImageId;
  }

  public void unsetReducerImageId() {
    this.reducerImageId = null;
  }

  /** Returns true if field reducerImageId is set (has been assigned a value) and false otherwise */
  public boolean isSetReducerImageId() {
    return this.reducerImageId != null;
  }

  public void setReducerImageIdIsSet(boolean value) {
    if (!value) {
      this.reducerImageId = null;
    }
  }

  public java.lang.String getReducerInstanceSize() {
    return this.reducerInstanceSize;
  }

  public void setReducerInstanceSize(java.lang.String reducerInstanceSize) {
    this.reducerInstanceSize = reducerInstanceSize;
  }

  public void unsetReducerInstanceSize() {
    this.reducerInstanceSize = null;
  }

  /** Returns true if field reducerInstanceSize is set (has been assigned a value) and false otherwise */
  public boolean isSetReducerInstanceSize() {
    return this.reducerInstanceSize != null;
  }

  public void setReducerInstanceSizeIsSet(boolean value) {
    if (!value) {
      this.reducerInstanceSize = null;
    }
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case ACCESS_KEY_ID:
      if (value == null) {
        unsetAccessKeyID();
      } else {
        setAccessKeyID((java.lang.String)value);
      }
      break;

    case SECRET_KEY:
      if (value == null) {
        unsetSecretKey();
      } else {
        setSecretKey((java.lang.String)value);
      }
      break;

    case REGION:
      if (value == null) {
        unsetRegion();
      } else {
        setRegion((java.lang.String)value);
      }
      break;

    case PUBLIC_SUBNET_ID:
      if (value == null) {
        unsetPublicSubnetId();
      } else {
        setPublicSubnetId((java.lang.String)value);
      }
      break;

    case PRIVATE_SUBNET_ID:
      if (value == null) {
        unsetPrivateSubnetId();
      } else {
        setPrivateSubnetId((java.lang.String)value);
      }
      break;

    case VPC_ID:
      if (value == null) {
        unsetVpcId();
      } else {
        setVpcId((java.lang.String)value);
      }
      break;

    case KEYPAIR_NAME:
      if (value == null) {
        unsetKeypairName();
      } else {
        setKeypairName((java.lang.String)value);
      }
      break;

    case VPN_DYNAMIC_IP_NETWORK_ADDRESS:
      if (value == null) {
        unsetVpnDynamicIpNetworkAddress();
      } else {
        setVpnDynamicIpNetworkAddress((java.lang.String)value);
      }
      break;

    case VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX:
      if (value == null) {
        unsetVpnDynamicIpSubnetMaskSuffix();
      } else {
        setVpnDynamicIpSubnetMaskSuffix((java.lang.Integer)value);
      }
      break;

    case CLUSTER_IMAGE_ID:
      if (value == null) {
        unsetClusterImageId();
      } else {
        setClusterImageId((java.lang.String)value);
      }
      break;

    case CLUSTER_INSTANCE_SIZE:
      if (value == null) {
        unsetClusterInstanceSize();
      } else {
        setClusterInstanceSize((java.lang.String)value);
      }
      break;

    case WORKER_IMAGE_ID:
      if (value == null) {
        unsetWorkerImageId();
      } else {
        setWorkerImageId((java.lang.String)value);
      }
      break;

    case WORKER_INSTANCE_SIZE:
      if (value == null) {
        unsetWorkerInstanceSize();
      } else {
        setWorkerInstanceSize((java.lang.String)value);
      }
      break;

    case REDUCER_IMAGE_ID:
      if (value == null) {
        unsetReducerImageId();
      } else {
        setReducerImageId((java.lang.String)value);
      }
      break;

    case REDUCER_INSTANCE_SIZE:
      if (value == null) {
        unsetReducerInstanceSize();
      } else {
        setReducerInstanceSize((java.lang.String)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case ACCESS_KEY_ID:
      return getAccessKeyID();

    case SECRET_KEY:
      return getSecretKey();

    case REGION:
      return getRegion();

    case PUBLIC_SUBNET_ID:
      return getPublicSubnetId();

    case PRIVATE_SUBNET_ID:
      return getPrivateSubnetId();

    case VPC_ID:
      return getVpcId();

    case KEYPAIR_NAME:
      return getKeypairName();

    case VPN_DYNAMIC_IP_NETWORK_ADDRESS:
      return getVpnDynamicIpNetworkAddress();

    case VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX:
      return getVpnDynamicIpSubnetMaskSuffix();

    case CLUSTER_IMAGE_ID:
      return getClusterImageId();

    case CLUSTER_INSTANCE_SIZE:
      return getClusterInstanceSize();

    case WORKER_IMAGE_ID:
      return getWorkerImageId();

    case WORKER_INSTANCE_SIZE:
      return getWorkerInstanceSize();

    case REDUCER_IMAGE_ID:
      return getReducerImageId();

    case REDUCER_INSTANCE_SIZE:
      return getReducerInstanceSize();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case ACCESS_KEY_ID:
      return isSetAccessKeyID();
    case SECRET_KEY:
      return isSetSecretKey();
    case REGION:
      return isSetRegion();
    case PUBLIC_SUBNET_ID:
      return isSetPublicSubnetId();
    case PRIVATE_SUBNET_ID:
      return isSetPrivateSubnetId();
    case VPC_ID:
      return isSetVpcId();
    case KEYPAIR_NAME:
      return isSetKeypairName();
    case VPN_DYNAMIC_IP_NETWORK_ADDRESS:
      return isSetVpnDynamicIpNetworkAddress();
    case VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX:
      return isSetVpnDynamicIpSubnetMaskSuffix();
    case CLUSTER_IMAGE_ID:
      return isSetClusterImageId();
    case CLUSTER_INSTANCE_SIZE:
      return isSetClusterInstanceSize();
    case WORKER_IMAGE_ID:
      return isSetWorkerImageId();
    case WORKER_INSTANCE_SIZE:
      return isSetWorkerInstanceSize();
    case REDUCER_IMAGE_ID:
      return isSetReducerImageId();
    case REDUCER_INSTANCE_SIZE:
      return isSetReducerInstanceSize();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof AWSSpecificationDTO)
      return this.equals((AWSSpecificationDTO)that);
    return false;
  }

  public boolean equals(AWSSpecificationDTO that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_accessKeyID = true && this.isSetAccessKeyID();
    boolean that_present_accessKeyID = true && that.isSetAccessKeyID();
    if (this_present_accessKeyID || that_present_accessKeyID) {
      if (!(this_present_accessKeyID && that_present_accessKeyID))
        return false;
      if (!this.accessKeyID.equals(that.accessKeyID))
        return false;
    }

    boolean this_present_secretKey = true && this.isSetSecretKey();
    boolean that_present_secretKey = true && that.isSetSecretKey();
    if (this_present_secretKey || that_present_secretKey) {
      if (!(this_present_secretKey && that_present_secretKey))
        return false;
      if (!this.secretKey.equals(that.secretKey))
        return false;
    }

    boolean this_present_region = true && this.isSetRegion();
    boolean that_present_region = true && that.isSetRegion();
    if (this_present_region || that_present_region) {
      if (!(this_present_region && that_present_region))
        return false;
      if (!this.region.equals(that.region))
        return false;
    }

    boolean this_present_publicSubnetId = true && this.isSetPublicSubnetId();
    boolean that_present_publicSubnetId = true && that.isSetPublicSubnetId();
    if (this_present_publicSubnetId || that_present_publicSubnetId) {
      if (!(this_present_publicSubnetId && that_present_publicSubnetId))
        return false;
      if (!this.publicSubnetId.equals(that.publicSubnetId))
        return false;
    }

    boolean this_present_privateSubnetId = true && this.isSetPrivateSubnetId();
    boolean that_present_privateSubnetId = true && that.isSetPrivateSubnetId();
    if (this_present_privateSubnetId || that_present_privateSubnetId) {
      if (!(this_present_privateSubnetId && that_present_privateSubnetId))
        return false;
      if (!this.privateSubnetId.equals(that.privateSubnetId))
        return false;
    }

    boolean this_present_vpcId = true && this.isSetVpcId();
    boolean that_present_vpcId = true && that.isSetVpcId();
    if (this_present_vpcId || that_present_vpcId) {
      if (!(this_present_vpcId && that_present_vpcId))
        return false;
      if (!this.vpcId.equals(that.vpcId))
        return false;
    }

    boolean this_present_keypairName = true && this.isSetKeypairName();
    boolean that_present_keypairName = true && that.isSetKeypairName();
    if (this_present_keypairName || that_present_keypairName) {
      if (!(this_present_keypairName && that_present_keypairName))
        return false;
      if (!this.keypairName.equals(that.keypairName))
        return false;
    }

    boolean this_present_vpnDynamicIpNetworkAddress = true && this.isSetVpnDynamicIpNetworkAddress();
    boolean that_present_vpnDynamicIpNetworkAddress = true && that.isSetVpnDynamicIpNetworkAddress();
    if (this_present_vpnDynamicIpNetworkAddress || that_present_vpnDynamicIpNetworkAddress) {
      if (!(this_present_vpnDynamicIpNetworkAddress && that_present_vpnDynamicIpNetworkAddress))
        return false;
      if (!this.vpnDynamicIpNetworkAddress.equals(that.vpnDynamicIpNetworkAddress))
        return false;
    }

    boolean this_present_vpnDynamicIpSubnetMaskSuffix = true;
    boolean that_present_vpnDynamicIpSubnetMaskSuffix = true;
    if (this_present_vpnDynamicIpSubnetMaskSuffix || that_present_vpnDynamicIpSubnetMaskSuffix) {
      if (!(this_present_vpnDynamicIpSubnetMaskSuffix && that_present_vpnDynamicIpSubnetMaskSuffix))
        return false;
      if (this.vpnDynamicIpSubnetMaskSuffix != that.vpnDynamicIpSubnetMaskSuffix)
        return false;
    }

    boolean this_present_clusterImageId = true && this.isSetClusterImageId();
    boolean that_present_clusterImageId = true && that.isSetClusterImageId();
    if (this_present_clusterImageId || that_present_clusterImageId) {
      if (!(this_present_clusterImageId && that_present_clusterImageId))
        return false;
      if (!this.clusterImageId.equals(that.clusterImageId))
        return false;
    }

    boolean this_present_clusterInstanceSize = true && this.isSetClusterInstanceSize();
    boolean that_present_clusterInstanceSize = true && that.isSetClusterInstanceSize();
    if (this_present_clusterInstanceSize || that_present_clusterInstanceSize) {
      if (!(this_present_clusterInstanceSize && that_present_clusterInstanceSize))
        return false;
      if (!this.clusterInstanceSize.equals(that.clusterInstanceSize))
        return false;
    }

    boolean this_present_workerImageId = true && this.isSetWorkerImageId();
    boolean that_present_workerImageId = true && that.isSetWorkerImageId();
    if (this_present_workerImageId || that_present_workerImageId) {
      if (!(this_present_workerImageId && that_present_workerImageId))
        return false;
      if (!this.workerImageId.equals(that.workerImageId))
        return false;
    }

    boolean this_present_workerInstanceSize = true && this.isSetWorkerInstanceSize();
    boolean that_present_workerInstanceSize = true && that.isSetWorkerInstanceSize();
    if (this_present_workerInstanceSize || that_present_workerInstanceSize) {
      if (!(this_present_workerInstanceSize && that_present_workerInstanceSize))
        return false;
      if (!this.workerInstanceSize.equals(that.workerInstanceSize))
        return false;
    }

    boolean this_present_reducerImageId = true && this.isSetReducerImageId();
    boolean that_present_reducerImageId = true && that.isSetReducerImageId();
    if (this_present_reducerImageId || that_present_reducerImageId) {
      if (!(this_present_reducerImageId && that_present_reducerImageId))
        return false;
      if (!this.reducerImageId.equals(that.reducerImageId))
        return false;
    }

    boolean this_present_reducerInstanceSize = true && this.isSetReducerInstanceSize();
    boolean that_present_reducerInstanceSize = true && that.isSetReducerInstanceSize();
    if (this_present_reducerInstanceSize || that_present_reducerInstanceSize) {
      if (!(this_present_reducerInstanceSize && that_present_reducerInstanceSize))
        return false;
      if (!this.reducerInstanceSize.equals(that.reducerInstanceSize))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSetAccessKeyID()) ? 131071 : 524287);
    if (isSetAccessKeyID())
      hashCode = hashCode * 8191 + accessKeyID.hashCode();

    hashCode = hashCode * 8191 + ((isSetSecretKey()) ? 131071 : 524287);
    if (isSetSecretKey())
      hashCode = hashCode * 8191 + secretKey.hashCode();

    hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
    if (isSetRegion())
      hashCode = hashCode * 8191 + region.hashCode();

    hashCode = hashCode * 8191 + ((isSetPublicSubnetId()) ? 131071 : 524287);
    if (isSetPublicSubnetId())
      hashCode = hashCode * 8191 + publicSubnetId.hashCode();

    hashCode = hashCode * 8191 + ((isSetPrivateSubnetId()) ? 131071 : 524287);
    if (isSetPrivateSubnetId())
      hashCode = hashCode * 8191 + privateSubnetId.hashCode();

    hashCode = hashCode * 8191 + ((isSetVpcId()) ? 131071 : 524287);
    if (isSetVpcId())
      hashCode = hashCode * 8191 + vpcId.hashCode();

    hashCode = hashCode * 8191 + ((isSetKeypairName()) ? 131071 : 524287);
    if (isSetKeypairName())
      hashCode = hashCode * 8191 + keypairName.hashCode();

    hashCode = hashCode * 8191 + ((isSetVpnDynamicIpNetworkAddress()) ? 131071 : 524287);
    if (isSetVpnDynamicIpNetworkAddress())
      hashCode = hashCode * 8191 + vpnDynamicIpNetworkAddress.hashCode();

    hashCode = hashCode * 8191 + vpnDynamicIpSubnetMaskSuffix;

    hashCode = hashCode * 8191 + ((isSetClusterImageId()) ? 131071 : 524287);
    if (isSetClusterImageId())
      hashCode = hashCode * 8191 + clusterImageId.hashCode();

    hashCode = hashCode * 8191 + ((isSetClusterInstanceSize()) ? 131071 : 524287);
    if (isSetClusterInstanceSize())
      hashCode = hashCode * 8191 + clusterInstanceSize.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkerImageId()) ? 131071 : 524287);
    if (isSetWorkerImageId())
      hashCode = hashCode * 8191 + workerImageId.hashCode();

    hashCode = hashCode * 8191 + ((isSetWorkerInstanceSize()) ? 131071 : 524287);
    if (isSetWorkerInstanceSize())
      hashCode = hashCode * 8191 + workerInstanceSize.hashCode();

    hashCode = hashCode * 8191 + ((isSetReducerImageId()) ? 131071 : 524287);
    if (isSetReducerImageId())
      hashCode = hashCode * 8191 + reducerImageId.hashCode();

    hashCode = hashCode * 8191 + ((isSetReducerInstanceSize()) ? 131071 : 524287);
    if (isSetReducerInstanceSize())
      hashCode = hashCode * 8191 + reducerInstanceSize.hashCode();

    return hashCode;
  }

  @Override
  public int compareTo(AWSSpecificationDTO other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetAccessKeyID()).compareTo(other.isSetAccessKeyID());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetAccessKeyID()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.accessKeyID, other.accessKeyID);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetSecretKey()).compareTo(other.isSetSecretKey());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSecretKey()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.secretKey, other.secretKey);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRegion()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPublicSubnetId()).compareTo(other.isSetPublicSubnetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPublicSubnetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.publicSubnetId, other.publicSubnetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetPrivateSubnetId()).compareTo(other.isSetPrivateSubnetId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetPrivateSubnetId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.privateSubnetId, other.privateSubnetId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVpcId()).compareTo(other.isSetVpcId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpcId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpcId, other.vpcId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetKeypairName()).compareTo(other.isSetKeypairName());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetKeypairName()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.keypairName, other.keypairName);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVpnDynamicIpNetworkAddress()).compareTo(other.isSetVpnDynamicIpNetworkAddress());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpnDynamicIpNetworkAddress()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpnDynamicIpNetworkAddress, other.vpnDynamicIpNetworkAddress);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetVpnDynamicIpSubnetMaskSuffix()).compareTo(other.isSetVpnDynamicIpSubnetMaskSuffix());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetVpnDynamicIpSubnetMaskSuffix()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.vpnDynamicIpSubnetMaskSuffix, other.vpnDynamicIpSubnetMaskSuffix);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClusterImageId()).compareTo(other.isSetClusterImageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterImageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterImageId, other.clusterImageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetClusterInstanceSize()).compareTo(other.isSetClusterInstanceSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetClusterInstanceSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.clusterInstanceSize, other.clusterInstanceSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWorkerImageId()).compareTo(other.isSetWorkerImageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerImageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerImageId, other.workerImageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetWorkerInstanceSize()).compareTo(other.isSetWorkerInstanceSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetWorkerInstanceSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.workerInstanceSize, other.workerInstanceSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReducerImageId()).compareTo(other.isSetReducerImageId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReducerImageId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducerImageId, other.reducerImageId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetReducerInstanceSize()).compareTo(other.isSetReducerInstanceSize());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetReducerInstanceSize()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.reducerInstanceSize, other.reducerInstanceSize);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("AWSSpecificationDTO(");
    boolean first = true;

    sb.append("accessKeyID:");
    if (this.accessKeyID == null) {
      sb.append("null");
    } else {
      sb.append(this.accessKeyID);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("secretKey:");
    if (this.secretKey == null) {
      sb.append("null");
    } else {
      sb.append(this.secretKey);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("region:");
    if (this.region == null) {
      sb.append("null");
    } else {
      sb.append(this.region);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("publicSubnetId:");
    if (this.publicSubnetId == null) {
      sb.append("null");
    } else {
      sb.append(this.publicSubnetId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("privateSubnetId:");
    if (this.privateSubnetId == null) {
      sb.append("null");
    } else {
      sb.append(this.privateSubnetId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpcId:");
    if (this.vpcId == null) {
      sb.append("null");
    } else {
      sb.append(this.vpcId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("keypairName:");
    if (this.keypairName == null) {
      sb.append("null");
    } else {
      sb.append(this.keypairName);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpnDynamicIpNetworkAddress:");
    if (this.vpnDynamicIpNetworkAddress == null) {
      sb.append("null");
    } else {
      sb.append(this.vpnDynamicIpNetworkAddress);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("vpnDynamicIpSubnetMaskSuffix:");
    sb.append(this.vpnDynamicIpSubnetMaskSuffix);
    first = false;
    if (!first) sb.append(", ");
    sb.append("clusterImageId:");
    if (this.clusterImageId == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterImageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("clusterInstanceSize:");
    if (this.clusterInstanceSize == null) {
      sb.append("null");
    } else {
      sb.append(this.clusterInstanceSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workerImageId:");
    if (this.workerImageId == null) {
      sb.append("null");
    } else {
      sb.append(this.workerImageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("workerInstanceSize:");
    if (this.workerInstanceSize == null) {
      sb.append("null");
    } else {
      sb.append(this.workerInstanceSize);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reducerImageId:");
    if (this.reducerImageId == null) {
      sb.append("null");
    } else {
      sb.append(this.reducerImageId);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("reducerInstanceSize:");
    if (this.reducerInstanceSize == null) {
      sb.append("null");
    } else {
      sb.append(this.reducerInstanceSize);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class AWSSpecificationDTOStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AWSSpecificationDTOStandardScheme getScheme() {
      return new AWSSpecificationDTOStandardScheme();
    }
  }

  private static class AWSSpecificationDTOStandardScheme extends org.apache.thrift.scheme.StandardScheme<AWSSpecificationDTO> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, AWSSpecificationDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ACCESS_KEY_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.accessKeyID = iprot.readString();
              struct.setAccessKeyIDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SECRET_KEY
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.secretKey = iprot.readString();
              struct.setSecretKeyIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // REGION
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.region = iprot.readString();
              struct.setRegionIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // PUBLIC_SUBNET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.publicSubnetId = iprot.readString();
              struct.setPublicSubnetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // PRIVATE_SUBNET_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.privateSubnetId = iprot.readString();
              struct.setPrivateSubnetIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // VPC_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vpcId = iprot.readString();
              struct.setVpcIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // KEYPAIR_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.keypairName = iprot.readString();
              struct.setKeypairNameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // VPN_DYNAMIC_IP_NETWORK_ADDRESS
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.vpnDynamicIpNetworkAddress = iprot.readString();
              struct.setVpnDynamicIpNetworkAddressIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.vpnDynamicIpSubnetMaskSuffix = iprot.readI32();
              struct.setVpnDynamicIpSubnetMaskSuffixIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // CLUSTER_IMAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterImageId = iprot.readString();
              struct.setClusterImageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // CLUSTER_INSTANCE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.clusterInstanceSize = iprot.readString();
              struct.setClusterInstanceSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 12: // WORKER_IMAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workerImageId = iprot.readString();
              struct.setWorkerImageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 13: // WORKER_INSTANCE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.workerInstanceSize = iprot.readString();
              struct.setWorkerInstanceSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 14: // REDUCER_IMAGE_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reducerImageId = iprot.readString();
              struct.setReducerImageIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 15: // REDUCER_INSTANCE_SIZE
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.reducerInstanceSize = iprot.readString();
              struct.setReducerInstanceSizeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, AWSSpecificationDTO struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.accessKeyID != null) {
        oprot.writeFieldBegin(ACCESS_KEY_ID_FIELD_DESC);
        oprot.writeString(struct.accessKeyID);
        oprot.writeFieldEnd();
      }
      if (struct.secretKey != null) {
        oprot.writeFieldBegin(SECRET_KEY_FIELD_DESC);
        oprot.writeString(struct.secretKey);
        oprot.writeFieldEnd();
      }
      if (struct.region != null) {
        oprot.writeFieldBegin(REGION_FIELD_DESC);
        oprot.writeString(struct.region);
        oprot.writeFieldEnd();
      }
      if (struct.publicSubnetId != null) {
        oprot.writeFieldBegin(PUBLIC_SUBNET_ID_FIELD_DESC);
        oprot.writeString(struct.publicSubnetId);
        oprot.writeFieldEnd();
      }
      if (struct.privateSubnetId != null) {
        oprot.writeFieldBegin(PRIVATE_SUBNET_ID_FIELD_DESC);
        oprot.writeString(struct.privateSubnetId);
        oprot.writeFieldEnd();
      }
      if (struct.vpcId != null) {
        oprot.writeFieldBegin(VPC_ID_FIELD_DESC);
        oprot.writeString(struct.vpcId);
        oprot.writeFieldEnd();
      }
      if (struct.keypairName != null) {
        oprot.writeFieldBegin(KEYPAIR_NAME_FIELD_DESC);
        oprot.writeString(struct.keypairName);
        oprot.writeFieldEnd();
      }
      if (struct.vpnDynamicIpNetworkAddress != null) {
        oprot.writeFieldBegin(VPN_DYNAMIC_IP_NETWORK_ADDRESS_FIELD_DESC);
        oprot.writeString(struct.vpnDynamicIpNetworkAddress);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(VPN_DYNAMIC_IP_SUBNET_MASK_SUFFIX_FIELD_DESC);
      oprot.writeI32(struct.vpnDynamicIpSubnetMaskSuffix);
      oprot.writeFieldEnd();
      if (struct.clusterImageId != null) {
        oprot.writeFieldBegin(CLUSTER_IMAGE_ID_FIELD_DESC);
        oprot.writeString(struct.clusterImageId);
        oprot.writeFieldEnd();
      }
      if (struct.clusterInstanceSize != null) {
        oprot.writeFieldBegin(CLUSTER_INSTANCE_SIZE_FIELD_DESC);
        oprot.writeString(struct.clusterInstanceSize);
        oprot.writeFieldEnd();
      }
      if (struct.workerImageId != null) {
        oprot.writeFieldBegin(WORKER_IMAGE_ID_FIELD_DESC);
        oprot.writeString(struct.workerImageId);
        oprot.writeFieldEnd();
      }
      if (struct.workerInstanceSize != null) {
        oprot.writeFieldBegin(WORKER_INSTANCE_SIZE_FIELD_DESC);
        oprot.writeString(struct.workerInstanceSize);
        oprot.writeFieldEnd();
      }
      if (struct.reducerImageId != null) {
        oprot.writeFieldBegin(REDUCER_IMAGE_ID_FIELD_DESC);
        oprot.writeString(struct.reducerImageId);
        oprot.writeFieldEnd();
      }
      if (struct.reducerInstanceSize != null) {
        oprot.writeFieldBegin(REDUCER_INSTANCE_SIZE_FIELD_DESC);
        oprot.writeString(struct.reducerInstanceSize);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class AWSSpecificationDTOTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public AWSSpecificationDTOTupleScheme getScheme() {
      return new AWSSpecificationDTOTupleScheme();
    }
  }

  private static class AWSSpecificationDTOTupleScheme extends org.apache.thrift.scheme.TupleScheme<AWSSpecificationDTO> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, AWSSpecificationDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetAccessKeyID()) {
        optionals.set(0);
      }
      if (struct.isSetSecretKey()) {
        optionals.set(1);
      }
      if (struct.isSetRegion()) {
        optionals.set(2);
      }
      if (struct.isSetPublicSubnetId()) {
        optionals.set(3);
      }
      if (struct.isSetPrivateSubnetId()) {
        optionals.set(4);
      }
      if (struct.isSetVpcId()) {
        optionals.set(5);
      }
      if (struct.isSetKeypairName()) {
        optionals.set(6);
      }
      if (struct.isSetVpnDynamicIpNetworkAddress()) {
        optionals.set(7);
      }
      if (struct.isSetVpnDynamicIpSubnetMaskSuffix()) {
        optionals.set(8);
      }
      if (struct.isSetClusterImageId()) {
        optionals.set(9);
      }
      if (struct.isSetClusterInstanceSize()) {
        optionals.set(10);
      }
      if (struct.isSetWorkerImageId()) {
        optionals.set(11);
      }
      if (struct.isSetWorkerInstanceSize()) {
        optionals.set(12);
      }
      if (struct.isSetReducerImageId()) {
        optionals.set(13);
      }
      if (struct.isSetReducerInstanceSize()) {
        optionals.set(14);
      }
      oprot.writeBitSet(optionals, 15);
      if (struct.isSetAccessKeyID()) {
        oprot.writeString(struct.accessKeyID);
      }
      if (struct.isSetSecretKey()) {
        oprot.writeString(struct.secretKey);
      }
      if (struct.isSetRegion()) {
        oprot.writeString(struct.region);
      }
      if (struct.isSetPublicSubnetId()) {
        oprot.writeString(struct.publicSubnetId);
      }
      if (struct.isSetPrivateSubnetId()) {
        oprot.writeString(struct.privateSubnetId);
      }
      if (struct.isSetVpcId()) {
        oprot.writeString(struct.vpcId);
      }
      if (struct.isSetKeypairName()) {
        oprot.writeString(struct.keypairName);
      }
      if (struct.isSetVpnDynamicIpNetworkAddress()) {
        oprot.writeString(struct.vpnDynamicIpNetworkAddress);
      }
      if (struct.isSetVpnDynamicIpSubnetMaskSuffix()) {
        oprot.writeI32(struct.vpnDynamicIpSubnetMaskSuffix);
      }
      if (struct.isSetClusterImageId()) {
        oprot.writeString(struct.clusterImageId);
      }
      if (struct.isSetClusterInstanceSize()) {
        oprot.writeString(struct.clusterInstanceSize);
      }
      if (struct.isSetWorkerImageId()) {
        oprot.writeString(struct.workerImageId);
      }
      if (struct.isSetWorkerInstanceSize()) {
        oprot.writeString(struct.workerInstanceSize);
      }
      if (struct.isSetReducerImageId()) {
        oprot.writeString(struct.reducerImageId);
      }
      if (struct.isSetReducerInstanceSize()) {
        oprot.writeString(struct.reducerInstanceSize);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, AWSSpecificationDTO struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(15);
      if (incoming.get(0)) {
        struct.accessKeyID = iprot.readString();
        struct.setAccessKeyIDIsSet(true);
      }
      if (incoming.get(1)) {
        struct.secretKey = iprot.readString();
        struct.setSecretKeyIsSet(true);
      }
      if (incoming.get(2)) {
        struct.region = iprot.readString();
        struct.setRegionIsSet(true);
      }
      if (incoming.get(3)) {
        struct.publicSubnetId = iprot.readString();
        struct.setPublicSubnetIdIsSet(true);
      }
      if (incoming.get(4)) {
        struct.privateSubnetId = iprot.readString();
        struct.setPrivateSubnetIdIsSet(true);
      }
      if (incoming.get(5)) {
        struct.vpcId = iprot.readString();
        struct.setVpcIdIsSet(true);
      }
      if (incoming.get(6)) {
        struct.keypairName = iprot.readString();
        struct.setKeypairNameIsSet(true);
      }
      if (incoming.get(7)) {
        struct.vpnDynamicIpNetworkAddress = iprot.readString();
        struct.setVpnDynamicIpNetworkAddressIsSet(true);
      }
      if (incoming.get(8)) {
        struct.vpnDynamicIpSubnetMaskSuffix = iprot.readI32();
        struct.setVpnDynamicIpSubnetMaskSuffixIsSet(true);
      }
      if (incoming.get(9)) {
        struct.clusterImageId = iprot.readString();
        struct.setClusterImageIdIsSet(true);
      }
      if (incoming.get(10)) {
        struct.clusterInstanceSize = iprot.readString();
        struct.setClusterInstanceSizeIsSet(true);
      }
      if (incoming.get(11)) {
        struct.workerImageId = iprot.readString();
        struct.setWorkerImageIdIsSet(true);
      }
      if (incoming.get(12)) {
        struct.workerInstanceSize = iprot.readString();
        struct.setWorkerInstanceSizeIsSet(true);
      }
      if (incoming.get(13)) {
        struct.reducerImageId = iprot.readString();
        struct.setReducerImageIdIsSet(true);
      }
      if (incoming.get(14)) {
        struct.reducerInstanceSize = iprot.readString();
        struct.setReducerInstanceSizeIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

