/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.cloud.communication.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-11-06")
public class CloudCommunicationService {

  public interface Iface {

    /**
     * Creates a new cloud cluster object that communicates with the AWS environment including some AWS specific actions
     * for setting up the specific AWS environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
     * 
     * 
     * @param specification
     */
    public java.lang.String createAWSCluster(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification) throws org.apache.thrift.TException;

    /**
     * Boots a DEF cluster instance in the specific cloud environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
     * 
     * 
     * @param cloudClusterId
     */
    public java.lang.String bootClusterInstance(java.lang.String cloudClusterId) throws org.apache.thrift.TException;

    /**
     * Boots a given number of DEF nodes (worker or reducers) in the specific cloud environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
     * 
     * 
     * @param cloudClusterId
     * @param instanceType
     * @param nrOfNodes
     */
    public java.lang.String bootNodes(java.lang.String cloudClusterId, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType, int nrOfNodes) throws org.apache.thrift.TException;

    /**
     * Terminates the DEF nodes with the given IDs in the specific cloud environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
     * 
     * 
     * @param cloudClusterId
     * @param cloudInstanceIds
     */
    public java.lang.String terminateNodes(java.lang.String cloudClusterId, java.util.List<java.lang.String> cloudInstanceIds) throws org.apache.thrift.TException;

    /**
     * Returns the public IP address of a DEF instance in the specific cloud environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
     * 
     * 
     * @param cloudClusterId
     * @param cloudInstanceId
     */
    public java.lang.String getPublicIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException;

    /**
     * Returns the private IP address of a DEF instance in the specific cloud environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface, real result over Response interface.
     * 
     * 
     * @param cloudClusterId
     * @param cloudInstanceId
     */
    public java.lang.String getPrivateIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException;

    /**
     * Shuts down the cloud cluster with the given ID by terminating all DEF nodes and cluster instances in the specific
     * cloud environment. Executes also some cloud specific actions for clearing the specific cloud environment.
     * Returns a ticket id, state of ticket is available over TicketSerivce interface.
     * 
     * 
     * @param cloudClusterId
     */
    public java.lang.String shutdownCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException;

    /**
     * Maps an ID of a cluster or node instance to an ID of a cloud instance.
     * Returns a ticket id, state of the ticket is availabe over TicketService interface.
     * 
     * 
     * @param cloudClusterId
     * @param defId
     * @param cloudInstanceId
     */
    public java.lang.String mapDEFIdToCloudInstanceId(java.lang.String cloudClusterId, java.lang.String defId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface {

    public void createAWSCluster(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void bootClusterInstance(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void bootNodes(java.lang.String cloudClusterId, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType, int nrOfNodes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void terminateNodes(java.lang.String cloudClusterId, java.util.List<java.lang.String> cloudInstanceIds, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getPublicIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void getPrivateIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void shutdownCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void mapDEFIdToCloudInstanceId(java.lang.String cloudClusterId, java.lang.String defId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends org.apache.thrift.TServiceClient implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String createAWSCluster(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification) throws org.apache.thrift.TException
    {
      send_createAWSCluster(specification);
      return recv_createAWSCluster();
    }

    public void send_createAWSCluster(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification) throws org.apache.thrift.TException
    {
      createAWSCluster_args args = new createAWSCluster_args();
      args.setSpecification(specification);
      sendBase("createAWSCluster", args);
    }

    public java.lang.String recv_createAWSCluster() throws org.apache.thrift.TException
    {
      createAWSCluster_result result = new createAWSCluster_result();
      receiveBase(result, "createAWSCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "createAWSCluster failed: unknown result");
    }

    public java.lang.String bootClusterInstance(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      send_bootClusterInstance(cloudClusterId);
      return recv_bootClusterInstance();
    }

    public void send_bootClusterInstance(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      bootClusterInstance_args args = new bootClusterInstance_args();
      args.setCloudClusterId(cloudClusterId);
      sendBase("bootClusterInstance", args);
    }

    public java.lang.String recv_bootClusterInstance() throws org.apache.thrift.TException
    {
      bootClusterInstance_result result = new bootClusterInstance_result();
      receiveBase(result, "bootClusterInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bootClusterInstance failed: unknown result");
    }

    public java.lang.String bootNodes(java.lang.String cloudClusterId, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType, int nrOfNodes) throws org.apache.thrift.TException
    {
      send_bootNodes(cloudClusterId, instanceType, nrOfNodes);
      return recv_bootNodes();
    }

    public void send_bootNodes(java.lang.String cloudClusterId, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType, int nrOfNodes) throws org.apache.thrift.TException
    {
      bootNodes_args args = new bootNodes_args();
      args.setCloudClusterId(cloudClusterId);
      args.setInstanceType(instanceType);
      args.setNrOfNodes(nrOfNodes);
      sendBase("bootNodes", args);
    }

    public java.lang.String recv_bootNodes() throws org.apache.thrift.TException
    {
      bootNodes_result result = new bootNodes_result();
      receiveBase(result, "bootNodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "bootNodes failed: unknown result");
    }

    public java.lang.String terminateNodes(java.lang.String cloudClusterId, java.util.List<java.lang.String> cloudInstanceIds) throws org.apache.thrift.TException
    {
      send_terminateNodes(cloudClusterId, cloudInstanceIds);
      return recv_terminateNodes();
    }

    public void send_terminateNodes(java.lang.String cloudClusterId, java.util.List<java.lang.String> cloudInstanceIds) throws org.apache.thrift.TException
    {
      terminateNodes_args args = new terminateNodes_args();
      args.setCloudClusterId(cloudClusterId);
      args.setCloudInstanceIds(cloudInstanceIds);
      sendBase("terminateNodes", args);
    }

    public java.lang.String recv_terminateNodes() throws org.apache.thrift.TException
    {
      terminateNodes_result result = new terminateNodes_result();
      receiveBase(result, "terminateNodes");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "terminateNodes failed: unknown result");
    }

    public java.lang.String getPublicIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException
    {
      send_getPublicIPAddressOfCloudInstance(cloudClusterId, cloudInstanceId);
      return recv_getPublicIPAddressOfCloudInstance();
    }

    public void send_getPublicIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException
    {
      getPublicIPAddressOfCloudInstance_args args = new getPublicIPAddressOfCloudInstance_args();
      args.setCloudClusterId(cloudClusterId);
      args.setCloudInstanceId(cloudInstanceId);
      sendBase("getPublicIPAddressOfCloudInstance", args);
    }

    public java.lang.String recv_getPublicIPAddressOfCloudInstance() throws org.apache.thrift.TException
    {
      getPublicIPAddressOfCloudInstance_result result = new getPublicIPAddressOfCloudInstance_result();
      receiveBase(result, "getPublicIPAddressOfCloudInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPublicIPAddressOfCloudInstance failed: unknown result");
    }

    public java.lang.String getPrivateIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException
    {
      send_getPrivateIPAddressOfCloudInstance(cloudClusterId, cloudInstanceId);
      return recv_getPrivateIPAddressOfCloudInstance();
    }

    public void send_getPrivateIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException
    {
      getPrivateIPAddressOfCloudInstance_args args = new getPrivateIPAddressOfCloudInstance_args();
      args.setCloudClusterId(cloudClusterId);
      args.setCloudInstanceId(cloudInstanceId);
      sendBase("getPrivateIPAddressOfCloudInstance", args);
    }

    public java.lang.String recv_getPrivateIPAddressOfCloudInstance() throws org.apache.thrift.TException
    {
      getPrivateIPAddressOfCloudInstance_result result = new getPrivateIPAddressOfCloudInstance_result();
      receiveBase(result, "getPrivateIPAddressOfCloudInstance");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getPrivateIPAddressOfCloudInstance failed: unknown result");
    }

    public java.lang.String shutdownCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      send_shutdownCloudCluster(cloudClusterId);
      return recv_shutdownCloudCluster();
    }

    public void send_shutdownCloudCluster(java.lang.String cloudClusterId) throws org.apache.thrift.TException
    {
      shutdownCloudCluster_args args = new shutdownCloudCluster_args();
      args.setCloudClusterId(cloudClusterId);
      sendBase("shutdownCloudCluster", args);
    }

    public java.lang.String recv_shutdownCloudCluster() throws org.apache.thrift.TException
    {
      shutdownCloudCluster_result result = new shutdownCloudCluster_result();
      receiveBase(result, "shutdownCloudCluster");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "shutdownCloudCluster failed: unknown result");
    }

    public java.lang.String mapDEFIdToCloudInstanceId(java.lang.String cloudClusterId, java.lang.String defId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException
    {
      send_mapDEFIdToCloudInstanceId(cloudClusterId, defId, cloudInstanceId);
      return recv_mapDEFIdToCloudInstanceId();
    }

    public void send_mapDEFIdToCloudInstanceId(java.lang.String cloudClusterId, java.lang.String defId, java.lang.String cloudInstanceId) throws org.apache.thrift.TException
    {
      mapDEFIdToCloudInstanceId_args args = new mapDEFIdToCloudInstanceId_args();
      args.setCloudClusterId(cloudClusterId);
      args.setDefId(defId);
      args.setCloudInstanceId(cloudInstanceId);
      sendBase("mapDEFIdToCloudInstanceId", args);
    }

    public java.lang.String recv_mapDEFIdToCloudInstanceId() throws org.apache.thrift.TException
    {
      mapDEFIdToCloudInstanceId_result result = new mapDEFIdToCloudInstanceId_result();
      receiveBase(result, "mapDEFIdToCloudInstanceId");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "mapDEFIdToCloudInstanceId failed: unknown result");
    }

  }
  public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void createAWSCluster(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      createAWSCluster_call method_call = new createAWSCluster_call(specification, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class createAWSCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification;
      public createAWSCluster_call(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.specification = specification;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("createAWSCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        createAWSCluster_args args = new createAWSCluster_args();
        args.setSpecification(specification);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_createAWSCluster();
      }
    }

    public void bootClusterInstance(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bootClusterInstance_call method_call = new bootClusterInstance_call(cloudClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bootClusterInstance_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      public bootClusterInstance_call(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bootClusterInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bootClusterInstance_args args = new bootClusterInstance_args();
        args.setCloudClusterId(cloudClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bootClusterInstance();
      }
    }

    public void bootNodes(java.lang.String cloudClusterId, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType, int nrOfNodes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      bootNodes_call method_call = new bootNodes_call(cloudClusterId, instanceType, nrOfNodes, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class bootNodes_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      private at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType;
      private int nrOfNodes;
      public bootNodes_call(java.lang.String cloudClusterId, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType, int nrOfNodes, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
        this.instanceType = instanceType;
        this.nrOfNodes = nrOfNodes;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("bootNodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        bootNodes_args args = new bootNodes_args();
        args.setCloudClusterId(cloudClusterId);
        args.setInstanceType(instanceType);
        args.setNrOfNodes(nrOfNodes);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_bootNodes();
      }
    }

    public void terminateNodes(java.lang.String cloudClusterId, java.util.List<java.lang.String> cloudInstanceIds, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      terminateNodes_call method_call = new terminateNodes_call(cloudClusterId, cloudInstanceIds, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class terminateNodes_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      private java.util.List<java.lang.String> cloudInstanceIds;
      public terminateNodes_call(java.lang.String cloudClusterId, java.util.List<java.lang.String> cloudInstanceIds, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
        this.cloudInstanceIds = cloudInstanceIds;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("terminateNodes", org.apache.thrift.protocol.TMessageType.CALL, 0));
        terminateNodes_args args = new terminateNodes_args();
        args.setCloudClusterId(cloudClusterId);
        args.setCloudInstanceIds(cloudInstanceIds);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_terminateNodes();
      }
    }

    public void getPublicIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPublicIPAddressOfCloudInstance_call method_call = new getPublicIPAddressOfCloudInstance_call(cloudClusterId, cloudInstanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPublicIPAddressOfCloudInstance_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      private java.lang.String cloudInstanceId;
      public getPublicIPAddressOfCloudInstance_call(java.lang.String cloudClusterId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
        this.cloudInstanceId = cloudInstanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPublicIPAddressOfCloudInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPublicIPAddressOfCloudInstance_args args = new getPublicIPAddressOfCloudInstance_args();
        args.setCloudClusterId(cloudClusterId);
        args.setCloudInstanceId(cloudInstanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPublicIPAddressOfCloudInstance();
      }
    }

    public void getPrivateIPAddressOfCloudInstance(java.lang.String cloudClusterId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getPrivateIPAddressOfCloudInstance_call method_call = new getPrivateIPAddressOfCloudInstance_call(cloudClusterId, cloudInstanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getPrivateIPAddressOfCloudInstance_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      private java.lang.String cloudInstanceId;
      public getPrivateIPAddressOfCloudInstance_call(java.lang.String cloudClusterId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
        this.cloudInstanceId = cloudInstanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getPrivateIPAddressOfCloudInstance", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getPrivateIPAddressOfCloudInstance_args args = new getPrivateIPAddressOfCloudInstance_args();
        args.setCloudClusterId(cloudClusterId);
        args.setCloudInstanceId(cloudInstanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getPrivateIPAddressOfCloudInstance();
      }
    }

    public void shutdownCloudCluster(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      shutdownCloudCluster_call method_call = new shutdownCloudCluster_call(cloudClusterId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class shutdownCloudCluster_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      public shutdownCloudCluster_call(java.lang.String cloudClusterId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("shutdownCloudCluster", org.apache.thrift.protocol.TMessageType.CALL, 0));
        shutdownCloudCluster_args args = new shutdownCloudCluster_args();
        args.setCloudClusterId(cloudClusterId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_shutdownCloudCluster();
      }
    }

    public void mapDEFIdToCloudInstanceId(java.lang.String cloudClusterId, java.lang.String defId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      mapDEFIdToCloudInstanceId_call method_call = new mapDEFIdToCloudInstanceId_call(cloudClusterId, defId, cloudInstanceId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class mapDEFIdToCloudInstanceId_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String cloudClusterId;
      private java.lang.String defId;
      private java.lang.String cloudInstanceId;
      public mapDEFIdToCloudInstanceId_call(java.lang.String cloudClusterId, java.lang.String defId, java.lang.String cloudInstanceId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.cloudClusterId = cloudClusterId;
        this.defId = defId;
        this.cloudInstanceId = cloudInstanceId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("mapDEFIdToCloudInstanceId", org.apache.thrift.protocol.TMessageType.CALL, 0));
        mapDEFIdToCloudInstanceId_args args = new mapDEFIdToCloudInstanceId_args();
        args.setCloudClusterId(cloudClusterId);
        args.setDefId(defId);
        args.setCloudInstanceId(cloudInstanceId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_mapDEFIdToCloudInstanceId();
      }
    }

  }

  public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("createAWSCluster", new createAWSCluster());
      processMap.put("bootClusterInstance", new bootClusterInstance());
      processMap.put("bootNodes", new bootNodes());
      processMap.put("terminateNodes", new terminateNodes());
      processMap.put("getPublicIPAddressOfCloudInstance", new getPublicIPAddressOfCloudInstance());
      processMap.put("getPrivateIPAddressOfCloudInstance", new getPrivateIPAddressOfCloudInstance());
      processMap.put("shutdownCloudCluster", new shutdownCloudCluster());
      processMap.put("mapDEFIdToCloudInstanceId", new mapDEFIdToCloudInstanceId());
      return processMap;
    }

    public static class createAWSCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, createAWSCluster_args> {
      public createAWSCluster() {
        super("createAWSCluster");
      }

      public createAWSCluster_args getEmptyArgsInstance() {
        return new createAWSCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public createAWSCluster_result getResult(I iface, createAWSCluster_args args) throws org.apache.thrift.TException {
        createAWSCluster_result result = new createAWSCluster_result();
        result.success = iface.createAWSCluster(args.specification);
        return result;
      }
    }

    public static class bootClusterInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bootClusterInstance_args> {
      public bootClusterInstance() {
        super("bootClusterInstance");
      }

      public bootClusterInstance_args getEmptyArgsInstance() {
        return new bootClusterInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public bootClusterInstance_result getResult(I iface, bootClusterInstance_args args) throws org.apache.thrift.TException {
        bootClusterInstance_result result = new bootClusterInstance_result();
        result.success = iface.bootClusterInstance(args.cloudClusterId);
        return result;
      }
    }

    public static class bootNodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, bootNodes_args> {
      public bootNodes() {
        super("bootNodes");
      }

      public bootNodes_args getEmptyArgsInstance() {
        return new bootNodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public bootNodes_result getResult(I iface, bootNodes_args args) throws org.apache.thrift.TException {
        bootNodes_result result = new bootNodes_result();
        result.success = iface.bootNodes(args.cloudClusterId, args.instanceType, args.nrOfNodes);
        return result;
      }
    }

    public static class terminateNodes<I extends Iface> extends org.apache.thrift.ProcessFunction<I, terminateNodes_args> {
      public terminateNodes() {
        super("terminateNodes");
      }

      public terminateNodes_args getEmptyArgsInstance() {
        return new terminateNodes_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public terminateNodes_result getResult(I iface, terminateNodes_args args) throws org.apache.thrift.TException {
        terminateNodes_result result = new terminateNodes_result();
        result.success = iface.terminateNodes(args.cloudClusterId, args.cloudInstanceIds);
        return result;
      }
    }

    public static class getPublicIPAddressOfCloudInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPublicIPAddressOfCloudInstance_args> {
      public getPublicIPAddressOfCloudInstance() {
        super("getPublicIPAddressOfCloudInstance");
      }

      public getPublicIPAddressOfCloudInstance_args getEmptyArgsInstance() {
        return new getPublicIPAddressOfCloudInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getPublicIPAddressOfCloudInstance_result getResult(I iface, getPublicIPAddressOfCloudInstance_args args) throws org.apache.thrift.TException {
        getPublicIPAddressOfCloudInstance_result result = new getPublicIPAddressOfCloudInstance_result();
        result.success = iface.getPublicIPAddressOfCloudInstance(args.cloudClusterId, args.cloudInstanceId);
        return result;
      }
    }

    public static class getPrivateIPAddressOfCloudInstance<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getPrivateIPAddressOfCloudInstance_args> {
      public getPrivateIPAddressOfCloudInstance() {
        super("getPrivateIPAddressOfCloudInstance");
      }

      public getPrivateIPAddressOfCloudInstance_args getEmptyArgsInstance() {
        return new getPrivateIPAddressOfCloudInstance_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getPrivateIPAddressOfCloudInstance_result getResult(I iface, getPrivateIPAddressOfCloudInstance_args args) throws org.apache.thrift.TException {
        getPrivateIPAddressOfCloudInstance_result result = new getPrivateIPAddressOfCloudInstance_result();
        result.success = iface.getPrivateIPAddressOfCloudInstance(args.cloudClusterId, args.cloudInstanceId);
        return result;
      }
    }

    public static class shutdownCloudCluster<I extends Iface> extends org.apache.thrift.ProcessFunction<I, shutdownCloudCluster_args> {
      public shutdownCloudCluster() {
        super("shutdownCloudCluster");
      }

      public shutdownCloudCluster_args getEmptyArgsInstance() {
        return new shutdownCloudCluster_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public shutdownCloudCluster_result getResult(I iface, shutdownCloudCluster_args args) throws org.apache.thrift.TException {
        shutdownCloudCluster_result result = new shutdownCloudCluster_result();
        result.success = iface.shutdownCloudCluster(args.cloudClusterId);
        return result;
      }
    }

    public static class mapDEFIdToCloudInstanceId<I extends Iface> extends org.apache.thrift.ProcessFunction<I, mapDEFIdToCloudInstanceId_args> {
      public mapDEFIdToCloudInstanceId() {
        super("mapDEFIdToCloudInstanceId");
      }

      public mapDEFIdToCloudInstanceId_args getEmptyArgsInstance() {
        return new mapDEFIdToCloudInstanceId_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public mapDEFIdToCloudInstanceId_result getResult(I iface, mapDEFIdToCloudInstanceId_args args) throws org.apache.thrift.TException {
        mapDEFIdToCloudInstanceId_result result = new mapDEFIdToCloudInstanceId_result();
        result.success = iface.mapDEFIdToCloudInstanceId(args.cloudClusterId, args.defId, args.cloudInstanceId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("createAWSCluster", new createAWSCluster());
      processMap.put("bootClusterInstance", new bootClusterInstance());
      processMap.put("bootNodes", new bootNodes());
      processMap.put("terminateNodes", new terminateNodes());
      processMap.put("getPublicIPAddressOfCloudInstance", new getPublicIPAddressOfCloudInstance());
      processMap.put("getPrivateIPAddressOfCloudInstance", new getPrivateIPAddressOfCloudInstance());
      processMap.put("shutdownCloudCluster", new shutdownCloudCluster());
      processMap.put("mapDEFIdToCloudInstanceId", new mapDEFIdToCloudInstanceId());
      return processMap;
    }

    public static class createAWSCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, createAWSCluster_args, java.lang.String> {
      public createAWSCluster() {
        super("createAWSCluster");
      }

      public createAWSCluster_args getEmptyArgsInstance() {
        return new createAWSCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            createAWSCluster_result result = new createAWSCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            createAWSCluster_result result = new createAWSCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, createAWSCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.createAWSCluster(args.specification,resultHandler);
      }
    }

    public static class bootClusterInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bootClusterInstance_args, java.lang.String> {
      public bootClusterInstance() {
        super("bootClusterInstance");
      }

      public bootClusterInstance_args getEmptyArgsInstance() {
        return new bootClusterInstance_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            bootClusterInstance_result result = new bootClusterInstance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bootClusterInstance_result result = new bootClusterInstance_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bootClusterInstance_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.bootClusterInstance(args.cloudClusterId,resultHandler);
      }
    }

    public static class bootNodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, bootNodes_args, java.lang.String> {
      public bootNodes() {
        super("bootNodes");
      }

      public bootNodes_args getEmptyArgsInstance() {
        return new bootNodes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            bootNodes_result result = new bootNodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            bootNodes_result result = new bootNodes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, bootNodes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.bootNodes(args.cloudClusterId, args.instanceType, args.nrOfNodes,resultHandler);
      }
    }

    public static class terminateNodes<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, terminateNodes_args, java.lang.String> {
      public terminateNodes() {
        super("terminateNodes");
      }

      public terminateNodes_args getEmptyArgsInstance() {
        return new terminateNodes_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            terminateNodes_result result = new terminateNodes_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            terminateNodes_result result = new terminateNodes_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, terminateNodes_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.terminateNodes(args.cloudClusterId, args.cloudInstanceIds,resultHandler);
      }
    }

    public static class getPublicIPAddressOfCloudInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPublicIPAddressOfCloudInstance_args, java.lang.String> {
      public getPublicIPAddressOfCloudInstance() {
        super("getPublicIPAddressOfCloudInstance");
      }

      public getPublicIPAddressOfCloudInstance_args getEmptyArgsInstance() {
        return new getPublicIPAddressOfCloudInstance_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getPublicIPAddressOfCloudInstance_result result = new getPublicIPAddressOfCloudInstance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPublicIPAddressOfCloudInstance_result result = new getPublicIPAddressOfCloudInstance_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPublicIPAddressOfCloudInstance_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getPublicIPAddressOfCloudInstance(args.cloudClusterId, args.cloudInstanceId,resultHandler);
      }
    }

    public static class getPrivateIPAddressOfCloudInstance<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getPrivateIPAddressOfCloudInstance_args, java.lang.String> {
      public getPrivateIPAddressOfCloudInstance() {
        super("getPrivateIPAddressOfCloudInstance");
      }

      public getPrivateIPAddressOfCloudInstance_args getEmptyArgsInstance() {
        return new getPrivateIPAddressOfCloudInstance_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getPrivateIPAddressOfCloudInstance_result result = new getPrivateIPAddressOfCloudInstance_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getPrivateIPAddressOfCloudInstance_result result = new getPrivateIPAddressOfCloudInstance_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getPrivateIPAddressOfCloudInstance_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getPrivateIPAddressOfCloudInstance(args.cloudClusterId, args.cloudInstanceId,resultHandler);
      }
    }

    public static class shutdownCloudCluster<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, shutdownCloudCluster_args, java.lang.String> {
      public shutdownCloudCluster() {
        super("shutdownCloudCluster");
      }

      public shutdownCloudCluster_args getEmptyArgsInstance() {
        return new shutdownCloudCluster_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            shutdownCloudCluster_result result = new shutdownCloudCluster_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            shutdownCloudCluster_result result = new shutdownCloudCluster_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, shutdownCloudCluster_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.shutdownCloudCluster(args.cloudClusterId,resultHandler);
      }
    }

    public static class mapDEFIdToCloudInstanceId<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, mapDEFIdToCloudInstanceId_args, java.lang.String> {
      public mapDEFIdToCloudInstanceId() {
        super("mapDEFIdToCloudInstanceId");
      }

      public mapDEFIdToCloudInstanceId_args getEmptyArgsInstance() {
        return new mapDEFIdToCloudInstanceId_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            mapDEFIdToCloudInstanceId_result result = new mapDEFIdToCloudInstanceId_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            mapDEFIdToCloudInstanceId_result result = new mapDEFIdToCloudInstanceId_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, mapDEFIdToCloudInstanceId_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.mapDEFIdToCloudInstanceId(args.cloudClusterId, args.defId, args.cloudInstanceId,resultHandler);
      }
    }

  }

  public static class createAWSCluster_args implements org.apache.thrift.TBase<createAWSCluster_args, createAWSCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<createAWSCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAWSCluster_args");

    private static final org.apache.thrift.protocol.TField SPECIFICATION_FIELD_DESC = new org.apache.thrift.protocol.TField("specification", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAWSCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAWSCluster_argsTupleSchemeFactory();

    private at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SPECIFICATION((short)1, "specification");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // SPECIFICATION
            return SPECIFICATION;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SPECIFICATION, new org.apache.thrift.meta_data.FieldMetaData("specification", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAWSCluster_args.class, metaDataMap);
    }

    public createAWSCluster_args() {
    }

    public createAWSCluster_args(
      at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification)
    {
      this();
      this.specification = specification;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAWSCluster_args(createAWSCluster_args other) {
      if (other.isSetSpecification()) {
        this.specification = new at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO(other.specification);
      }
    }

    public createAWSCluster_args deepCopy() {
      return new createAWSCluster_args(this);
    }

    @Override
    public void clear() {
      this.specification = null;
    }

    public at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO getSpecification() {
      return this.specification;
    }

    public void setSpecification(at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO specification) {
      this.specification = specification;
    }

    public void unsetSpecification() {
      this.specification = null;
    }

    /** Returns true if field specification is set (has been assigned a value) and false otherwise */
    public boolean isSetSpecification() {
      return this.specification != null;
    }

    public void setSpecificationIsSet(boolean value) {
      if (!value) {
        this.specification = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SPECIFICATION:
        if (value == null) {
          unsetSpecification();
        } else {
          setSpecification((at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SPECIFICATION:
        return getSpecification();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SPECIFICATION:
        return isSetSpecification();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAWSCluster_args)
        return this.equals((createAWSCluster_args)that);
      return false;
    }

    public boolean equals(createAWSCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_specification = true && this.isSetSpecification();
      boolean that_present_specification = true && that.isSetSpecification();
      if (this_present_specification || that_present_specification) {
        if (!(this_present_specification && that_present_specification))
          return false;
        if (!this.specification.equals(that.specification))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSpecification()) ? 131071 : 524287);
      if (isSetSpecification())
        hashCode = hashCode * 8191 + specification.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAWSCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSpecification()).compareTo(other.isSetSpecification());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSpecification()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specification, other.specification);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAWSCluster_args(");
      boolean first = true;

      sb.append("specification:");
      if (this.specification == null) {
        sb.append("null");
      } else {
        sb.append(this.specification);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (specification != null) {
        specification.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAWSCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_argsStandardScheme getScheme() {
        return new createAWSCluster_argsStandardScheme();
      }
    }

    private static class createAWSCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAWSCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // SPECIFICATION
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.specification = new at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO();
                struct.specification.read(iprot);
                struct.setSpecificationIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.specification != null) {
          oprot.writeFieldBegin(SPECIFICATION_FIELD_DESC);
          struct.specification.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAWSCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_argsTupleScheme getScheme() {
        return new createAWSCluster_argsTupleScheme();
      }
    }

    private static class createAWSCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAWSCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSpecification()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSpecification()) {
          struct.specification.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.specification = new at.enfilo.def.cloud.communication.dto.AWSSpecificationDTO();
          struct.specification.read(iprot);
          struct.setSpecificationIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class createAWSCluster_result implements org.apache.thrift.TBase<createAWSCluster_result, createAWSCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<createAWSCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("createAWSCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new createAWSCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new createAWSCluster_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(createAWSCluster_result.class, metaDataMap);
    }

    public createAWSCluster_result() {
    }

    public createAWSCluster_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public createAWSCluster_result(createAWSCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public createAWSCluster_result deepCopy() {
      return new createAWSCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof createAWSCluster_result)
        return this.equals((createAWSCluster_result)that);
      return false;
    }

    public boolean equals(createAWSCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(createAWSCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("createAWSCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class createAWSCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_resultStandardScheme getScheme() {
        return new createAWSCluster_resultStandardScheme();
      }
    }

    private static class createAWSCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<createAWSCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class createAWSCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public createAWSCluster_resultTupleScheme getScheme() {
        return new createAWSCluster_resultTupleScheme();
      }
    }

    private static class createAWSCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<createAWSCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, createAWSCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bootClusterInstance_args implements org.apache.thrift.TBase<bootClusterInstance_args, bootClusterInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<bootClusterInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bootClusterInstance_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bootClusterInstance_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bootClusterInstance_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bootClusterInstance_args.class, metaDataMap);
    }

    public bootClusterInstance_args() {
    }

    public bootClusterInstance_args(
      java.lang.String cloudClusterId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bootClusterInstance_args(bootClusterInstance_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
    }

    public bootClusterInstance_args deepCopy() {
      return new bootClusterInstance_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bootClusterInstance_args)
        return this.equals((bootClusterInstance_args)that);
      return false;
    }

    public boolean equals(bootClusterInstance_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bootClusterInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bootClusterInstance_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bootClusterInstance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootClusterInstance_argsStandardScheme getScheme() {
        return new bootClusterInstance_argsStandardScheme();
      }
    }

    private static class bootClusterInstance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bootClusterInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bootClusterInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bootClusterInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bootClusterInstance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootClusterInstance_argsTupleScheme getScheme() {
        return new bootClusterInstance_argsTupleScheme();
      }
    }

    private static class bootClusterInstance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bootClusterInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bootClusterInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bootClusterInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bootClusterInstance_result implements org.apache.thrift.TBase<bootClusterInstance_result, bootClusterInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<bootClusterInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bootClusterInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bootClusterInstance_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bootClusterInstance_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bootClusterInstance_result.class, metaDataMap);
    }

    public bootClusterInstance_result() {
    }

    public bootClusterInstance_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bootClusterInstance_result(bootClusterInstance_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bootClusterInstance_result deepCopy() {
      return new bootClusterInstance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bootClusterInstance_result)
        return this.equals((bootClusterInstance_result)that);
      return false;
    }

    public boolean equals(bootClusterInstance_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bootClusterInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bootClusterInstance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bootClusterInstance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootClusterInstance_resultStandardScheme getScheme() {
        return new bootClusterInstance_resultStandardScheme();
      }
    }

    private static class bootClusterInstance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bootClusterInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bootClusterInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bootClusterInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bootClusterInstance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootClusterInstance_resultTupleScheme getScheme() {
        return new bootClusterInstance_resultTupleScheme();
      }
    }

    private static class bootClusterInstance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bootClusterInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bootClusterInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bootClusterInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bootNodes_args implements org.apache.thrift.TBase<bootNodes_args, bootNodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<bootNodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bootNodes_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField INSTANCE_TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("instanceType", org.apache.thrift.protocol.TType.I32, (short)2);
    private static final org.apache.thrift.protocol.TField NR_OF_NODES_FIELD_DESC = new org.apache.thrift.protocol.TField("nrOfNodes", org.apache.thrift.protocol.TType.I32, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bootNodes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bootNodes_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required
    private at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType; // required
    private int nrOfNodes; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId"),
      /**
       * 
       * @see at.enfilo.def.cloud.communication.dto.InstanceTypeDTO
       */
      INSTANCE_TYPE((short)2, "instanceType"),
      NR_OF_NODES((short)3, "nrOfNodes");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          case 2: // INSTANCE_TYPE
            return INSTANCE_TYPE;
          case 3: // NR_OF_NODES
            return NR_OF_NODES;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    private static final int __NROFNODES_ISSET_ID = 0;
    private byte __isset_bitfield = 0;
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.INSTANCE_TYPE, new org.apache.thrift.meta_data.FieldMetaData("instanceType", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, at.enfilo.def.cloud.communication.dto.InstanceTypeDTO.class)));
      tmpMap.put(_Fields.NR_OF_NODES, new org.apache.thrift.meta_data.FieldMetaData("nrOfNodes", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bootNodes_args.class, metaDataMap);
    }

    public bootNodes_args() {
    }

    public bootNodes_args(
      java.lang.String cloudClusterId,
      at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType,
      int nrOfNodes)
    {
      this();
      this.cloudClusterId = cloudClusterId;
      this.instanceType = instanceType;
      this.nrOfNodes = nrOfNodes;
      setNrOfNodesIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bootNodes_args(bootNodes_args other) {
      __isset_bitfield = other.__isset_bitfield;
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
      if (other.isSetInstanceType()) {
        this.instanceType = other.instanceType;
      }
      this.nrOfNodes = other.nrOfNodes;
    }

    public bootNodes_args deepCopy() {
      return new bootNodes_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
      this.instanceType = null;
      setNrOfNodesIsSet(false);
      this.nrOfNodes = 0;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    /**
     * 
     * @see at.enfilo.def.cloud.communication.dto.InstanceTypeDTO
     */
    public at.enfilo.def.cloud.communication.dto.InstanceTypeDTO getInstanceType() {
      return this.instanceType;
    }

    /**
     * 
     * @see at.enfilo.def.cloud.communication.dto.InstanceTypeDTO
     */
    public void setInstanceType(at.enfilo.def.cloud.communication.dto.InstanceTypeDTO instanceType) {
      this.instanceType = instanceType;
    }

    public void unsetInstanceType() {
      this.instanceType = null;
    }

    /** Returns true if field instanceType is set (has been assigned a value) and false otherwise */
    public boolean isSetInstanceType() {
      return this.instanceType != null;
    }

    public void setInstanceTypeIsSet(boolean value) {
      if (!value) {
        this.instanceType = null;
      }
    }

    public int getNrOfNodes() {
      return this.nrOfNodes;
    }

    public void setNrOfNodes(int nrOfNodes) {
      this.nrOfNodes = nrOfNodes;
      setNrOfNodesIsSet(true);
    }

    public void unsetNrOfNodes() {
      __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NROFNODES_ISSET_ID);
    }

    /** Returns true if field nrOfNodes is set (has been assigned a value) and false otherwise */
    public boolean isSetNrOfNodes() {
      return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NROFNODES_ISSET_ID);
    }

    public void setNrOfNodesIsSet(boolean value) {
      __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NROFNODES_ISSET_ID, value);
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      case INSTANCE_TYPE:
        if (value == null) {
          unsetInstanceType();
        } else {
          setInstanceType((at.enfilo.def.cloud.communication.dto.InstanceTypeDTO)value);
        }
        break;

      case NR_OF_NODES:
        if (value == null) {
          unsetNrOfNodes();
        } else {
          setNrOfNodes((java.lang.Integer)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      case INSTANCE_TYPE:
        return getInstanceType();

      case NR_OF_NODES:
        return getNrOfNodes();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      case INSTANCE_TYPE:
        return isSetInstanceType();
      case NR_OF_NODES:
        return isSetNrOfNodes();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bootNodes_args)
        return this.equals((bootNodes_args)that);
      return false;
    }

    public boolean equals(bootNodes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      boolean this_present_instanceType = true && this.isSetInstanceType();
      boolean that_present_instanceType = true && that.isSetInstanceType();
      if (this_present_instanceType || that_present_instanceType) {
        if (!(this_present_instanceType && that_present_instanceType))
          return false;
        if (!this.instanceType.equals(that.instanceType))
          return false;
      }

      boolean this_present_nrOfNodes = true;
      boolean that_present_nrOfNodes = true;
      if (this_present_nrOfNodes || that_present_nrOfNodes) {
        if (!(this_present_nrOfNodes && that_present_nrOfNodes))
          return false;
        if (this.nrOfNodes != that.nrOfNodes)
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetInstanceType()) ? 131071 : 524287);
      if (isSetInstanceType())
        hashCode = hashCode * 8191 + instanceType.getValue();

      hashCode = hashCode * 8191 + nrOfNodes;

      return hashCode;
    }

    @Override
    public int compareTo(bootNodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetInstanceType()).compareTo(other.isSetInstanceType());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetInstanceType()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.instanceType, other.instanceType);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetNrOfNodes()).compareTo(other.isSetNrOfNodes());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetNrOfNodes()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nrOfNodes, other.nrOfNodes);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bootNodes_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("instanceType:");
      if (this.instanceType == null) {
        sb.append("null");
      } else {
        sb.append(this.instanceType);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("nrOfNodes:");
      sb.append(this.nrOfNodes);
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
        __isset_bitfield = 0;
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bootNodes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootNodes_argsStandardScheme getScheme() {
        return new bootNodes_argsStandardScheme();
      }
    }

    private static class bootNodes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<bootNodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bootNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // INSTANCE_TYPE
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.instanceType = at.enfilo.def.cloud.communication.dto.InstanceTypeDTO.findByValue(iprot.readI32());
                struct.setInstanceTypeIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // NR_OF_NODES
              if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
                struct.nrOfNodes = iprot.readI32();
                struct.setNrOfNodesIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bootNodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.instanceType != null) {
          oprot.writeFieldBegin(INSTANCE_TYPE_FIELD_DESC);
          oprot.writeI32(struct.instanceType.getValue());
          oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(NR_OF_NODES_FIELD_DESC);
        oprot.writeI32(struct.nrOfNodes);
        oprot.writeFieldEnd();
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bootNodes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootNodes_argsTupleScheme getScheme() {
        return new bootNodes_argsTupleScheme();
      }
    }

    private static class bootNodes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<bootNodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bootNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetInstanceType()) {
          optionals.set(1);
        }
        if (struct.isSetNrOfNodes()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
        if (struct.isSetInstanceType()) {
          oprot.writeI32(struct.instanceType.getValue());
        }
        if (struct.isSetNrOfNodes()) {
          oprot.writeI32(struct.nrOfNodes);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bootNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.instanceType = at.enfilo.def.cloud.communication.dto.InstanceTypeDTO.findByValue(iprot.readI32());
          struct.setInstanceTypeIsSet(true);
        }
        if (incoming.get(2)) {
          struct.nrOfNodes = iprot.readI32();
          struct.setNrOfNodesIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class bootNodes_result implements org.apache.thrift.TBase<bootNodes_result, bootNodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<bootNodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("bootNodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new bootNodes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new bootNodes_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(bootNodes_result.class, metaDataMap);
    }

    public bootNodes_result() {
    }

    public bootNodes_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public bootNodes_result(bootNodes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public bootNodes_result deepCopy() {
      return new bootNodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof bootNodes_result)
        return this.equals((bootNodes_result)that);
      return false;
    }

    public boolean equals(bootNodes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(bootNodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("bootNodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class bootNodes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootNodes_resultStandardScheme getScheme() {
        return new bootNodes_resultStandardScheme();
      }
    }

    private static class bootNodes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<bootNodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, bootNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, bootNodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class bootNodes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public bootNodes_resultTupleScheme getScheme() {
        return new bootNodes_resultTupleScheme();
      }
    }

    private static class bootNodes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<bootNodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, bootNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, bootNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateNodes_args implements org.apache.thrift.TBase<terminateNodes_args, terminateNodes_args._Fields>, java.io.Serializable, Cloneable, Comparable<terminateNodes_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateNodes_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLOUD_INSTANCE_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudInstanceIds", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateNodes_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateNodes_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required
    private java.util.List<java.lang.String> cloudInstanceIds; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId"),
      CLOUD_INSTANCE_IDS((short)2, "cloudInstanceIds");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          case 2: // CLOUD_INSTANCE_IDS
            return CLOUD_INSTANCE_IDS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.CLOUD_INSTANCE_IDS, new org.apache.thrift.meta_data.FieldMetaData("cloudInstanceIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "Id"))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateNodes_args.class, metaDataMap);
    }

    public terminateNodes_args() {
    }

    public terminateNodes_args(
      java.lang.String cloudClusterId,
      java.util.List<java.lang.String> cloudInstanceIds)
    {
      this();
      this.cloudClusterId = cloudClusterId;
      this.cloudInstanceIds = cloudInstanceIds;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateNodes_args(terminateNodes_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
      if (other.isSetCloudInstanceIds()) {
        java.util.List<java.lang.String> __this__cloudInstanceIds = new java.util.ArrayList<java.lang.String>(other.cloudInstanceIds.size());
        for (java.lang.String other_element : other.cloudInstanceIds) {
          __this__cloudInstanceIds.add(other_element);
        }
        this.cloudInstanceIds = __this__cloudInstanceIds;
      }
    }

    public terminateNodes_args deepCopy() {
      return new terminateNodes_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
      this.cloudInstanceIds = null;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public int getCloudInstanceIdsSize() {
      return (this.cloudInstanceIds == null) ? 0 : this.cloudInstanceIds.size();
    }

    public java.util.Iterator<java.lang.String> getCloudInstanceIdsIterator() {
      return (this.cloudInstanceIds == null) ? null : this.cloudInstanceIds.iterator();
    }

    public void addToCloudInstanceIds(java.lang.String elem) {
      if (this.cloudInstanceIds == null) {
        this.cloudInstanceIds = new java.util.ArrayList<java.lang.String>();
      }
      this.cloudInstanceIds.add(elem);
    }

    public java.util.List<java.lang.String> getCloudInstanceIds() {
      return this.cloudInstanceIds;
    }

    public void setCloudInstanceIds(java.util.List<java.lang.String> cloudInstanceIds) {
      this.cloudInstanceIds = cloudInstanceIds;
    }

    public void unsetCloudInstanceIds() {
      this.cloudInstanceIds = null;
    }

    /** Returns true if field cloudInstanceIds is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudInstanceIds() {
      return this.cloudInstanceIds != null;
    }

    public void setCloudInstanceIdsIsSet(boolean value) {
      if (!value) {
        this.cloudInstanceIds = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      case CLOUD_INSTANCE_IDS:
        if (value == null) {
          unsetCloudInstanceIds();
        } else {
          setCloudInstanceIds((java.util.List<java.lang.String>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      case CLOUD_INSTANCE_IDS:
        return getCloudInstanceIds();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      case CLOUD_INSTANCE_IDS:
        return isSetCloudInstanceIds();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateNodes_args)
        return this.equals((terminateNodes_args)that);
      return false;
    }

    public boolean equals(terminateNodes_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      boolean this_present_cloudInstanceIds = true && this.isSetCloudInstanceIds();
      boolean that_present_cloudInstanceIds = true && that.isSetCloudInstanceIds();
      if (this_present_cloudInstanceIds || that_present_cloudInstanceIds) {
        if (!(this_present_cloudInstanceIds && that_present_cloudInstanceIds))
          return false;
        if (!this.cloudInstanceIds.equals(that.cloudInstanceIds))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudInstanceIds()) ? 131071 : 524287);
      if (isSetCloudInstanceIds())
        hashCode = hashCode * 8191 + cloudInstanceIds.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminateNodes_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCloudInstanceIds()).compareTo(other.isSetCloudInstanceIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudInstanceIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudInstanceIds, other.cloudInstanceIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateNodes_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudInstanceIds:");
      if (this.cloudInstanceIds == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudInstanceIds);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateNodes_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateNodes_argsStandardScheme getScheme() {
        return new terminateNodes_argsStandardScheme();
      }
    }

    private static class terminateNodes_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateNodes_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLOUD_INSTANCE_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.cloudInstanceIds = new java.util.ArrayList<java.lang.String>(_list0.size);
                  java.lang.String _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = iprot.readString();
                    struct.cloudInstanceIds.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setCloudInstanceIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateNodes_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.cloudInstanceIds != null) {
          oprot.writeFieldBegin(CLOUD_INSTANCE_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.cloudInstanceIds.size()));
            for (java.lang.String _iter3 : struct.cloudInstanceIds)
            {
              oprot.writeString(_iter3);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateNodes_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateNodes_argsTupleScheme getScheme() {
        return new terminateNodes_argsTupleScheme();
      }
    }

    private static class terminateNodes_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateNodes_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetCloudInstanceIds()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
        if (struct.isSetCloudInstanceIds()) {
          {
            oprot.writeI32(struct.cloudInstanceIds.size());
            for (java.lang.String _iter4 : struct.cloudInstanceIds)
            {
              oprot.writeString(_iter4);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateNodes_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.cloudInstanceIds = new java.util.ArrayList<java.lang.String>(_list5.size);
            java.lang.String _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = iprot.readString();
              struct.cloudInstanceIds.add(_elem6);
            }
          }
          struct.setCloudInstanceIdsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class terminateNodes_result implements org.apache.thrift.TBase<terminateNodes_result, terminateNodes_result._Fields>, java.io.Serializable, Cloneable, Comparable<terminateNodes_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("terminateNodes_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new terminateNodes_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new terminateNodes_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(terminateNodes_result.class, metaDataMap);
    }

    public terminateNodes_result() {
    }

    public terminateNodes_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public terminateNodes_result(terminateNodes_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public terminateNodes_result deepCopy() {
      return new terminateNodes_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof terminateNodes_result)
        return this.equals((terminateNodes_result)that);
      return false;
    }

    public boolean equals(terminateNodes_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(terminateNodes_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("terminateNodes_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class terminateNodes_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateNodes_resultStandardScheme getScheme() {
        return new terminateNodes_resultStandardScheme();
      }
    }

    private static class terminateNodes_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<terminateNodes_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, terminateNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, terminateNodes_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class terminateNodes_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public terminateNodes_resultTupleScheme getScheme() {
        return new terminateNodes_resultTupleScheme();
      }
    }

    private static class terminateNodes_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<terminateNodes_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, terminateNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, terminateNodes_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPublicIPAddressOfCloudInstance_args implements org.apache.thrift.TBase<getPublicIPAddressOfCloudInstance_args, getPublicIPAddressOfCloudInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPublicIPAddressOfCloudInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPublicIPAddressOfCloudInstance_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLOUD_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudInstanceId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPublicIPAddressOfCloudInstance_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPublicIPAddressOfCloudInstance_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required
    private java.lang.String cloudInstanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId"),
      CLOUD_INSTANCE_ID((short)2, "cloudInstanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          case 2: // CLOUD_INSTANCE_ID
            return CLOUD_INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.CLOUD_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPublicIPAddressOfCloudInstance_args.class, metaDataMap);
    }

    public getPublicIPAddressOfCloudInstance_args() {
    }

    public getPublicIPAddressOfCloudInstance_args(
      java.lang.String cloudClusterId,
      java.lang.String cloudInstanceId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
      this.cloudInstanceId = cloudInstanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicIPAddressOfCloudInstance_args(getPublicIPAddressOfCloudInstance_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
      if (other.isSetCloudInstanceId()) {
        this.cloudInstanceId = other.cloudInstanceId;
      }
    }

    public getPublicIPAddressOfCloudInstance_args deepCopy() {
      return new getPublicIPAddressOfCloudInstance_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
      this.cloudInstanceId = null;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public java.lang.String getCloudInstanceId() {
      return this.cloudInstanceId;
    }

    public void setCloudInstanceId(java.lang.String cloudInstanceId) {
      this.cloudInstanceId = cloudInstanceId;
    }

    public void unsetCloudInstanceId() {
      this.cloudInstanceId = null;
    }

    /** Returns true if field cloudInstanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudInstanceId() {
      return this.cloudInstanceId != null;
    }

    public void setCloudInstanceIdIsSet(boolean value) {
      if (!value) {
        this.cloudInstanceId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      case CLOUD_INSTANCE_ID:
        if (value == null) {
          unsetCloudInstanceId();
        } else {
          setCloudInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      case CLOUD_INSTANCE_ID:
        return getCloudInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      case CLOUD_INSTANCE_ID:
        return isSetCloudInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicIPAddressOfCloudInstance_args)
        return this.equals((getPublicIPAddressOfCloudInstance_args)that);
      return false;
    }

    public boolean equals(getPublicIPAddressOfCloudInstance_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      boolean this_present_cloudInstanceId = true && this.isSetCloudInstanceId();
      boolean that_present_cloudInstanceId = true && that.isSetCloudInstanceId();
      if (this_present_cloudInstanceId || that_present_cloudInstanceId) {
        if (!(this_present_cloudInstanceId && that_present_cloudInstanceId))
          return false;
        if (!this.cloudInstanceId.equals(that.cloudInstanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudInstanceId()) ? 131071 : 524287);
      if (isSetCloudInstanceId())
        hashCode = hashCode * 8191 + cloudInstanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPublicIPAddressOfCloudInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCloudInstanceId()).compareTo(other.isSetCloudInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudInstanceId, other.cloudInstanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPublicIPAddressOfCloudInstance_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudInstanceId:");
      if (this.cloudInstanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudInstanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPublicIPAddressOfCloudInstance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPublicIPAddressOfCloudInstance_argsStandardScheme getScheme() {
        return new getPublicIPAddressOfCloudInstance_argsStandardScheme();
      }
    }

    private static class getPublicIPAddressOfCloudInstance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPublicIPAddressOfCloudInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPublicIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLOUD_INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudInstanceId = iprot.readString();
                struct.setCloudInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPublicIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.cloudInstanceId != null) {
          oprot.writeFieldBegin(CLOUD_INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.cloudInstanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPublicIPAddressOfCloudInstance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPublicIPAddressOfCloudInstance_argsTupleScheme getScheme() {
        return new getPublicIPAddressOfCloudInstance_argsTupleScheme();
      }
    }

    private static class getPublicIPAddressOfCloudInstance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPublicIPAddressOfCloudInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPublicIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetCloudInstanceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
        if (struct.isSetCloudInstanceId()) {
          oprot.writeString(struct.cloudInstanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPublicIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cloudInstanceId = iprot.readString();
          struct.setCloudInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPublicIPAddressOfCloudInstance_result implements org.apache.thrift.TBase<getPublicIPAddressOfCloudInstance_result, getPublicIPAddressOfCloudInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPublicIPAddressOfCloudInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPublicIPAddressOfCloudInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPublicIPAddressOfCloudInstance_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPublicIPAddressOfCloudInstance_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPublicIPAddressOfCloudInstance_result.class, metaDataMap);
    }

    public getPublicIPAddressOfCloudInstance_result() {
    }

    public getPublicIPAddressOfCloudInstance_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPublicIPAddressOfCloudInstance_result(getPublicIPAddressOfCloudInstance_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPublicIPAddressOfCloudInstance_result deepCopy() {
      return new getPublicIPAddressOfCloudInstance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPublicIPAddressOfCloudInstance_result)
        return this.equals((getPublicIPAddressOfCloudInstance_result)that);
      return false;
    }

    public boolean equals(getPublicIPAddressOfCloudInstance_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPublicIPAddressOfCloudInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPublicIPAddressOfCloudInstance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPublicIPAddressOfCloudInstance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPublicIPAddressOfCloudInstance_resultStandardScheme getScheme() {
        return new getPublicIPAddressOfCloudInstance_resultStandardScheme();
      }
    }

    private static class getPublicIPAddressOfCloudInstance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPublicIPAddressOfCloudInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPublicIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPublicIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPublicIPAddressOfCloudInstance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPublicIPAddressOfCloudInstance_resultTupleScheme getScheme() {
        return new getPublicIPAddressOfCloudInstance_resultTupleScheme();
      }
    }

    private static class getPublicIPAddressOfCloudInstance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPublicIPAddressOfCloudInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPublicIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPublicIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPrivateIPAddressOfCloudInstance_args implements org.apache.thrift.TBase<getPrivateIPAddressOfCloudInstance_args, getPrivateIPAddressOfCloudInstance_args._Fields>, java.io.Serializable, Cloneable, Comparable<getPrivateIPAddressOfCloudInstance_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrivateIPAddressOfCloudInstance_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField CLOUD_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudInstanceId", org.apache.thrift.protocol.TType.STRING, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPrivateIPAddressOfCloudInstance_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPrivateIPAddressOfCloudInstance_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required
    private java.lang.String cloudInstanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId"),
      CLOUD_INSTANCE_ID((short)2, "cloudInstanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          case 2: // CLOUD_INSTANCE_ID
            return CLOUD_INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.CLOUD_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrivateIPAddressOfCloudInstance_args.class, metaDataMap);
    }

    public getPrivateIPAddressOfCloudInstance_args() {
    }

    public getPrivateIPAddressOfCloudInstance_args(
      java.lang.String cloudClusterId,
      java.lang.String cloudInstanceId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
      this.cloudInstanceId = cloudInstanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrivateIPAddressOfCloudInstance_args(getPrivateIPAddressOfCloudInstance_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
      if (other.isSetCloudInstanceId()) {
        this.cloudInstanceId = other.cloudInstanceId;
      }
    }

    public getPrivateIPAddressOfCloudInstance_args deepCopy() {
      return new getPrivateIPAddressOfCloudInstance_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
      this.cloudInstanceId = null;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public java.lang.String getCloudInstanceId() {
      return this.cloudInstanceId;
    }

    public void setCloudInstanceId(java.lang.String cloudInstanceId) {
      this.cloudInstanceId = cloudInstanceId;
    }

    public void unsetCloudInstanceId() {
      this.cloudInstanceId = null;
    }

    /** Returns true if field cloudInstanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudInstanceId() {
      return this.cloudInstanceId != null;
    }

    public void setCloudInstanceIdIsSet(boolean value) {
      if (!value) {
        this.cloudInstanceId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      case CLOUD_INSTANCE_ID:
        if (value == null) {
          unsetCloudInstanceId();
        } else {
          setCloudInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      case CLOUD_INSTANCE_ID:
        return getCloudInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      case CLOUD_INSTANCE_ID:
        return isSetCloudInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrivateIPAddressOfCloudInstance_args)
        return this.equals((getPrivateIPAddressOfCloudInstance_args)that);
      return false;
    }

    public boolean equals(getPrivateIPAddressOfCloudInstance_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      boolean this_present_cloudInstanceId = true && this.isSetCloudInstanceId();
      boolean that_present_cloudInstanceId = true && that.isSetCloudInstanceId();
      if (this_present_cloudInstanceId || that_present_cloudInstanceId) {
        if (!(this_present_cloudInstanceId && that_present_cloudInstanceId))
          return false;
        if (!this.cloudInstanceId.equals(that.cloudInstanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudInstanceId()) ? 131071 : 524287);
      if (isSetCloudInstanceId())
        hashCode = hashCode * 8191 + cloudInstanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPrivateIPAddressOfCloudInstance_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCloudInstanceId()).compareTo(other.isSetCloudInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudInstanceId, other.cloudInstanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPrivateIPAddressOfCloudInstance_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudInstanceId:");
      if (this.cloudInstanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudInstanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrivateIPAddressOfCloudInstance_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPrivateIPAddressOfCloudInstance_argsStandardScheme getScheme() {
        return new getPrivateIPAddressOfCloudInstance_argsStandardScheme();
      }
    }

    private static class getPrivateIPAddressOfCloudInstance_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPrivateIPAddressOfCloudInstance_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrivateIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // CLOUD_INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudInstanceId = iprot.readString();
                struct.setCloudInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrivateIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.cloudInstanceId != null) {
          oprot.writeFieldBegin(CLOUD_INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.cloudInstanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrivateIPAddressOfCloudInstance_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPrivateIPAddressOfCloudInstance_argsTupleScheme getScheme() {
        return new getPrivateIPAddressOfCloudInstance_argsTupleScheme();
      }
    }

    private static class getPrivateIPAddressOfCloudInstance_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPrivateIPAddressOfCloudInstance_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrivateIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetCloudInstanceId()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
        if (struct.isSetCloudInstanceId()) {
          oprot.writeString(struct.cloudInstanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrivateIPAddressOfCloudInstance_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.cloudInstanceId = iprot.readString();
          struct.setCloudInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getPrivateIPAddressOfCloudInstance_result implements org.apache.thrift.TBase<getPrivateIPAddressOfCloudInstance_result, getPrivateIPAddressOfCloudInstance_result._Fields>, java.io.Serializable, Cloneable, Comparable<getPrivateIPAddressOfCloudInstance_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getPrivateIPAddressOfCloudInstance_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getPrivateIPAddressOfCloudInstance_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getPrivateIPAddressOfCloudInstance_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getPrivateIPAddressOfCloudInstance_result.class, metaDataMap);
    }

    public getPrivateIPAddressOfCloudInstance_result() {
    }

    public getPrivateIPAddressOfCloudInstance_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getPrivateIPAddressOfCloudInstance_result(getPrivateIPAddressOfCloudInstance_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getPrivateIPAddressOfCloudInstance_result deepCopy() {
      return new getPrivateIPAddressOfCloudInstance_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getPrivateIPAddressOfCloudInstance_result)
        return this.equals((getPrivateIPAddressOfCloudInstance_result)that);
      return false;
    }

    public boolean equals(getPrivateIPAddressOfCloudInstance_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getPrivateIPAddressOfCloudInstance_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getPrivateIPAddressOfCloudInstance_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getPrivateIPAddressOfCloudInstance_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPrivateIPAddressOfCloudInstance_resultStandardScheme getScheme() {
        return new getPrivateIPAddressOfCloudInstance_resultStandardScheme();
      }
    }

    private static class getPrivateIPAddressOfCloudInstance_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getPrivateIPAddressOfCloudInstance_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getPrivateIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getPrivateIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getPrivateIPAddressOfCloudInstance_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getPrivateIPAddressOfCloudInstance_resultTupleScheme getScheme() {
        return new getPrivateIPAddressOfCloudInstance_resultTupleScheme();
      }
    }

    private static class getPrivateIPAddressOfCloudInstance_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getPrivateIPAddressOfCloudInstance_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getPrivateIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getPrivateIPAddressOfCloudInstance_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownCloudCluster_args implements org.apache.thrift.TBase<shutdownCloudCluster_args, shutdownCloudCluster_args._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownCloudCluster_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownCloudCluster_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownCloudCluster_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownCloudCluster_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownCloudCluster_args.class, metaDataMap);
    }

    public shutdownCloudCluster_args() {
    }

    public shutdownCloudCluster_args(
      java.lang.String cloudClusterId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownCloudCluster_args(shutdownCloudCluster_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
    }

    public shutdownCloudCluster_args deepCopy() {
      return new shutdownCloudCluster_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdownCloudCluster_args)
        return this.equals((shutdownCloudCluster_args)that);
      return false;
    }

    public boolean equals(shutdownCloudCluster_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(shutdownCloudCluster_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownCloudCluster_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownCloudCluster_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCloudCluster_argsStandardScheme getScheme() {
        return new shutdownCloudCluster_argsStandardScheme();
      }
    }

    private static class shutdownCloudCluster_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownCloudCluster_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownCloudCluster_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownCloudCluster_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCloudCluster_argsTupleScheme getScheme() {
        return new shutdownCloudCluster_argsTupleScheme();
      }
    }

    private static class shutdownCloudCluster_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownCloudCluster_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownCloudCluster_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class shutdownCloudCluster_result implements org.apache.thrift.TBase<shutdownCloudCluster_result, shutdownCloudCluster_result._Fields>, java.io.Serializable, Cloneable, Comparable<shutdownCloudCluster_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("shutdownCloudCluster_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new shutdownCloudCluster_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new shutdownCloudCluster_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(shutdownCloudCluster_result.class, metaDataMap);
    }

    public shutdownCloudCluster_result() {
    }

    public shutdownCloudCluster_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public shutdownCloudCluster_result(shutdownCloudCluster_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public shutdownCloudCluster_result deepCopy() {
      return new shutdownCloudCluster_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof shutdownCloudCluster_result)
        return this.equals((shutdownCloudCluster_result)that);
      return false;
    }

    public boolean equals(shutdownCloudCluster_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(shutdownCloudCluster_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("shutdownCloudCluster_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class shutdownCloudCluster_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCloudCluster_resultStandardScheme getScheme() {
        return new shutdownCloudCluster_resultStandardScheme();
      }
    }

    private static class shutdownCloudCluster_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<shutdownCloudCluster_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, shutdownCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, shutdownCloudCluster_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class shutdownCloudCluster_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public shutdownCloudCluster_resultTupleScheme getScheme() {
        return new shutdownCloudCluster_resultTupleScheme();
      }
    }

    private static class shutdownCloudCluster_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<shutdownCloudCluster_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, shutdownCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, shutdownCloudCluster_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapDEFIdToCloudInstanceId_args implements org.apache.thrift.TBase<mapDEFIdToCloudInstanceId_args, mapDEFIdToCloudInstanceId_args._Fields>, java.io.Serializable, Cloneable, Comparable<mapDEFIdToCloudInstanceId_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapDEFIdToCloudInstanceId_args");

    private static final org.apache.thrift.protocol.TField CLOUD_CLUSTER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudClusterId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField DEF_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("defId", org.apache.thrift.protocol.TType.STRING, (short)2);
    private static final org.apache.thrift.protocol.TField CLOUD_INSTANCE_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("cloudInstanceId", org.apache.thrift.protocol.TType.STRING, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapDEFIdToCloudInstanceId_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapDEFIdToCloudInstanceId_argsTupleSchemeFactory();

    private java.lang.String cloudClusterId; // required
    private java.lang.String defId; // required
    private java.lang.String cloudInstanceId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      CLOUD_CLUSTER_ID((short)1, "cloudClusterId"),
      DEF_ID((short)2, "defId"),
      CLOUD_INSTANCE_ID((short)3, "cloudInstanceId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // CLOUD_CLUSTER_ID
            return CLOUD_CLUSTER_ID;
          case 2: // DEF_ID
            return DEF_ID;
          case 3: // CLOUD_INSTANCE_ID
            return CLOUD_INSTANCE_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.CLOUD_CLUSTER_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudClusterId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.DEF_ID, new org.apache.thrift.meta_data.FieldMetaData("defId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.CLOUD_INSTANCE_ID, new org.apache.thrift.meta_data.FieldMetaData("cloudInstanceId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapDEFIdToCloudInstanceId_args.class, metaDataMap);
    }

    public mapDEFIdToCloudInstanceId_args() {
    }

    public mapDEFIdToCloudInstanceId_args(
      java.lang.String cloudClusterId,
      java.lang.String defId,
      java.lang.String cloudInstanceId)
    {
      this();
      this.cloudClusterId = cloudClusterId;
      this.defId = defId;
      this.cloudInstanceId = cloudInstanceId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapDEFIdToCloudInstanceId_args(mapDEFIdToCloudInstanceId_args other) {
      if (other.isSetCloudClusterId()) {
        this.cloudClusterId = other.cloudClusterId;
      }
      if (other.isSetDefId()) {
        this.defId = other.defId;
      }
      if (other.isSetCloudInstanceId()) {
        this.cloudInstanceId = other.cloudInstanceId;
      }
    }

    public mapDEFIdToCloudInstanceId_args deepCopy() {
      return new mapDEFIdToCloudInstanceId_args(this);
    }

    @Override
    public void clear() {
      this.cloudClusterId = null;
      this.defId = null;
      this.cloudInstanceId = null;
    }

    public java.lang.String getCloudClusterId() {
      return this.cloudClusterId;
    }

    public void setCloudClusterId(java.lang.String cloudClusterId) {
      this.cloudClusterId = cloudClusterId;
    }

    public void unsetCloudClusterId() {
      this.cloudClusterId = null;
    }

    /** Returns true if field cloudClusterId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudClusterId() {
      return this.cloudClusterId != null;
    }

    public void setCloudClusterIdIsSet(boolean value) {
      if (!value) {
        this.cloudClusterId = null;
      }
    }

    public java.lang.String getDefId() {
      return this.defId;
    }

    public void setDefId(java.lang.String defId) {
      this.defId = defId;
    }

    public void unsetDefId() {
      this.defId = null;
    }

    /** Returns true if field defId is set (has been assigned a value) and false otherwise */
    public boolean isSetDefId() {
      return this.defId != null;
    }

    public void setDefIdIsSet(boolean value) {
      if (!value) {
        this.defId = null;
      }
    }

    public java.lang.String getCloudInstanceId() {
      return this.cloudInstanceId;
    }

    public void setCloudInstanceId(java.lang.String cloudInstanceId) {
      this.cloudInstanceId = cloudInstanceId;
    }

    public void unsetCloudInstanceId() {
      this.cloudInstanceId = null;
    }

    /** Returns true if field cloudInstanceId is set (has been assigned a value) and false otherwise */
    public boolean isSetCloudInstanceId() {
      return this.cloudInstanceId != null;
    }

    public void setCloudInstanceIdIsSet(boolean value) {
      if (!value) {
        this.cloudInstanceId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        if (value == null) {
          unsetCloudClusterId();
        } else {
          setCloudClusterId((java.lang.String)value);
        }
        break;

      case DEF_ID:
        if (value == null) {
          unsetDefId();
        } else {
          setDefId((java.lang.String)value);
        }
        break;

      case CLOUD_INSTANCE_ID:
        if (value == null) {
          unsetCloudInstanceId();
        } else {
          setCloudInstanceId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case CLOUD_CLUSTER_ID:
        return getCloudClusterId();

      case DEF_ID:
        return getDefId();

      case CLOUD_INSTANCE_ID:
        return getCloudInstanceId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case CLOUD_CLUSTER_ID:
        return isSetCloudClusterId();
      case DEF_ID:
        return isSetDefId();
      case CLOUD_INSTANCE_ID:
        return isSetCloudInstanceId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapDEFIdToCloudInstanceId_args)
        return this.equals((mapDEFIdToCloudInstanceId_args)that);
      return false;
    }

    public boolean equals(mapDEFIdToCloudInstanceId_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_cloudClusterId = true && this.isSetCloudClusterId();
      boolean that_present_cloudClusterId = true && that.isSetCloudClusterId();
      if (this_present_cloudClusterId || that_present_cloudClusterId) {
        if (!(this_present_cloudClusterId && that_present_cloudClusterId))
          return false;
        if (!this.cloudClusterId.equals(that.cloudClusterId))
          return false;
      }

      boolean this_present_defId = true && this.isSetDefId();
      boolean that_present_defId = true && that.isSetDefId();
      if (this_present_defId || that_present_defId) {
        if (!(this_present_defId && that_present_defId))
          return false;
        if (!this.defId.equals(that.defId))
          return false;
      }

      boolean this_present_cloudInstanceId = true && this.isSetCloudInstanceId();
      boolean that_present_cloudInstanceId = true && that.isSetCloudInstanceId();
      if (this_present_cloudInstanceId || that_present_cloudInstanceId) {
        if (!(this_present_cloudInstanceId && that_present_cloudInstanceId))
          return false;
        if (!this.cloudInstanceId.equals(that.cloudInstanceId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetCloudClusterId()) ? 131071 : 524287);
      if (isSetCloudClusterId())
        hashCode = hashCode * 8191 + cloudClusterId.hashCode();

      hashCode = hashCode * 8191 + ((isSetDefId()) ? 131071 : 524287);
      if (isSetDefId())
        hashCode = hashCode * 8191 + defId.hashCode();

      hashCode = hashCode * 8191 + ((isSetCloudInstanceId()) ? 131071 : 524287);
      if (isSetCloudInstanceId())
        hashCode = hashCode * 8191 + cloudInstanceId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapDEFIdToCloudInstanceId_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetCloudClusterId()).compareTo(other.isSetCloudClusterId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudClusterId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudClusterId, other.cloudClusterId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetDefId()).compareTo(other.isSetDefId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetDefId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.defId, other.defId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetCloudInstanceId()).compareTo(other.isSetCloudInstanceId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetCloudInstanceId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.cloudInstanceId, other.cloudInstanceId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapDEFIdToCloudInstanceId_args(");
      boolean first = true;

      sb.append("cloudClusterId:");
      if (this.cloudClusterId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudClusterId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("defId:");
      if (this.defId == null) {
        sb.append("null");
      } else {
        sb.append(this.defId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("cloudInstanceId:");
      if (this.cloudInstanceId == null) {
        sb.append("null");
      } else {
        sb.append(this.cloudInstanceId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapDEFIdToCloudInstanceId_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapDEFIdToCloudInstanceId_argsStandardScheme getScheme() {
        return new mapDEFIdToCloudInstanceId_argsStandardScheme();
      }
    }

    private static class mapDEFIdToCloudInstanceId_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapDEFIdToCloudInstanceId_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapDEFIdToCloudInstanceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // CLOUD_CLUSTER_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudClusterId = iprot.readString();
                struct.setCloudClusterIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // DEF_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.defId = iprot.readString();
                struct.setDefIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // CLOUD_INSTANCE_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.cloudInstanceId = iprot.readString();
                struct.setCloudInstanceIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapDEFIdToCloudInstanceId_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.cloudClusterId != null) {
          oprot.writeFieldBegin(CLOUD_CLUSTER_ID_FIELD_DESC);
          oprot.writeString(struct.cloudClusterId);
          oprot.writeFieldEnd();
        }
        if (struct.defId != null) {
          oprot.writeFieldBegin(DEF_ID_FIELD_DESC);
          oprot.writeString(struct.defId);
          oprot.writeFieldEnd();
        }
        if (struct.cloudInstanceId != null) {
          oprot.writeFieldBegin(CLOUD_INSTANCE_ID_FIELD_DESC);
          oprot.writeString(struct.cloudInstanceId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapDEFIdToCloudInstanceId_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapDEFIdToCloudInstanceId_argsTupleScheme getScheme() {
        return new mapDEFIdToCloudInstanceId_argsTupleScheme();
      }
    }

    private static class mapDEFIdToCloudInstanceId_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapDEFIdToCloudInstanceId_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapDEFIdToCloudInstanceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetCloudClusterId()) {
          optionals.set(0);
        }
        if (struct.isSetDefId()) {
          optionals.set(1);
        }
        if (struct.isSetCloudInstanceId()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetCloudClusterId()) {
          oprot.writeString(struct.cloudClusterId);
        }
        if (struct.isSetDefId()) {
          oprot.writeString(struct.defId);
        }
        if (struct.isSetCloudInstanceId()) {
          oprot.writeString(struct.cloudInstanceId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapDEFIdToCloudInstanceId_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.cloudClusterId = iprot.readString();
          struct.setCloudClusterIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.defId = iprot.readString();
          struct.setDefIdIsSet(true);
        }
        if (incoming.get(2)) {
          struct.cloudInstanceId = iprot.readString();
          struct.setCloudInstanceIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class mapDEFIdToCloudInstanceId_result implements org.apache.thrift.TBase<mapDEFIdToCloudInstanceId_result, mapDEFIdToCloudInstanceId_result._Fields>, java.io.Serializable, Cloneable, Comparable<mapDEFIdToCloudInstanceId_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("mapDEFIdToCloudInstanceId_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new mapDEFIdToCloudInstanceId_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new mapDEFIdToCloudInstanceId_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(mapDEFIdToCloudInstanceId_result.class, metaDataMap);
    }

    public mapDEFIdToCloudInstanceId_result() {
    }

    public mapDEFIdToCloudInstanceId_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public mapDEFIdToCloudInstanceId_result(mapDEFIdToCloudInstanceId_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public mapDEFIdToCloudInstanceId_result deepCopy() {
      return new mapDEFIdToCloudInstanceId_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof mapDEFIdToCloudInstanceId_result)
        return this.equals((mapDEFIdToCloudInstanceId_result)that);
      return false;
    }

    public boolean equals(mapDEFIdToCloudInstanceId_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(mapDEFIdToCloudInstanceId_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("mapDEFIdToCloudInstanceId_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class mapDEFIdToCloudInstanceId_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapDEFIdToCloudInstanceId_resultStandardScheme getScheme() {
        return new mapDEFIdToCloudInstanceId_resultStandardScheme();
      }
    }

    private static class mapDEFIdToCloudInstanceId_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<mapDEFIdToCloudInstanceId_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, mapDEFIdToCloudInstanceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, mapDEFIdToCloudInstanceId_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class mapDEFIdToCloudInstanceId_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public mapDEFIdToCloudInstanceId_resultTupleScheme getScheme() {
        return new mapDEFIdToCloudInstanceId_resultTupleScheme();
      }
    }

    private static class mapDEFIdToCloudInstanceId_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<mapDEFIdToCloudInstanceId_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, mapDEFIdToCloudInstanceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, mapDEFIdToCloudInstanceId_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
