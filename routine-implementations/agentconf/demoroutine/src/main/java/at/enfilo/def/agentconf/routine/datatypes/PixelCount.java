/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.agentconf.routine.datatypes;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-10")
public class PixelCount implements org.apache.thrift.TBase<PixelCount, PixelCount._Fields>, java.io.Serializable, Cloneable, Comparable<PixelCount> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("PixelCount");

  private static final org.apache.thrift.protocol.TField _ID_FIELD_DESC = new org.apache.thrift.protocol.TField("_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField COUNT_LIST_FIELD_DESC = new org.apache.thrift.protocol.TField("countList", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField MAX_X_FIELD_DESC = new org.apache.thrift.protocol.TField("maxX", org.apache.thrift.protocol.TType.I16, (short)3);
  private static final org.apache.thrift.protocol.TField MAX_Y_FIELD_DESC = new org.apache.thrift.protocol.TField("maxY", org.apache.thrift.protocol.TType.I16, (short)4);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new PixelCountStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new PixelCountTupleSchemeFactory();

  public String _id; // optional
  public java.util.List<CoordinateCount> countList; // required
  public short maxX; // required
  public short maxY; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    _ID((short)1, "_id"),
    COUNT_LIST((short)2, "countList"),
    MAX_X((short)3, "maxX"),
    MAX_Y((short)4, "maxY");

    private static final java.util.Map<String, _Fields> byName = new java.util.HashMap<String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // _ID
          return _ID;
        case 2: // COUNT_LIST
          return COUNT_LIST;
        case 3: // MAX_X
          return MAX_X;
        case 4: // MAX_Y
          return MAX_Y;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __MAXX_ISSET_ID = 0;
  private static final int __MAXY_ISSET_ID = 1;
  private byte __isset_bitfield = 0;
  private static final _Fields optionals[] = {_Fields._ID};
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields._ID, new org.apache.thrift.meta_data.FieldMetaData("_id", org.apache.thrift.TFieldRequirementType.OPTIONAL,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , "Id")));
    tmpMap.put(_Fields.COUNT_LIST, new org.apache.thrift.meta_data.FieldMetaData("countList", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, CoordinateCount.class))));
    tmpMap.put(_Fields.MAX_X, new org.apache.thrift.meta_data.FieldMetaData("maxX", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.MAX_Y, new org.apache.thrift.meta_data.FieldMetaData("maxY", org.apache.thrift.TFieldRequirementType.DEFAULT,
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(PixelCount.class, metaDataMap);
  }

  public PixelCount() {
    this._id = "9f7e50d0-c042-4c1c-b63b-cdb81a2d8a7b";

  }

  public PixelCount(
    java.util.List<CoordinateCount> countList,
    short maxX,
    short maxY)
  {
    this();
    this.countList = countList;
    this.maxX = maxX;
    setMaxXIsSet(true);
    this.maxY = maxY;
    setMaxYIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public PixelCount(PixelCount other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSet_id()) {
      this._id = other._id;
    }
    if (other.isSetCountList()) {
      java.util.List<CoordinateCount> __this__countList = new java.util.ArrayList<CoordinateCount>(other.countList.size());
      for (CoordinateCount other_element : other.countList) {
        __this__countList.add(new CoordinateCount(other_element));
      }
      this.countList = __this__countList;
    }
    this.maxX = other.maxX;
    this.maxY = other.maxY;
  }

  public PixelCount deepCopy() {
    return new PixelCount(this);
  }

  @Override
  public void clear() {
    this._id = "9f7e50d0-c042-4c1c-b63b-cdb81a2d8a7b";

    this.countList = null;
    setMaxXIsSet(false);
    this.maxX = 0;
    setMaxYIsSet(false);
    this.maxY = 0;
  }

  public String get_id() {
    return this._id;
  }

  public PixelCount set_id(String _id) {
    this._id = _id;
    return this;
  }

  public void unset_id() {
    this._id = null;
  }

  /** Returns true if field _id is set (has been assigned a value) and false otherwise */
  public boolean isSet_id() {
    return this._id != null;
  }

  public void set_idIsSet(boolean value) {
    if (!value) {
      this._id = null;
    }
  }

  public int getCountListSize() {
    return (this.countList == null) ? 0 : this.countList.size();
  }

  public java.util.Iterator<CoordinateCount> getCountListIterator() {
    return (this.countList == null) ? null : this.countList.iterator();
  }

  public void addToCountList(CoordinateCount elem) {
    if (this.countList == null) {
      this.countList = new java.util.ArrayList<CoordinateCount>();
    }
    this.countList.add(elem);
  }

  public java.util.List<CoordinateCount> getCountList() {
    return this.countList;
  }

  public PixelCount setCountList(java.util.List<CoordinateCount> countList) {
    this.countList = countList;
    return this;
  }

  public void unsetCountList() {
    this.countList = null;
  }

  /** Returns true if field countList is set (has been assigned a value) and false otherwise */
  public boolean isSetCountList() {
    return this.countList != null;
  }

  public void setCountListIsSet(boolean value) {
    if (!value) {
      this.countList = null;
    }
  }

  public short getMaxX() {
    return this.maxX;
  }

  public PixelCount setMaxX(short maxX) {
    this.maxX = maxX;
    setMaxXIsSet(true);
    return this;
  }

  public void unsetMaxX() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXX_ISSET_ID);
  }

  /** Returns true if field maxX is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxX() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXX_ISSET_ID);
  }

  public void setMaxXIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXX_ISSET_ID, value);
  }

  public short getMaxY() {
    return this.maxY;
  }

  public PixelCount setMaxY(short maxY) {
    this.maxY = maxY;
    setMaxYIsSet(true);
    return this;
  }

  public void unsetMaxY() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MAXY_ISSET_ID);
  }

  /** Returns true if field maxY is set (has been assigned a value) and false otherwise */
  public boolean isSetMaxY() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MAXY_ISSET_ID);
  }

  public void setMaxYIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MAXY_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case _ID:
      if (value == null) {
        unset_id();
      } else {
        set_id((String)value);
      }
      break;

    case COUNT_LIST:
      if (value == null) {
        unsetCountList();
      } else {
        setCountList((java.util.List<CoordinateCount>)value);
      }
      break;

    case MAX_X:
      if (value == null) {
        unsetMaxX();
      } else {
        setMaxX((Short)value);
      }
      break;

    case MAX_Y:
      if (value == null) {
        unsetMaxY();
      } else {
        setMaxY((Short)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case _ID:
      return get_id();

    case COUNT_LIST:
      return getCountList();

    case MAX_X:
      return getMaxX();

    case MAX_Y:
      return getMaxY();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case _ID:
      return isSet_id();
    case COUNT_LIST:
      return isSetCountList();
    case MAX_X:
      return isSetMaxX();
    case MAX_Y:
      return isSetMaxY();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof PixelCount)
      return this.equals((PixelCount)that);
    return false;
  }

  public boolean equals(PixelCount that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present__id = true && this.isSet_id();
    boolean that_present__id = true && that.isSet_id();
    if (this_present__id || that_present__id) {
      if (!(this_present__id && that_present__id))
        return false;
      if (!this._id.equals(that._id))
        return false;
    }

    boolean this_present_countList = true && this.isSetCountList();
    boolean that_present_countList = true && that.isSetCountList();
    if (this_present_countList || that_present_countList) {
      if (!(this_present_countList && that_present_countList))
        return false;
      if (!this.countList.equals(that.countList))
        return false;
    }

    boolean this_present_maxX = true;
    boolean that_present_maxX = true;
    if (this_present_maxX || that_present_maxX) {
      if (!(this_present_maxX && that_present_maxX))
        return false;
      if (this.maxX != that.maxX)
        return false;
    }

    boolean this_present_maxY = true;
    boolean that_present_maxY = true;
    if (this_present_maxY || that_present_maxY) {
      if (!(this_present_maxY && that_present_maxY))
        return false;
      if (this.maxY != that.maxY)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + ((isSet_id()) ? 131071 : 524287);
    if (isSet_id())
      hashCode = hashCode * 8191 + _id.hashCode();

    hashCode = hashCode * 8191 + ((isSetCountList()) ? 131071 : 524287);
    if (isSetCountList())
      hashCode = hashCode * 8191 + countList.hashCode();

    hashCode = hashCode * 8191 + maxX;

    hashCode = hashCode * 8191 + maxY;

    return hashCode;
  }

  @Override
  public int compareTo(PixelCount other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSet_id()).compareTo(other.isSet_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSet_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this._id, other._id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetCountList()).compareTo(other.isSetCountList());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCountList()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.countList, other.countList);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxX()).compareTo(other.isSetMaxX());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxX()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxX, other.maxX);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMaxY()).compareTo(other.isSetMaxY());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMaxY()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxY, other.maxY);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("PixelCount(");
    boolean first = true;

    if (isSet_id()) {
      sb.append("_id:");
      if (this._id == null) {
        sb.append("null");
      } else {
        sb.append(this._id);
      }
      first = false;
    }
    if (!first) sb.append(", ");
    sb.append("countList:");
    if (this.countList == null) {
      sb.append("null");
    } else {
      sb.append(this.countList);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxX:");
    sb.append(this.maxX);
    first = false;
    if (!first) sb.append(", ");
    sb.append("maxY:");
    sb.append(this.maxY);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class PixelCountStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PixelCountStandardScheme getScheme() {
      return new PixelCountStandardScheme();
    }
  }

  private static class PixelCountStandardScheme extends org.apache.thrift.scheme.StandardScheme<PixelCount> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, PixelCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // _ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct._id = iprot.readString();
              struct.set_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // COUNT_LIST
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                struct.countList = new java.util.ArrayList<CoordinateCount>(_list0.size);
                CoordinateCount _elem1;
                for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                {
                  _elem1 = new CoordinateCount();
                  _elem1.read(iprot);
                  struct.countList.add(_elem1);
                }
                iprot.readListEnd();
              }
              struct.setCountListIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // MAX_X
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxX = iprot.readI16();
              struct.setMaxXIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // MAX_Y
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.maxY = iprot.readI16();
              struct.setMaxYIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, PixelCount struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct._id != null) {
        if (struct.isSet_id()) {
          oprot.writeFieldBegin(_ID_FIELD_DESC);
          oprot.writeString(struct._id);
          oprot.writeFieldEnd();
        }
      }
      if (struct.countList != null) {
        oprot.writeFieldBegin(COUNT_LIST_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.countList.size()));
          for (CoordinateCount _iter3 : struct.countList)
          {
            _iter3.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(MAX_X_FIELD_DESC);
      oprot.writeI16(struct.maxX);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MAX_Y_FIELD_DESC);
      oprot.writeI16(struct.maxY);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class PixelCountTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public PixelCountTupleScheme getScheme() {
      return new PixelCountTupleScheme();
    }
  }

  private static class PixelCountTupleScheme extends org.apache.thrift.scheme.TupleScheme<PixelCount> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, PixelCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSet_id()) {
        optionals.set(0);
      }
      if (struct.isSetCountList()) {
        optionals.set(1);
      }
      if (struct.isSetMaxX()) {
        optionals.set(2);
      }
      if (struct.isSetMaxY()) {
        optionals.set(3);
      }
      oprot.writeBitSet(optionals, 4);
      if (struct.isSet_id()) {
        oprot.writeString(struct._id);
      }
      if (struct.isSetCountList()) {
        {
          oprot.writeI32(struct.countList.size());
          for (CoordinateCount _iter4 : struct.countList)
          {
            _iter4.write(oprot);
          }
        }
      }
      if (struct.isSetMaxX()) {
        oprot.writeI16(struct.maxX);
      }
      if (struct.isSetMaxY()) {
        oprot.writeI16(struct.maxY);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, PixelCount struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(4);
      if (incoming.get(0)) {
        struct._id = iprot.readString();
        struct.set_idIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
          struct.countList = new java.util.ArrayList<CoordinateCount>(_list5.size);
          CoordinateCount _elem6;
          for (int _i7 = 0; _i7 < _list5.size; ++_i7)
          {
            _elem6 = new CoordinateCount();
            _elem6.read(iprot);
            struct.countList.add(_elem6);
          }
        }
        struct.setCountListIsSet(true);
      }
      if (incoming.get(2)) {
        struct.maxX = iprot.readI16();
        struct.setMaxXIsSet(true);
      }
      if (incoming.get(3)) {
        struct.maxY = iprot.readI16();
        struct.setMaxYIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

