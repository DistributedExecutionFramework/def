apply plugin: 'application'

dependencies {
    compile project(':client-routine-worker-api')
    compile project(':node')

    testCompile project(':demo-routines')
}

mainClassName = 'at.enfilo.def.clientroutine.worker.server.ClientRoutineWorker'

shadowJar {
    exclude 'client-routine-worker.yml'
    exclude 'demo-routines.jar'
    exclude 'log4j2.xml'
}

jar {
    exclude '**/demo-routines.jar'
}

remotes {
    defHost {
        host = 'localhost'
        user = 'def'
        password = 'def'
    }
}

// run 'gradle deploy -Phost=<ip>'
task deploy {
    doLast {
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            String host = project.getProperties().get('host')
            remotes.defHost.host = host

            println 'Try to deploy on ' + remotes.defHost.host

            session(remotes.defHost) {
                executeScript file('src/main/sh/stop.sh')
                executeScript file('src/main/sh/clean.sh')
                copy {
                    from "$buildDir/libs"
                    from "$buildDir/resources/main"
                    into "$buildDir/client-routine-worker/"
                }
                put from: "$buildDir/client-routine-worker", into: "."
                executeScript file('src/main/sh/start.sh')
            }
        }
    }
}

task restart {
    doLast {
        ssh.run {
            settings {
                knownHosts = allowAnyHosts
            }

            String host = project.getProperties().get('host')
            remotes.defHost.host = host

            println 'Try to restart on ' + remotes.defHost
            session(remotes.defHost) {
                executeScript file('src/main/sh/stop.sh')
                executeScript file('src/main/sh/start.sh')
            }
        }
    }
}

deploy.dependsOn shadowJar

compileTestJava.dependsOn copyDemoRoutines
copyDemoRoutines.dependsOn project(':demo-routines').shadowJar
