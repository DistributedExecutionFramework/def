/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package at.enfilo.def.clientroutine.worker.api.thrift;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2019-01-10")
public class ClientRoutineWorkerService {

  public interface Iface extends at.enfilo.def.node.api.thrift.NodeService.Iface {

    /**
     * Requests all queued programs with client routines.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param qId
     */
    public java.lang.String getQueuedPrograms(java.lang.String qId) throws org.apache.thrift.TException;

    /**
     * Queues a program with a client routine.
     * Returns a ticket id, state of ticket is available over TicketService interface.
     * 
     * 
     * @param qId
     * @param program
     */
    public java.lang.String queueProgram(java.lang.String qId, at.enfilo.def.transfer.dto.ProgramDTO program) throws org.apache.thrift.TException;

    /**
     * Queues a list of programs with a client routine.
     * Returns a ticket id, state of ticket is available over TicketService interface.
     * 
     * 
     * @param qId
     * @param programs
     */
    public java.lang.String queuePrograms(java.lang.String qId, java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs) throws org.apache.thrift.TException;

    /**
     * Moves a list of programs to another node.
     * Returns a ticket id, state of ticket is available over TicketService interface.
     * 
     * 
     * @param qId
     * @param programIds
     * @param targetNodeEndpoint
     */
    public java.lang.String movePrograms(java.lang.String qId, java.util.List<java.lang.String> programIds, at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint) throws org.apache.thrift.TException;

    /**
     * Moves all programs to another node.
     * Returns a ticket id, state of ticket is available over TicketService interface.
     * 
     * 
     * @param targetNodeEnpoint
     */
    public java.lang.String moveAllPrograms(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint) throws org.apache.thrift.TException;

    /**
     * Fetches and removes a finished program with a client routine from this node.
     * Returns a ticket id, state of ticket is available over TicketService interface, real result over Response interface.
     * 
     * 
     * @param pId
     */
    public java.lang.String fetchFinishedProgram(java.lang.String pId) throws org.apache.thrift.TException;

    /**
     * Aborts the program with the given id.
     * Returns a ticket id, state of ticket is available over TicketService interface.
     * 
     * 
     * @param pId
     */
    public java.lang.String abortProgram(java.lang.String pId) throws org.apache.thrift.TException;

  }

  public interface AsyncIface extends at.enfilo.def.node.api.thrift.NodeService .AsyncIface {

    public void getQueuedPrograms(java.lang.String qId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void queueProgram(java.lang.String qId, at.enfilo.def.transfer.dto.ProgramDTO program, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void queuePrograms(java.lang.String qId, java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void movePrograms(java.lang.String qId, java.util.List<java.lang.String> programIds, at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void moveAllPrograms(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void fetchFinishedProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

    public void abortProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException;

  }

  public static class Client extends at.enfilo.def.node.api.thrift.NodeService.Client implements Iface {
    public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
      public Factory() {}
      public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
        return new Client(prot);
      }
      public Client getClient(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
        return new Client(iprot, oprot);
      }
    }

    public Client(org.apache.thrift.protocol.TProtocol prot)
    {
      super(prot, prot);
    }

    public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
      super(iprot, oprot);
    }

    public java.lang.String getQueuedPrograms(java.lang.String qId) throws org.apache.thrift.TException
    {
      send_getQueuedPrograms(qId);
      return recv_getQueuedPrograms();
    }

    public void send_getQueuedPrograms(java.lang.String qId) throws org.apache.thrift.TException
    {
      getQueuedPrograms_args args = new getQueuedPrograms_args();
      args.setQId(qId);
      sendBase("getQueuedPrograms", args);
    }

    public java.lang.String recv_getQueuedPrograms() throws org.apache.thrift.TException
    {
      getQueuedPrograms_result result = new getQueuedPrograms_result();
      receiveBase(result, "getQueuedPrograms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "getQueuedPrograms failed: unknown result");
    }

    public java.lang.String queueProgram(java.lang.String qId, at.enfilo.def.transfer.dto.ProgramDTO program) throws org.apache.thrift.TException
    {
      send_queueProgram(qId, program);
      return recv_queueProgram();
    }

    public void send_queueProgram(java.lang.String qId, at.enfilo.def.transfer.dto.ProgramDTO program) throws org.apache.thrift.TException
    {
      queueProgram_args args = new queueProgram_args();
      args.setQId(qId);
      args.setProgram(program);
      sendBase("queueProgram", args);
    }

    public java.lang.String recv_queueProgram() throws org.apache.thrift.TException
    {
      queueProgram_result result = new queueProgram_result();
      receiveBase(result, "queueProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queueProgram failed: unknown result");
    }

    public java.lang.String queuePrograms(java.lang.String qId, java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs) throws org.apache.thrift.TException
    {
      send_queuePrograms(qId, programs);
      return recv_queuePrograms();
    }

    public void send_queuePrograms(java.lang.String qId, java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs) throws org.apache.thrift.TException
    {
      queuePrograms_args args = new queuePrograms_args();
      args.setQId(qId);
      args.setPrograms(programs);
      sendBase("queuePrograms", args);
    }

    public java.lang.String recv_queuePrograms() throws org.apache.thrift.TException
    {
      queuePrograms_result result = new queuePrograms_result();
      receiveBase(result, "queuePrograms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "queuePrograms failed: unknown result");
    }

    public java.lang.String movePrograms(java.lang.String qId, java.util.List<java.lang.String> programIds, at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint) throws org.apache.thrift.TException
    {
      send_movePrograms(qId, programIds, targetNodeEndpoint);
      return recv_movePrograms();
    }

    public void send_movePrograms(java.lang.String qId, java.util.List<java.lang.String> programIds, at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint) throws org.apache.thrift.TException
    {
      movePrograms_args args = new movePrograms_args();
      args.setQId(qId);
      args.setProgramIds(programIds);
      args.setTargetNodeEndpoint(targetNodeEndpoint);
      sendBase("movePrograms", args);
    }

    public java.lang.String recv_movePrograms() throws org.apache.thrift.TException
    {
      movePrograms_result result = new movePrograms_result();
      receiveBase(result, "movePrograms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "movePrograms failed: unknown result");
    }

    public java.lang.String moveAllPrograms(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint) throws org.apache.thrift.TException
    {
      send_moveAllPrograms(targetNodeEnpoint);
      return recv_moveAllPrograms();
    }

    public void send_moveAllPrograms(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint) throws org.apache.thrift.TException
    {
      moveAllPrograms_args args = new moveAllPrograms_args();
      args.setTargetNodeEnpoint(targetNodeEnpoint);
      sendBase("moveAllPrograms", args);
    }

    public java.lang.String recv_moveAllPrograms() throws org.apache.thrift.TException
    {
      moveAllPrograms_result result = new moveAllPrograms_result();
      receiveBase(result, "moveAllPrograms");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "moveAllPrograms failed: unknown result");
    }

    public java.lang.String fetchFinishedProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_fetchFinishedProgram(pId);
      return recv_fetchFinishedProgram();
    }

    public void send_fetchFinishedProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      fetchFinishedProgram_args args = new fetchFinishedProgram_args();
      args.setPId(pId);
      sendBase("fetchFinishedProgram", args);
    }

    public java.lang.String recv_fetchFinishedProgram() throws org.apache.thrift.TException
    {
      fetchFinishedProgram_result result = new fetchFinishedProgram_result();
      receiveBase(result, "fetchFinishedProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "fetchFinishedProgram failed: unknown result");
    }

    public java.lang.String abortProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      send_abortProgram(pId);
      return recv_abortProgram();
    }

    public void send_abortProgram(java.lang.String pId) throws org.apache.thrift.TException
    {
      abortProgram_args args = new abortProgram_args();
      args.setPId(pId);
      sendBase("abortProgram", args);
    }

    public java.lang.String recv_abortProgram() throws org.apache.thrift.TException
    {
      abortProgram_result result = new abortProgram_result();
      receiveBase(result, "abortProgram");
      if (result.isSetSuccess()) {
        return result.success;
      }
      throw new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.MISSING_RESULT, "abortProgram failed: unknown result");
    }

  }
  public static class AsyncClient extends at.enfilo.def.node.api.thrift.NodeService.AsyncClient implements AsyncIface {
    public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
      private org.apache.thrift.async.TAsyncClientManager clientManager;
      private org.apache.thrift.protocol.TProtocolFactory protocolFactory;
      public Factory(org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
        this.clientManager = clientManager;
        this.protocolFactory = protocolFactory;
      }
      public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
        return new AsyncClient(protocolFactory, clientManager, transport);
      }
    }

    public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.async.TAsyncClientManager clientManager, org.apache.thrift.transport.TNonblockingTransport transport) {
      super(protocolFactory, clientManager, transport);
    }

    public void getQueuedPrograms(java.lang.String qId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      getQueuedPrograms_call method_call = new getQueuedPrograms_call(qId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class getQueuedPrograms_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String qId;
      public getQueuedPrograms_call(java.lang.String qId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qId = qId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("getQueuedPrograms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        getQueuedPrograms_args args = new getQueuedPrograms_args();
        args.setQId(qId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_getQueuedPrograms();
      }
    }

    public void queueProgram(java.lang.String qId, at.enfilo.def.transfer.dto.ProgramDTO program, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queueProgram_call method_call = new queueProgram_call(qId, program, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queueProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String qId;
      private at.enfilo.def.transfer.dto.ProgramDTO program;
      public queueProgram_call(java.lang.String qId, at.enfilo.def.transfer.dto.ProgramDTO program, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qId = qId;
        this.program = program;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queueProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queueProgram_args args = new queueProgram_args();
        args.setQId(qId);
        args.setProgram(program);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queueProgram();
      }
    }

    public void queuePrograms(java.lang.String qId, java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      queuePrograms_call method_call = new queuePrograms_call(qId, programs, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class queuePrograms_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String qId;
      private java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs;
      public queuePrograms_call(java.lang.String qId, java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qId = qId;
        this.programs = programs;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("queuePrograms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        queuePrograms_args args = new queuePrograms_args();
        args.setQId(qId);
        args.setPrograms(programs);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_queuePrograms();
      }
    }

    public void movePrograms(java.lang.String qId, java.util.List<java.lang.String> programIds, at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      movePrograms_call method_call = new movePrograms_call(qId, programIds, targetNodeEndpoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class movePrograms_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String qId;
      private java.util.List<java.lang.String> programIds;
      private at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint;
      public movePrograms_call(java.lang.String qId, java.util.List<java.lang.String> programIds, at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.qId = qId;
        this.programIds = programIds;
        this.targetNodeEndpoint = targetNodeEndpoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("movePrograms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        movePrograms_args args = new movePrograms_args();
        args.setQId(qId);
        args.setProgramIds(programIds);
        args.setTargetNodeEndpoint(targetNodeEndpoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_movePrograms();
      }
    }

    public void moveAllPrograms(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      moveAllPrograms_call method_call = new moveAllPrograms_call(targetNodeEnpoint, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class moveAllPrograms_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint;
      public moveAllPrograms_call(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.targetNodeEnpoint = targetNodeEnpoint;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("moveAllPrograms", org.apache.thrift.protocol.TMessageType.CALL, 0));
        moveAllPrograms_args args = new moveAllPrograms_args();
        args.setTargetNodeEnpoint(targetNodeEnpoint);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_moveAllPrograms();
      }
    }

    public void fetchFinishedProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      fetchFinishedProgram_call method_call = new fetchFinishedProgram_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class fetchFinishedProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public fetchFinishedProgram_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("fetchFinishedProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        fetchFinishedProgram_args args = new fetchFinishedProgram_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_fetchFinishedProgram();
      }
    }

    public void abortProgram(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
      checkReady();
      abortProgram_call method_call = new abortProgram_call(pId, resultHandler, this, ___protocolFactory, ___transport);
      this.___currentMethod = method_call;
      ___manager.call(method_call);
    }

    public static class abortProgram_call extends org.apache.thrift.async.TAsyncMethodCall<java.lang.String> {
      private java.lang.String pId;
      public abortProgram_call(java.lang.String pId, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler, org.apache.thrift.async.TAsyncClient client, org.apache.thrift.protocol.TProtocolFactory protocolFactory, org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
        super(client, protocolFactory, transport, resultHandler, false);
        this.pId = pId;
      }

      public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
        prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("abortProgram", org.apache.thrift.protocol.TMessageType.CALL, 0));
        abortProgram_args args = new abortProgram_args();
        args.setPId(pId);
        args.write(prot);
        prot.writeMessageEnd();
      }

      public java.lang.String getResult() throws org.apache.thrift.TException {
        if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
          throw new java.lang.IllegalStateException("Method call not finished!");
        }
        org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(getFrameBuffer().array());
        org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
        return (new Client(prot)).recv_abortProgram();
      }
    }

  }

  public static class Processor<I extends Iface> extends at.enfilo.def.node.api.thrift.NodeService.Processor<I> implements org.apache.thrift.TProcessor {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());
    public Processor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
    }

    protected Processor(I iface, java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends Iface> java.util.Map<java.lang.String,  org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends  org.apache.thrift.TBase>> processMap) {
      processMap.put("getQueuedPrograms", new getQueuedPrograms());
      processMap.put("queueProgram", new queueProgram());
      processMap.put("queuePrograms", new queuePrograms());
      processMap.put("movePrograms", new movePrograms());
      processMap.put("moveAllPrograms", new moveAllPrograms());
      processMap.put("fetchFinishedProgram", new fetchFinishedProgram());
      processMap.put("abortProgram", new abortProgram());
      return processMap;
    }

    public static class getQueuedPrograms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, getQueuedPrograms_args> {
      public getQueuedPrograms() {
        super("getQueuedPrograms");
      }

      public getQueuedPrograms_args getEmptyArgsInstance() {
        return new getQueuedPrograms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public getQueuedPrograms_result getResult(I iface, getQueuedPrograms_args args) throws org.apache.thrift.TException {
        getQueuedPrograms_result result = new getQueuedPrograms_result();
        result.success = iface.getQueuedPrograms(args.qId);
        return result;
      }
    }

    public static class queueProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queueProgram_args> {
      public queueProgram() {
        super("queueProgram");
      }

      public queueProgram_args getEmptyArgsInstance() {
        return new queueProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queueProgram_result getResult(I iface, queueProgram_args args) throws org.apache.thrift.TException {
        queueProgram_result result = new queueProgram_result();
        result.success = iface.queueProgram(args.qId, args.program);
        return result;
      }
    }

    public static class queuePrograms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, queuePrograms_args> {
      public queuePrograms() {
        super("queuePrograms");
      }

      public queuePrograms_args getEmptyArgsInstance() {
        return new queuePrograms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public queuePrograms_result getResult(I iface, queuePrograms_args args) throws org.apache.thrift.TException {
        queuePrograms_result result = new queuePrograms_result();
        result.success = iface.queuePrograms(args.qId, args.programs);
        return result;
      }
    }

    public static class movePrograms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, movePrograms_args> {
      public movePrograms() {
        super("movePrograms");
      }

      public movePrograms_args getEmptyArgsInstance() {
        return new movePrograms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public movePrograms_result getResult(I iface, movePrograms_args args) throws org.apache.thrift.TException {
        movePrograms_result result = new movePrograms_result();
        result.success = iface.movePrograms(args.qId, args.programIds, args.targetNodeEndpoint);
        return result;
      }
    }

    public static class moveAllPrograms<I extends Iface> extends org.apache.thrift.ProcessFunction<I, moveAllPrograms_args> {
      public moveAllPrograms() {
        super("moveAllPrograms");
      }

      public moveAllPrograms_args getEmptyArgsInstance() {
        return new moveAllPrograms_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public moveAllPrograms_result getResult(I iface, moveAllPrograms_args args) throws org.apache.thrift.TException {
        moveAllPrograms_result result = new moveAllPrograms_result();
        result.success = iface.moveAllPrograms(args.targetNodeEnpoint);
        return result;
      }
    }

    public static class fetchFinishedProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, fetchFinishedProgram_args> {
      public fetchFinishedProgram() {
        super("fetchFinishedProgram");
      }

      public fetchFinishedProgram_args getEmptyArgsInstance() {
        return new fetchFinishedProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public fetchFinishedProgram_result getResult(I iface, fetchFinishedProgram_args args) throws org.apache.thrift.TException {
        fetchFinishedProgram_result result = new fetchFinishedProgram_result();
        result.success = iface.fetchFinishedProgram(args.pId);
        return result;
      }
    }

    public static class abortProgram<I extends Iface> extends org.apache.thrift.ProcessFunction<I, abortProgram_args> {
      public abortProgram() {
        super("abortProgram");
      }

      public abortProgram_args getEmptyArgsInstance() {
        return new abortProgram_args();
      }

      protected boolean isOneway() {
        return false;
      }

      @Override
      protected boolean handleRuntimeExceptions() {
        return false;
      }

      public abortProgram_result getResult(I iface, abortProgram_args args) throws org.apache.thrift.TException {
        abortProgram_result result = new abortProgram_result();
        result.success = iface.abortProgram(args.pId);
        return result;
      }
    }

  }

  public static class AsyncProcessor<I extends AsyncIface> extends at.enfilo.def.node.api.thrift.NodeService.AsyncProcessor<I> {
    private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(AsyncProcessor.class.getName());
    public AsyncProcessor(I iface) {
      super(iface, getProcessMap(new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
    }

    protected AsyncProcessor(I iface, java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      super(iface, getProcessMap(processMap));
    }

    private static <I extends AsyncIface> java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase,?>> getProcessMap(java.util.Map<java.lang.String,  org.apache.thrift.AsyncProcessFunction<I, ? extends  org.apache.thrift.TBase, ?>> processMap) {
      processMap.put("getQueuedPrograms", new getQueuedPrograms());
      processMap.put("queueProgram", new queueProgram());
      processMap.put("queuePrograms", new queuePrograms());
      processMap.put("movePrograms", new movePrograms());
      processMap.put("moveAllPrograms", new moveAllPrograms());
      processMap.put("fetchFinishedProgram", new fetchFinishedProgram());
      processMap.put("abortProgram", new abortProgram());
      return processMap;
    }

    public static class getQueuedPrograms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, getQueuedPrograms_args, java.lang.String> {
      public getQueuedPrograms() {
        super("getQueuedPrograms");
      }

      public getQueuedPrograms_args getEmptyArgsInstance() {
        return new getQueuedPrograms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            getQueuedPrograms_result result = new getQueuedPrograms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            getQueuedPrograms_result result = new getQueuedPrograms_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, getQueuedPrograms_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.getQueuedPrograms(args.qId,resultHandler);
      }
    }

    public static class queueProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queueProgram_args, java.lang.String> {
      public queueProgram() {
        super("queueProgram");
      }

      public queueProgram_args getEmptyArgsInstance() {
        return new queueProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            queueProgram_result result = new queueProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queueProgram_result result = new queueProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queueProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.queueProgram(args.qId, args.program,resultHandler);
      }
    }

    public static class queuePrograms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, queuePrograms_args, java.lang.String> {
      public queuePrograms() {
        super("queuePrograms");
      }

      public queuePrograms_args getEmptyArgsInstance() {
        return new queuePrograms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            queuePrograms_result result = new queuePrograms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            queuePrograms_result result = new queuePrograms_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, queuePrograms_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.queuePrograms(args.qId, args.programs,resultHandler);
      }
    }

    public static class movePrograms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, movePrograms_args, java.lang.String> {
      public movePrograms() {
        super("movePrograms");
      }

      public movePrograms_args getEmptyArgsInstance() {
        return new movePrograms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            movePrograms_result result = new movePrograms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            movePrograms_result result = new movePrograms_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, movePrograms_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.movePrograms(args.qId, args.programIds, args.targetNodeEndpoint,resultHandler);
      }
    }

    public static class moveAllPrograms<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, moveAllPrograms_args, java.lang.String> {
      public moveAllPrograms() {
        super("moveAllPrograms");
      }

      public moveAllPrograms_args getEmptyArgsInstance() {
        return new moveAllPrograms_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            moveAllPrograms_result result = new moveAllPrograms_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            moveAllPrograms_result result = new moveAllPrograms_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, moveAllPrograms_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.moveAllPrograms(args.targetNodeEnpoint,resultHandler);
      }
    }

    public static class fetchFinishedProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, fetchFinishedProgram_args, java.lang.String> {
      public fetchFinishedProgram() {
        super("fetchFinishedProgram");
      }

      public fetchFinishedProgram_args getEmptyArgsInstance() {
        return new fetchFinishedProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            fetchFinishedProgram_result result = new fetchFinishedProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            fetchFinishedProgram_result result = new fetchFinishedProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, fetchFinishedProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.fetchFinishedProgram(args.pId,resultHandler);
      }
    }

    public static class abortProgram<I extends AsyncIface> extends org.apache.thrift.AsyncProcessFunction<I, abortProgram_args, java.lang.String> {
      public abortProgram() {
        super("abortProgram");
      }

      public abortProgram_args getEmptyArgsInstance() {
        return new abortProgram_args();
      }

      public org.apache.thrift.async.AsyncMethodCallback<java.lang.String> getResultHandler(final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
        final org.apache.thrift.AsyncProcessFunction fcall = this;
        return new org.apache.thrift.async.AsyncMethodCallback<java.lang.String>() { 
          public void onComplete(java.lang.String o) {
            abortProgram_result result = new abortProgram_result();
            result.success = o;
            try {
              fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY,seqid);
            } catch (org.apache.thrift.transport.TTransportException e) {
              _LOGGER.error("TTransportException writing to internal frame buffer", e);
              fb.close();
            } catch (java.lang.Exception e) {
              _LOGGER.error("Exception writing to internal frame buffer", e);
              onError(e);
            }
          }
          public void onError(java.lang.Exception e) {
            byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
            org.apache.thrift.TSerializable msg;
            abortProgram_result result = new abortProgram_result();
            if (e instanceof org.apache.thrift.transport.TTransportException) {
              _LOGGER.error("TTransportException inside handler", e);
              fb.close();
              return;
            } else if (e instanceof org.apache.thrift.TApplicationException) {
              _LOGGER.error("TApplicationException inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = (org.apache.thrift.TApplicationException)e;
            } else {
              _LOGGER.error("Exception inside handler", e);
              msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
              msg = new org.apache.thrift.TApplicationException(org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
            }
            try {
              fcall.sendResponse(fb,msg,msgType,seqid);
            } catch (java.lang.Exception ex) {
              _LOGGER.error("Exception writing to internal frame buffer", ex);
              fb.close();
            }
          }
        };
      }

      protected boolean isOneway() {
        return false;
      }

      public void start(I iface, abortProgram_args args, org.apache.thrift.async.AsyncMethodCallback<java.lang.String> resultHandler) throws org.apache.thrift.TException {
        iface.abortProgram(args.pId,resultHandler);
      }
    }

  }

  public static class getQueuedPrograms_args implements org.apache.thrift.TBase<getQueuedPrograms_args, getQueuedPrograms_args._Fields>, java.io.Serializable, Cloneable, Comparable<getQueuedPrograms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueuedPrograms_args");

    private static final org.apache.thrift.protocol.TField Q_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQueuedPrograms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQueuedPrograms_argsTupleSchemeFactory();

    private java.lang.String qId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q_ID((short)1, "qId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q_ID
            return Q_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q_ID, new org.apache.thrift.meta_data.FieldMetaData("qId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueuedPrograms_args.class, metaDataMap);
    }

    public getQueuedPrograms_args() {
    }

    public getQueuedPrograms_args(
      java.lang.String qId)
    {
      this();
      this.qId = qId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQueuedPrograms_args(getQueuedPrograms_args other) {
      if (other.isSetQId()) {
        this.qId = other.qId;
      }
    }

    public getQueuedPrograms_args deepCopy() {
      return new getQueuedPrograms_args(this);
    }

    @Override
    public void clear() {
      this.qId = null;
    }

    public java.lang.String getQId() {
      return this.qId;
    }

    public void setQId(java.lang.String qId) {
      this.qId = qId;
    }

    public void unsetQId() {
      this.qId = null;
    }

    /** Returns true if field qId is set (has been assigned a value) and false otherwise */
    public boolean isSetQId() {
      return this.qId != null;
    }

    public void setQIdIsSet(boolean value) {
      if (!value) {
        this.qId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case Q_ID:
        if (value == null) {
          unsetQId();
        } else {
          setQId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case Q_ID:
        return getQId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case Q_ID:
        return isSetQId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQueuedPrograms_args)
        return this.equals((getQueuedPrograms_args)that);
      return false;
    }

    public boolean equals(getQueuedPrograms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qId = true && this.isSetQId();
      boolean that_present_qId = true && that.isSetQId();
      if (this_present_qId || that_present_qId) {
        if (!(this_present_qId && that_present_qId))
          return false;
        if (!this.qId.equals(that.qId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQId()) ? 131071 : 524287);
      if (isSetQId())
        hashCode = hashCode * 8191 + qId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQueuedPrograms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQId()).compareTo(other.isSetQId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qId, other.qId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQueuedPrograms_args(");
      boolean first = true;

      sb.append("qId:");
      if (this.qId == null) {
        sb.append("null");
      } else {
        sb.append(this.qId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQueuedPrograms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQueuedPrograms_argsStandardScheme getScheme() {
        return new getQueuedPrograms_argsStandardScheme();
      }
    }

    private static class getQueuedPrograms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQueuedPrograms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQueuedPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qId = iprot.readString();
                struct.setQIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQueuedPrograms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qId != null) {
          oprot.writeFieldBegin(Q_ID_FIELD_DESC);
          oprot.writeString(struct.qId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQueuedPrograms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQueuedPrograms_argsTupleScheme getScheme() {
        return new getQueuedPrograms_argsTupleScheme();
      }
    }

    private static class getQueuedPrograms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQueuedPrograms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQueuedPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetQId()) {
          oprot.writeString(struct.qId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQueuedPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.qId = iprot.readString();
          struct.setQIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class getQueuedPrograms_result implements org.apache.thrift.TBase<getQueuedPrograms_result, getQueuedPrograms_result._Fields>, java.io.Serializable, Cloneable, Comparable<getQueuedPrograms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("getQueuedPrograms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new getQueuedPrograms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new getQueuedPrograms_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(getQueuedPrograms_result.class, metaDataMap);
    }

    public getQueuedPrograms_result() {
    }

    public getQueuedPrograms_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public getQueuedPrograms_result(getQueuedPrograms_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public getQueuedPrograms_result deepCopy() {
      return new getQueuedPrograms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof getQueuedPrograms_result)
        return this.equals((getQueuedPrograms_result)that);
      return false;
    }

    public boolean equals(getQueuedPrograms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(getQueuedPrograms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("getQueuedPrograms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class getQueuedPrograms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQueuedPrograms_resultStandardScheme getScheme() {
        return new getQueuedPrograms_resultStandardScheme();
      }
    }

    private static class getQueuedPrograms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<getQueuedPrograms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, getQueuedPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, getQueuedPrograms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class getQueuedPrograms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public getQueuedPrograms_resultTupleScheme getScheme() {
        return new getQueuedPrograms_resultTupleScheme();
      }
    }

    private static class getQueuedPrograms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<getQueuedPrograms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, getQueuedPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, getQueuedPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queueProgram_args implements org.apache.thrift.TBase<queueProgram_args, queueProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<queueProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueProgram_args");

    private static final org.apache.thrift.protocol.TField Q_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROGRAM_FIELD_DESC = new org.apache.thrift.protocol.TField("program", org.apache.thrift.protocol.TType.STRUCT, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queueProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queueProgram_argsTupleSchemeFactory();

    private java.lang.String qId; // required
    private at.enfilo.def.transfer.dto.ProgramDTO program; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q_ID((short)1, "qId"),
      PROGRAM((short)2, "program");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q_ID
            return Q_ID;
          case 2: // PROGRAM
            return PROGRAM;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q_ID, new org.apache.thrift.meta_data.FieldMetaData("qId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PROGRAM, new org.apache.thrift.meta_data.FieldMetaData("program", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.ProgramDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueProgram_args.class, metaDataMap);
    }

    public queueProgram_args() {
    }

    public queueProgram_args(
      java.lang.String qId,
      at.enfilo.def.transfer.dto.ProgramDTO program)
    {
      this();
      this.qId = qId;
      this.program = program;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueProgram_args(queueProgram_args other) {
      if (other.isSetQId()) {
        this.qId = other.qId;
      }
      if (other.isSetProgram()) {
        this.program = new at.enfilo.def.transfer.dto.ProgramDTO(other.program);
      }
    }

    public queueProgram_args deepCopy() {
      return new queueProgram_args(this);
    }

    @Override
    public void clear() {
      this.qId = null;
      this.program = null;
    }

    public java.lang.String getQId() {
      return this.qId;
    }

    public void setQId(java.lang.String qId) {
      this.qId = qId;
    }

    public void unsetQId() {
      this.qId = null;
    }

    /** Returns true if field qId is set (has been assigned a value) and false otherwise */
    public boolean isSetQId() {
      return this.qId != null;
    }

    public void setQIdIsSet(boolean value) {
      if (!value) {
        this.qId = null;
      }
    }

    public at.enfilo.def.transfer.dto.ProgramDTO getProgram() {
      return this.program;
    }

    public void setProgram(at.enfilo.def.transfer.dto.ProgramDTO program) {
      this.program = program;
    }

    public void unsetProgram() {
      this.program = null;
    }

    /** Returns true if field program is set (has been assigned a value) and false otherwise */
    public boolean isSetProgram() {
      return this.program != null;
    }

    public void setProgramIsSet(boolean value) {
      if (!value) {
        this.program = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case Q_ID:
        if (value == null) {
          unsetQId();
        } else {
          setQId((java.lang.String)value);
        }
        break;

      case PROGRAM:
        if (value == null) {
          unsetProgram();
        } else {
          setProgram((at.enfilo.def.transfer.dto.ProgramDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case Q_ID:
        return getQId();

      case PROGRAM:
        return getProgram();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case Q_ID:
        return isSetQId();
      case PROGRAM:
        return isSetProgram();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queueProgram_args)
        return this.equals((queueProgram_args)that);
      return false;
    }

    public boolean equals(queueProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qId = true && this.isSetQId();
      boolean that_present_qId = true && that.isSetQId();
      if (this_present_qId || that_present_qId) {
        if (!(this_present_qId && that_present_qId))
          return false;
        if (!this.qId.equals(that.qId))
          return false;
      }

      boolean this_present_program = true && this.isSetProgram();
      boolean that_present_program = true && that.isSetProgram();
      if (this_present_program || that_present_program) {
        if (!(this_present_program && that_present_program))
          return false;
        if (!this.program.equals(that.program))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQId()) ? 131071 : 524287);
      if (isSetQId())
        hashCode = hashCode * 8191 + qId.hashCode();

      hashCode = hashCode * 8191 + ((isSetProgram()) ? 131071 : 524287);
      if (isSetProgram())
        hashCode = hashCode * 8191 + program.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queueProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQId()).compareTo(other.isSetQId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qId, other.qId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProgram()).compareTo(other.isSetProgram());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgram()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.program, other.program);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queueProgram_args(");
      boolean first = true;

      sb.append("qId:");
      if (this.qId == null) {
        sb.append("null");
      } else {
        sb.append(this.qId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("program:");
      if (this.program == null) {
        sb.append("null");
      } else {
        sb.append(this.program);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (program != null) {
        program.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queueProgram_argsStandardScheme getScheme() {
        return new queueProgram_argsStandardScheme();
      }
    }

    private static class queueProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queueProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qId = iprot.readString();
                struct.setQIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROGRAM
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.program = new at.enfilo.def.transfer.dto.ProgramDTO();
                struct.program.read(iprot);
                struct.setProgramIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qId != null) {
          oprot.writeFieldBegin(Q_ID_FIELD_DESC);
          oprot.writeString(struct.qId);
          oprot.writeFieldEnd();
        }
        if (struct.program != null) {
          oprot.writeFieldBegin(PROGRAM_FIELD_DESC);
          struct.program.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queueProgram_argsTupleScheme getScheme() {
        return new queueProgram_argsTupleScheme();
      }
    }

    private static class queueProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queueProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQId()) {
          optionals.set(0);
        }
        if (struct.isSetProgram()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQId()) {
          oprot.writeString(struct.qId);
        }
        if (struct.isSetProgram()) {
          struct.program.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.qId = iprot.readString();
          struct.setQIdIsSet(true);
        }
        if (incoming.get(1)) {
          struct.program = new at.enfilo.def.transfer.dto.ProgramDTO();
          struct.program.read(iprot);
          struct.setProgramIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queueProgram_result implements org.apache.thrift.TBase<queueProgram_result, queueProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<queueProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queueProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queueProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queueProgram_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queueProgram_result.class, metaDataMap);
    }

    public queueProgram_result() {
    }

    public queueProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queueProgram_result(queueProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queueProgram_result deepCopy() {
      return new queueProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queueProgram_result)
        return this.equals((queueProgram_result)that);
      return false;
    }

    public boolean equals(queueProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queueProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queueProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queueProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queueProgram_resultStandardScheme getScheme() {
        return new queueProgram_resultStandardScheme();
      }
    }

    private static class queueProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queueProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queueProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queueProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queueProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queueProgram_resultTupleScheme getScheme() {
        return new queueProgram_resultTupleScheme();
      }
    }

    private static class queueProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queueProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queueProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queueProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queuePrograms_args implements org.apache.thrift.TBase<queuePrograms_args, queuePrograms_args._Fields>, java.io.Serializable, Cloneable, Comparable<queuePrograms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queuePrograms_args");

    private static final org.apache.thrift.protocol.TField Q_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROGRAMS_FIELD_DESC = new org.apache.thrift.protocol.TField("programs", org.apache.thrift.protocol.TType.LIST, (short)2);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queuePrograms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queuePrograms_argsTupleSchemeFactory();

    private java.lang.String qId; // required
    private java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q_ID((short)1, "qId"),
      PROGRAMS((short)2, "programs");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q_ID
            return Q_ID;
          case 2: // PROGRAMS
            return PROGRAMS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q_ID, new org.apache.thrift.meta_data.FieldMetaData("qId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PROGRAMS, new org.apache.thrift.meta_data.FieldMetaData("programs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.transfer.dto.ProgramDTO.class))));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queuePrograms_args.class, metaDataMap);
    }

    public queuePrograms_args() {
    }

    public queuePrograms_args(
      java.lang.String qId,
      java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs)
    {
      this();
      this.qId = qId;
      this.programs = programs;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queuePrograms_args(queuePrograms_args other) {
      if (other.isSetQId()) {
        this.qId = other.qId;
      }
      if (other.isSetPrograms()) {
        java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> __this__programs = new java.util.ArrayList<at.enfilo.def.transfer.dto.ProgramDTO>(other.programs.size());
        for (at.enfilo.def.transfer.dto.ProgramDTO other_element : other.programs) {
          __this__programs.add(new at.enfilo.def.transfer.dto.ProgramDTO(other_element));
        }
        this.programs = __this__programs;
      }
    }

    public queuePrograms_args deepCopy() {
      return new queuePrograms_args(this);
    }

    @Override
    public void clear() {
      this.qId = null;
      this.programs = null;
    }

    public java.lang.String getQId() {
      return this.qId;
    }

    public void setQId(java.lang.String qId) {
      this.qId = qId;
    }

    public void unsetQId() {
      this.qId = null;
    }

    /** Returns true if field qId is set (has been assigned a value) and false otherwise */
    public boolean isSetQId() {
      return this.qId != null;
    }

    public void setQIdIsSet(boolean value) {
      if (!value) {
        this.qId = null;
      }
    }

    public int getProgramsSize() {
      return (this.programs == null) ? 0 : this.programs.size();
    }

    public java.util.Iterator<at.enfilo.def.transfer.dto.ProgramDTO> getProgramsIterator() {
      return (this.programs == null) ? null : this.programs.iterator();
    }

    public void addToPrograms(at.enfilo.def.transfer.dto.ProgramDTO elem) {
      if (this.programs == null) {
        this.programs = new java.util.ArrayList<at.enfilo.def.transfer.dto.ProgramDTO>();
      }
      this.programs.add(elem);
    }

    public java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> getPrograms() {
      return this.programs;
    }

    public void setPrograms(java.util.List<at.enfilo.def.transfer.dto.ProgramDTO> programs) {
      this.programs = programs;
    }

    public void unsetPrograms() {
      this.programs = null;
    }

    /** Returns true if field programs is set (has been assigned a value) and false otherwise */
    public boolean isSetPrograms() {
      return this.programs != null;
    }

    public void setProgramsIsSet(boolean value) {
      if (!value) {
        this.programs = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case Q_ID:
        if (value == null) {
          unsetQId();
        } else {
          setQId((java.lang.String)value);
        }
        break;

      case PROGRAMS:
        if (value == null) {
          unsetPrograms();
        } else {
          setPrograms((java.util.List<at.enfilo.def.transfer.dto.ProgramDTO>)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case Q_ID:
        return getQId();

      case PROGRAMS:
        return getPrograms();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case Q_ID:
        return isSetQId();
      case PROGRAMS:
        return isSetPrograms();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queuePrograms_args)
        return this.equals((queuePrograms_args)that);
      return false;
    }

    public boolean equals(queuePrograms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qId = true && this.isSetQId();
      boolean that_present_qId = true && that.isSetQId();
      if (this_present_qId || that_present_qId) {
        if (!(this_present_qId && that_present_qId))
          return false;
        if (!this.qId.equals(that.qId))
          return false;
      }

      boolean this_present_programs = true && this.isSetPrograms();
      boolean that_present_programs = true && that.isSetPrograms();
      if (this_present_programs || that_present_programs) {
        if (!(this_present_programs && that_present_programs))
          return false;
        if (!this.programs.equals(that.programs))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQId()) ? 131071 : 524287);
      if (isSetQId())
        hashCode = hashCode * 8191 + qId.hashCode();

      hashCode = hashCode * 8191 + ((isSetPrograms()) ? 131071 : 524287);
      if (isSetPrograms())
        hashCode = hashCode * 8191 + programs.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queuePrograms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQId()).compareTo(other.isSetQId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qId, other.qId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetPrograms()).compareTo(other.isSetPrograms());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPrograms()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programs, other.programs);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queuePrograms_args(");
      boolean first = true;

      sb.append("qId:");
      if (this.qId == null) {
        sb.append("null");
      } else {
        sb.append(this.qId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("programs:");
      if (this.programs == null) {
        sb.append("null");
      } else {
        sb.append(this.programs);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queuePrograms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queuePrograms_argsStandardScheme getScheme() {
        return new queuePrograms_argsStandardScheme();
      }
    }

    private static class queuePrograms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<queuePrograms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queuePrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qId = iprot.readString();
                struct.setQIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROGRAMS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                  struct.programs = new java.util.ArrayList<at.enfilo.def.transfer.dto.ProgramDTO>(_list0.size);
                  at.enfilo.def.transfer.dto.ProgramDTO _elem1;
                  for (int _i2 = 0; _i2 < _list0.size; ++_i2)
                  {
                    _elem1 = new at.enfilo.def.transfer.dto.ProgramDTO();
                    _elem1.read(iprot);
                    struct.programs.add(_elem1);
                  }
                  iprot.readListEnd();
                }
                struct.setProgramsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queuePrograms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qId != null) {
          oprot.writeFieldBegin(Q_ID_FIELD_DESC);
          oprot.writeString(struct.qId);
          oprot.writeFieldEnd();
        }
        if (struct.programs != null) {
          oprot.writeFieldBegin(PROGRAMS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.programs.size()));
            for (at.enfilo.def.transfer.dto.ProgramDTO _iter3 : struct.programs)
            {
              _iter3.write(oprot);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queuePrograms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queuePrograms_argsTupleScheme getScheme() {
        return new queuePrograms_argsTupleScheme();
      }
    }

    private static class queuePrograms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<queuePrograms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queuePrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQId()) {
          optionals.set(0);
        }
        if (struct.isSetPrograms()) {
          optionals.set(1);
        }
        oprot.writeBitSet(optionals, 2);
        if (struct.isSetQId()) {
          oprot.writeString(struct.qId);
        }
        if (struct.isSetPrograms()) {
          {
            oprot.writeI32(struct.programs.size());
            for (at.enfilo.def.transfer.dto.ProgramDTO _iter4 : struct.programs)
            {
              _iter4.write(oprot);
            }
          }
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queuePrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(2);
        if (incoming.get(0)) {
          struct.qId = iprot.readString();
          struct.setQIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list5 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
            struct.programs = new java.util.ArrayList<at.enfilo.def.transfer.dto.ProgramDTO>(_list5.size);
            at.enfilo.def.transfer.dto.ProgramDTO _elem6;
            for (int _i7 = 0; _i7 < _list5.size; ++_i7)
            {
              _elem6 = new at.enfilo.def.transfer.dto.ProgramDTO();
              _elem6.read(iprot);
              struct.programs.add(_elem6);
            }
          }
          struct.setProgramsIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class queuePrograms_result implements org.apache.thrift.TBase<queuePrograms_result, queuePrograms_result._Fields>, java.io.Serializable, Cloneable, Comparable<queuePrograms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("queuePrograms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new queuePrograms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new queuePrograms_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(queuePrograms_result.class, metaDataMap);
    }

    public queuePrograms_result() {
    }

    public queuePrograms_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public queuePrograms_result(queuePrograms_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public queuePrograms_result deepCopy() {
      return new queuePrograms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof queuePrograms_result)
        return this.equals((queuePrograms_result)that);
      return false;
    }

    public boolean equals(queuePrograms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(queuePrograms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("queuePrograms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class queuePrograms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queuePrograms_resultStandardScheme getScheme() {
        return new queuePrograms_resultStandardScheme();
      }
    }

    private static class queuePrograms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<queuePrograms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, queuePrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, queuePrograms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class queuePrograms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public queuePrograms_resultTupleScheme getScheme() {
        return new queuePrograms_resultTupleScheme();
      }
    }

    private static class queuePrograms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<queuePrograms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, queuePrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, queuePrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class movePrograms_args implements org.apache.thrift.TBase<movePrograms_args, movePrograms_args._Fields>, java.io.Serializable, Cloneable, Comparable<movePrograms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("movePrograms_args");

    private static final org.apache.thrift.protocol.TField Q_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("qId", org.apache.thrift.protocol.TType.STRING, (short)1);
    private static final org.apache.thrift.protocol.TField PROGRAM_IDS_FIELD_DESC = new org.apache.thrift.protocol.TField("programIds", org.apache.thrift.protocol.TType.LIST, (short)2);
    private static final org.apache.thrift.protocol.TField TARGET_NODE_ENDPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("targetNodeEndpoint", org.apache.thrift.protocol.TType.STRUCT, (short)3);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new movePrograms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new movePrograms_argsTupleSchemeFactory();

    private java.lang.String qId; // required
    private java.util.List<java.lang.String> programIds; // required
    private at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      Q_ID((short)1, "qId"),
      PROGRAM_IDS((short)2, "programIds"),
      TARGET_NODE_ENDPOINT((short)3, "targetNodeEndpoint");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // Q_ID
            return Q_ID;
          case 2: // PROGRAM_IDS
            return PROGRAM_IDS;
          case 3: // TARGET_NODE_ENDPOINT
            return TARGET_NODE_ENDPOINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.Q_ID, new org.apache.thrift.meta_data.FieldMetaData("qId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      tmpMap.put(_Fields.PROGRAM_IDS, new org.apache.thrift.meta_data.FieldMetaData("programIds", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
              new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING              , "Id"))));
      tmpMap.put(_Fields.TARGET_NODE_ENDPOINT, new org.apache.thrift.meta_data.FieldMetaData("targetNodeEndpoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.communication.dto.ServiceEndpointDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(movePrograms_args.class, metaDataMap);
    }

    public movePrograms_args() {
    }

    public movePrograms_args(
      java.lang.String qId,
      java.util.List<java.lang.String> programIds,
      at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint)
    {
      this();
      this.qId = qId;
      this.programIds = programIds;
      this.targetNodeEndpoint = targetNodeEndpoint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public movePrograms_args(movePrograms_args other) {
      if (other.isSetQId()) {
        this.qId = other.qId;
      }
      if (other.isSetProgramIds()) {
        java.util.List<java.lang.String> __this__programIds = new java.util.ArrayList<java.lang.String>(other.programIds.size());
        for (java.lang.String other_element : other.programIds) {
          __this__programIds.add(other_element);
        }
        this.programIds = __this__programIds;
      }
      if (other.isSetTargetNodeEndpoint()) {
        this.targetNodeEndpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO(other.targetNodeEndpoint);
      }
    }

    public movePrograms_args deepCopy() {
      return new movePrograms_args(this);
    }

    @Override
    public void clear() {
      this.qId = null;
      this.programIds = null;
      this.targetNodeEndpoint = null;
    }

    public java.lang.String getQId() {
      return this.qId;
    }

    public void setQId(java.lang.String qId) {
      this.qId = qId;
    }

    public void unsetQId() {
      this.qId = null;
    }

    /** Returns true if field qId is set (has been assigned a value) and false otherwise */
    public boolean isSetQId() {
      return this.qId != null;
    }

    public void setQIdIsSet(boolean value) {
      if (!value) {
        this.qId = null;
      }
    }

    public int getProgramIdsSize() {
      return (this.programIds == null) ? 0 : this.programIds.size();
    }

    public java.util.Iterator<java.lang.String> getProgramIdsIterator() {
      return (this.programIds == null) ? null : this.programIds.iterator();
    }

    public void addToProgramIds(java.lang.String elem) {
      if (this.programIds == null) {
        this.programIds = new java.util.ArrayList<java.lang.String>();
      }
      this.programIds.add(elem);
    }

    public java.util.List<java.lang.String> getProgramIds() {
      return this.programIds;
    }

    public void setProgramIds(java.util.List<java.lang.String> programIds) {
      this.programIds = programIds;
    }

    public void unsetProgramIds() {
      this.programIds = null;
    }

    /** Returns true if field programIds is set (has been assigned a value) and false otherwise */
    public boolean isSetProgramIds() {
      return this.programIds != null;
    }

    public void setProgramIdsIsSet(boolean value) {
      if (!value) {
        this.programIds = null;
      }
    }

    public at.enfilo.def.communication.dto.ServiceEndpointDTO getTargetNodeEndpoint() {
      return this.targetNodeEndpoint;
    }

    public void setTargetNodeEndpoint(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEndpoint) {
      this.targetNodeEndpoint = targetNodeEndpoint;
    }

    public void unsetTargetNodeEndpoint() {
      this.targetNodeEndpoint = null;
    }

    /** Returns true if field targetNodeEndpoint is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetNodeEndpoint() {
      return this.targetNodeEndpoint != null;
    }

    public void setTargetNodeEndpointIsSet(boolean value) {
      if (!value) {
        this.targetNodeEndpoint = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case Q_ID:
        if (value == null) {
          unsetQId();
        } else {
          setQId((java.lang.String)value);
        }
        break;

      case PROGRAM_IDS:
        if (value == null) {
          unsetProgramIds();
        } else {
          setProgramIds((java.util.List<java.lang.String>)value);
        }
        break;

      case TARGET_NODE_ENDPOINT:
        if (value == null) {
          unsetTargetNodeEndpoint();
        } else {
          setTargetNodeEndpoint((at.enfilo.def.communication.dto.ServiceEndpointDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case Q_ID:
        return getQId();

      case PROGRAM_IDS:
        return getProgramIds();

      case TARGET_NODE_ENDPOINT:
        return getTargetNodeEndpoint();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case Q_ID:
        return isSetQId();
      case PROGRAM_IDS:
        return isSetProgramIds();
      case TARGET_NODE_ENDPOINT:
        return isSetTargetNodeEndpoint();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof movePrograms_args)
        return this.equals((movePrograms_args)that);
      return false;
    }

    public boolean equals(movePrograms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_qId = true && this.isSetQId();
      boolean that_present_qId = true && that.isSetQId();
      if (this_present_qId || that_present_qId) {
        if (!(this_present_qId && that_present_qId))
          return false;
        if (!this.qId.equals(that.qId))
          return false;
      }

      boolean this_present_programIds = true && this.isSetProgramIds();
      boolean that_present_programIds = true && that.isSetProgramIds();
      if (this_present_programIds || that_present_programIds) {
        if (!(this_present_programIds && that_present_programIds))
          return false;
        if (!this.programIds.equals(that.programIds))
          return false;
      }

      boolean this_present_targetNodeEndpoint = true && this.isSetTargetNodeEndpoint();
      boolean that_present_targetNodeEndpoint = true && that.isSetTargetNodeEndpoint();
      if (this_present_targetNodeEndpoint || that_present_targetNodeEndpoint) {
        if (!(this_present_targetNodeEndpoint && that_present_targetNodeEndpoint))
          return false;
        if (!this.targetNodeEndpoint.equals(that.targetNodeEndpoint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetQId()) ? 131071 : 524287);
      if (isSetQId())
        hashCode = hashCode * 8191 + qId.hashCode();

      hashCode = hashCode * 8191 + ((isSetProgramIds()) ? 131071 : 524287);
      if (isSetProgramIds())
        hashCode = hashCode * 8191 + programIds.hashCode();

      hashCode = hashCode * 8191 + ((isSetTargetNodeEndpoint()) ? 131071 : 524287);
      if (isSetTargetNodeEndpoint())
        hashCode = hashCode * 8191 + targetNodeEndpoint.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(movePrograms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetQId()).compareTo(other.isSetQId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetQId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.qId, other.qId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetProgramIds()).compareTo(other.isSetProgramIds());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetProgramIds()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.programIds, other.programIds);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      lastComparison = java.lang.Boolean.valueOf(isSetTargetNodeEndpoint()).compareTo(other.isSetTargetNodeEndpoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetNodeEndpoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetNodeEndpoint, other.targetNodeEndpoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("movePrograms_args(");
      boolean first = true;

      sb.append("qId:");
      if (this.qId == null) {
        sb.append("null");
      } else {
        sb.append(this.qId);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("programIds:");
      if (this.programIds == null) {
        sb.append("null");
      } else {
        sb.append(this.programIds);
      }
      first = false;
      if (!first) sb.append(", ");
      sb.append("targetNodeEndpoint:");
      if (this.targetNodeEndpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.targetNodeEndpoint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (targetNodeEndpoint != null) {
        targetNodeEndpoint.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class movePrograms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public movePrograms_argsStandardScheme getScheme() {
        return new movePrograms_argsStandardScheme();
      }
    }

    private static class movePrograms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<movePrograms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, movePrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // Q_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.qId = iprot.readString();
                struct.setQIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 2: // PROGRAM_IDS
              if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
                {
                  org.apache.thrift.protocol.TList _list8 = iprot.readListBegin();
                  struct.programIds = new java.util.ArrayList<java.lang.String>(_list8.size);
                  java.lang.String _elem9;
                  for (int _i10 = 0; _i10 < _list8.size; ++_i10)
                  {
                    _elem9 = iprot.readString();
                    struct.programIds.add(_elem9);
                  }
                  iprot.readListEnd();
                }
                struct.setProgramIdsIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            case 3: // TARGET_NODE_ENDPOINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.targetNodeEndpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO();
                struct.targetNodeEndpoint.read(iprot);
                struct.setTargetNodeEndpointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, movePrograms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.qId != null) {
          oprot.writeFieldBegin(Q_ID_FIELD_DESC);
          oprot.writeString(struct.qId);
          oprot.writeFieldEnd();
        }
        if (struct.programIds != null) {
          oprot.writeFieldBegin(PROGRAM_IDS_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.programIds.size()));
            for (java.lang.String _iter11 : struct.programIds)
            {
              oprot.writeString(_iter11);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
        if (struct.targetNodeEndpoint != null) {
          oprot.writeFieldBegin(TARGET_NODE_ENDPOINT_FIELD_DESC);
          struct.targetNodeEndpoint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class movePrograms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public movePrograms_argsTupleScheme getScheme() {
        return new movePrograms_argsTupleScheme();
      }
    }

    private static class movePrograms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<movePrograms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, movePrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetQId()) {
          optionals.set(0);
        }
        if (struct.isSetProgramIds()) {
          optionals.set(1);
        }
        if (struct.isSetTargetNodeEndpoint()) {
          optionals.set(2);
        }
        oprot.writeBitSet(optionals, 3);
        if (struct.isSetQId()) {
          oprot.writeString(struct.qId);
        }
        if (struct.isSetProgramIds()) {
          {
            oprot.writeI32(struct.programIds.size());
            for (java.lang.String _iter12 : struct.programIds)
            {
              oprot.writeString(_iter12);
            }
          }
        }
        if (struct.isSetTargetNodeEndpoint()) {
          struct.targetNodeEndpoint.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, movePrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(3);
        if (incoming.get(0)) {
          struct.qId = iprot.readString();
          struct.setQIdIsSet(true);
        }
        if (incoming.get(1)) {
          {
            org.apache.thrift.protocol.TList _list13 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            struct.programIds = new java.util.ArrayList<java.lang.String>(_list13.size);
            java.lang.String _elem14;
            for (int _i15 = 0; _i15 < _list13.size; ++_i15)
            {
              _elem14 = iprot.readString();
              struct.programIds.add(_elem14);
            }
          }
          struct.setProgramIdsIsSet(true);
        }
        if (incoming.get(2)) {
          struct.targetNodeEndpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO();
          struct.targetNodeEndpoint.read(iprot);
          struct.setTargetNodeEndpointIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class movePrograms_result implements org.apache.thrift.TBase<movePrograms_result, movePrograms_result._Fields>, java.io.Serializable, Cloneable, Comparable<movePrograms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("movePrograms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new movePrograms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new movePrograms_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(movePrograms_result.class, metaDataMap);
    }

    public movePrograms_result() {
    }

    public movePrograms_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public movePrograms_result(movePrograms_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public movePrograms_result deepCopy() {
      return new movePrograms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof movePrograms_result)
        return this.equals((movePrograms_result)that);
      return false;
    }

    public boolean equals(movePrograms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(movePrograms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("movePrograms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class movePrograms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public movePrograms_resultStandardScheme getScheme() {
        return new movePrograms_resultStandardScheme();
      }
    }

    private static class movePrograms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<movePrograms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, movePrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, movePrograms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class movePrograms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public movePrograms_resultTupleScheme getScheme() {
        return new movePrograms_resultTupleScheme();
      }
    }

    private static class movePrograms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<movePrograms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, movePrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, movePrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class moveAllPrograms_args implements org.apache.thrift.TBase<moveAllPrograms_args, moveAllPrograms_args._Fields>, java.io.Serializable, Cloneable, Comparable<moveAllPrograms_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveAllPrograms_args");

    private static final org.apache.thrift.protocol.TField TARGET_NODE_ENPOINT_FIELD_DESC = new org.apache.thrift.protocol.TField("targetNodeEnpoint", org.apache.thrift.protocol.TType.STRUCT, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new moveAllPrograms_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new moveAllPrograms_argsTupleSchemeFactory();

    private at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      TARGET_NODE_ENPOINT((short)1, "targetNodeEnpoint");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // TARGET_NODE_ENPOINT
            return TARGET_NODE_ENPOINT;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.TARGET_NODE_ENPOINT, new org.apache.thrift.meta_data.FieldMetaData("targetNodeEnpoint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, at.enfilo.def.communication.dto.ServiceEndpointDTO.class)));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveAllPrograms_args.class, metaDataMap);
    }

    public moveAllPrograms_args() {
    }

    public moveAllPrograms_args(
      at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint)
    {
      this();
      this.targetNodeEnpoint = targetNodeEnpoint;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveAllPrograms_args(moveAllPrograms_args other) {
      if (other.isSetTargetNodeEnpoint()) {
        this.targetNodeEnpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO(other.targetNodeEnpoint);
      }
    }

    public moveAllPrograms_args deepCopy() {
      return new moveAllPrograms_args(this);
    }

    @Override
    public void clear() {
      this.targetNodeEnpoint = null;
    }

    public at.enfilo.def.communication.dto.ServiceEndpointDTO getTargetNodeEnpoint() {
      return this.targetNodeEnpoint;
    }

    public void setTargetNodeEnpoint(at.enfilo.def.communication.dto.ServiceEndpointDTO targetNodeEnpoint) {
      this.targetNodeEnpoint = targetNodeEnpoint;
    }

    public void unsetTargetNodeEnpoint() {
      this.targetNodeEnpoint = null;
    }

    /** Returns true if field targetNodeEnpoint is set (has been assigned a value) and false otherwise */
    public boolean isSetTargetNodeEnpoint() {
      return this.targetNodeEnpoint != null;
    }

    public void setTargetNodeEnpointIsSet(boolean value) {
      if (!value) {
        this.targetNodeEnpoint = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case TARGET_NODE_ENPOINT:
        if (value == null) {
          unsetTargetNodeEnpoint();
        } else {
          setTargetNodeEnpoint((at.enfilo.def.communication.dto.ServiceEndpointDTO)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case TARGET_NODE_ENPOINT:
        return getTargetNodeEnpoint();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case TARGET_NODE_ENPOINT:
        return isSetTargetNodeEnpoint();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof moveAllPrograms_args)
        return this.equals((moveAllPrograms_args)that);
      return false;
    }

    public boolean equals(moveAllPrograms_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_targetNodeEnpoint = true && this.isSetTargetNodeEnpoint();
      boolean that_present_targetNodeEnpoint = true && that.isSetTargetNodeEnpoint();
      if (this_present_targetNodeEnpoint || that_present_targetNodeEnpoint) {
        if (!(this_present_targetNodeEnpoint && that_present_targetNodeEnpoint))
          return false;
        if (!this.targetNodeEnpoint.equals(that.targetNodeEnpoint))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetTargetNodeEnpoint()) ? 131071 : 524287);
      if (isSetTargetNodeEnpoint())
        hashCode = hashCode * 8191 + targetNodeEnpoint.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(moveAllPrograms_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetTargetNodeEnpoint()).compareTo(other.isSetTargetNodeEnpoint());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetTargetNodeEnpoint()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.targetNodeEnpoint, other.targetNodeEnpoint);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("moveAllPrograms_args(");
      boolean first = true;

      sb.append("targetNodeEnpoint:");
      if (this.targetNodeEnpoint == null) {
        sb.append("null");
      } else {
        sb.append(this.targetNodeEnpoint);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
      if (targetNodeEnpoint != null) {
        targetNodeEnpoint.validate();
      }
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveAllPrograms_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public moveAllPrograms_argsStandardScheme getScheme() {
        return new moveAllPrograms_argsStandardScheme();
      }
    }

    private static class moveAllPrograms_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<moveAllPrograms_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveAllPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // TARGET_NODE_ENPOINT
              if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
                struct.targetNodeEnpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO();
                struct.targetNodeEnpoint.read(iprot);
                struct.setTargetNodeEnpointIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveAllPrograms_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.targetNodeEnpoint != null) {
          oprot.writeFieldBegin(TARGET_NODE_ENPOINT_FIELD_DESC);
          struct.targetNodeEnpoint.write(oprot);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveAllPrograms_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public moveAllPrograms_argsTupleScheme getScheme() {
        return new moveAllPrograms_argsTupleScheme();
      }
    }

    private static class moveAllPrograms_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<moveAllPrograms_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveAllPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetTargetNodeEnpoint()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetTargetNodeEnpoint()) {
          struct.targetNodeEnpoint.write(oprot);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveAllPrograms_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.targetNodeEnpoint = new at.enfilo.def.communication.dto.ServiceEndpointDTO();
          struct.targetNodeEnpoint.read(iprot);
          struct.setTargetNodeEnpointIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class moveAllPrograms_result implements org.apache.thrift.TBase<moveAllPrograms_result, moveAllPrograms_result._Fields>, java.io.Serializable, Cloneable, Comparable<moveAllPrograms_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("moveAllPrograms_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new moveAllPrograms_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new moveAllPrograms_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(moveAllPrograms_result.class, metaDataMap);
    }

    public moveAllPrograms_result() {
    }

    public moveAllPrograms_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public moveAllPrograms_result(moveAllPrograms_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public moveAllPrograms_result deepCopy() {
      return new moveAllPrograms_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof moveAllPrograms_result)
        return this.equals((moveAllPrograms_result)that);
      return false;
    }

    public boolean equals(moveAllPrograms_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(moveAllPrograms_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("moveAllPrograms_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class moveAllPrograms_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public moveAllPrograms_resultStandardScheme getScheme() {
        return new moveAllPrograms_resultStandardScheme();
      }
    }

    private static class moveAllPrograms_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<moveAllPrograms_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, moveAllPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, moveAllPrograms_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class moveAllPrograms_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public moveAllPrograms_resultTupleScheme getScheme() {
        return new moveAllPrograms_resultTupleScheme();
      }
    }

    private static class moveAllPrograms_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<moveAllPrograms_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, moveAllPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, moveAllPrograms_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchFinishedProgram_args implements org.apache.thrift.TBase<fetchFinishedProgram_args, fetchFinishedProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<fetchFinishedProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchFinishedProgram_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchFinishedProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchFinishedProgram_argsTupleSchemeFactory();

    private java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchFinishedProgram_args.class, metaDataMap);
    }

    public fetchFinishedProgram_args() {
    }

    public fetchFinishedProgram_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchFinishedProgram_args(fetchFinishedProgram_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public fetchFinishedProgram_args deepCopy() {
      return new fetchFinishedProgram_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public void setPId(java.lang.String pId) {
      this.pId = pId;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchFinishedProgram_args)
        return this.equals((fetchFinishedProgram_args)that);
      return false;
    }

    public boolean equals(fetchFinishedProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchFinishedProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchFinishedProgram_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchFinishedProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchFinishedProgram_argsStandardScheme getScheme() {
        return new fetchFinishedProgram_argsStandardScheme();
      }
    }

    private static class fetchFinishedProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchFinishedProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchFinishedProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchFinishedProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchFinishedProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchFinishedProgram_argsTupleScheme getScheme() {
        return new fetchFinishedProgram_argsTupleScheme();
      }
    }

    private static class fetchFinishedProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchFinishedProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchFinishedProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchFinishedProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class fetchFinishedProgram_result implements org.apache.thrift.TBase<fetchFinishedProgram_result, fetchFinishedProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<fetchFinishedProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("fetchFinishedProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new fetchFinishedProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new fetchFinishedProgram_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(fetchFinishedProgram_result.class, metaDataMap);
    }

    public fetchFinishedProgram_result() {
    }

    public fetchFinishedProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public fetchFinishedProgram_result(fetchFinishedProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public fetchFinishedProgram_result deepCopy() {
      return new fetchFinishedProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof fetchFinishedProgram_result)
        return this.equals((fetchFinishedProgram_result)that);
      return false;
    }

    public boolean equals(fetchFinishedProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(fetchFinishedProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("fetchFinishedProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class fetchFinishedProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchFinishedProgram_resultStandardScheme getScheme() {
        return new fetchFinishedProgram_resultStandardScheme();
      }
    }

    private static class fetchFinishedProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<fetchFinishedProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, fetchFinishedProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, fetchFinishedProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class fetchFinishedProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public fetchFinishedProgram_resultTupleScheme getScheme() {
        return new fetchFinishedProgram_resultTupleScheme();
      }
    }

    private static class fetchFinishedProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<fetchFinishedProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, fetchFinishedProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, fetchFinishedProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortProgram_args implements org.apache.thrift.TBase<abortProgram_args, abortProgram_args._Fields>, java.io.Serializable, Cloneable, Comparable<abortProgram_args>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortProgram_args");

    private static final org.apache.thrift.protocol.TField P_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("pId", org.apache.thrift.protocol.TType.STRING, (short)1);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortProgram_argsStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortProgram_argsTupleSchemeFactory();

    private java.lang.String pId; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      P_ID((short)1, "pId");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 1: // P_ID
            return P_ID;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.P_ID, new org.apache.thrift.meta_data.FieldMetaData("pId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "Id")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortProgram_args.class, metaDataMap);
    }

    public abortProgram_args() {
    }

    public abortProgram_args(
      java.lang.String pId)
    {
      this();
      this.pId = pId;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortProgram_args(abortProgram_args other) {
      if (other.isSetPId()) {
        this.pId = other.pId;
      }
    }

    public abortProgram_args deepCopy() {
      return new abortProgram_args(this);
    }

    @Override
    public void clear() {
      this.pId = null;
    }

    public java.lang.String getPId() {
      return this.pId;
    }

    public void setPId(java.lang.String pId) {
      this.pId = pId;
    }

    public void unsetPId() {
      this.pId = null;
    }

    /** Returns true if field pId is set (has been assigned a value) and false otherwise */
    public boolean isSetPId() {
      return this.pId != null;
    }

    public void setPIdIsSet(boolean value) {
      if (!value) {
        this.pId = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case P_ID:
        if (value == null) {
          unsetPId();
        } else {
          setPId((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case P_ID:
        return getPId();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case P_ID:
        return isSetPId();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortProgram_args)
        return this.equals((abortProgram_args)that);
      return false;
    }

    public boolean equals(abortProgram_args that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_pId = true && this.isSetPId();
      boolean that_present_pId = true && that.isSetPId();
      if (this_present_pId || that_present_pId) {
        if (!(this_present_pId && that_present_pId))
          return false;
        if (!this.pId.equals(that.pId))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetPId()) ? 131071 : 524287);
      if (isSetPId())
        hashCode = hashCode * 8191 + pId.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortProgram_args other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetPId()).compareTo(other.isSetPId());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetPId()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.pId, other.pId);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
    }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortProgram_args(");
      boolean first = true;

      sb.append("pId:");
      if (this.pId == null) {
        sb.append("null");
      } else {
        sb.append(this.pId);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortProgram_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_argsStandardScheme getScheme() {
        return new abortProgram_argsStandardScheme();
      }
    }

    private static class abortProgram_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortProgram_args> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 1: // P_ID
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.pId = iprot.readString();
                struct.setPIdIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortProgram_args struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.pId != null) {
          oprot.writeFieldBegin(P_ID_FIELD_DESC);
          oprot.writeString(struct.pId);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortProgram_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_argsTupleScheme getScheme() {
        return new abortProgram_argsTupleScheme();
      }
    }

    private static class abortProgram_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortProgram_args> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetPId()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetPId()) {
          oprot.writeString(struct.pId);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortProgram_args struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.pId = iprot.readString();
          struct.setPIdIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

  public static class abortProgram_result implements org.apache.thrift.TBase<abortProgram_result, abortProgram_result._Fields>, java.io.Serializable, Cloneable, Comparable<abortProgram_result>   {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("abortProgram_result");

    private static final org.apache.thrift.protocol.TField SUCCESS_FIELD_DESC = new org.apache.thrift.protocol.TField("success", org.apache.thrift.protocol.TType.STRING, (short)0);

    private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new abortProgram_resultStandardSchemeFactory();
    private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new abortProgram_resultTupleSchemeFactory();

    private java.lang.String success; // required

    /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
      SUCCESS((short)0, "success");

      private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

      static {
        for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
          byName.put(field.getFieldName(), field);
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, or null if its not found.
       */
      public static _Fields findByThriftId(int fieldId) {
        switch(fieldId) {
          case 0: // SUCCESS
            return SUCCESS;
          default:
            return null;
        }
      }

      /**
       * Find the _Fields constant that matches fieldId, throwing an exception
       * if it is not found.
       */
      public static _Fields findByThriftIdOrThrow(int fieldId) {
        _Fields fields = findByThriftId(fieldId);
        if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
        return fields;
      }

      /**
       * Find the _Fields constant that matches name, or null if its not found.
       */
      public static _Fields findByName(java.lang.String name) {
        return byName.get(name);
      }

      private final short _thriftId;
      private final java.lang.String _fieldName;

      _Fields(short thriftId, java.lang.String fieldName) {
        _thriftId = thriftId;
        _fieldName = fieldName;
      }

      public short getThriftFieldId() {
        return _thriftId;
      }

      public java.lang.String getFieldName() {
        return _fieldName;
      }
    }

    // isset id assignments
    public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
    static {
      java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
      tmpMap.put(_Fields.SUCCESS, new org.apache.thrift.meta_data.FieldMetaData("success", org.apache.thrift.TFieldRequirementType.DEFAULT, 
          new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING          , "TicketId")));
      metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
      org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(abortProgram_result.class, metaDataMap);
    }

    public abortProgram_result() {
    }

    public abortProgram_result(
      java.lang.String success)
    {
      this();
      this.success = success;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public abortProgram_result(abortProgram_result other) {
      if (other.isSetSuccess()) {
        this.success = other.success;
      }
    }

    public abortProgram_result deepCopy() {
      return new abortProgram_result(this);
    }

    @Override
    public void clear() {
      this.success = null;
    }

    public java.lang.String getSuccess() {
      return this.success;
    }

    public void setSuccess(java.lang.String success) {
      this.success = success;
    }

    public void unsetSuccess() {
      this.success = null;
    }

    /** Returns true if field success is set (has been assigned a value) and false otherwise */
    public boolean isSetSuccess() {
      return this.success != null;
    }

    public void setSuccessIsSet(boolean value) {
      if (!value) {
        this.success = null;
      }
    }

    public void setFieldValue(_Fields field, java.lang.Object value) {
      switch (field) {
      case SUCCESS:
        if (value == null) {
          unsetSuccess();
        } else {
          setSuccess((java.lang.String)value);
        }
        break;

      }
    }

    public java.lang.Object getFieldValue(_Fields field) {
      switch (field) {
      case SUCCESS:
        return getSuccess();

      }
      throw new java.lang.IllegalStateException();
    }

    /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
    public boolean isSet(_Fields field) {
      if (field == null) {
        throw new java.lang.IllegalArgumentException();
      }

      switch (field) {
      case SUCCESS:
        return isSetSuccess();
      }
      throw new java.lang.IllegalStateException();
    }

    @Override
    public boolean equals(java.lang.Object that) {
      if (that == null)
        return false;
      if (that instanceof abortProgram_result)
        return this.equals((abortProgram_result)that);
      return false;
    }

    public boolean equals(abortProgram_result that) {
      if (that == null)
        return false;
      if (this == that)
        return true;

      boolean this_present_success = true && this.isSetSuccess();
      boolean that_present_success = true && that.isSetSuccess();
      if (this_present_success || that_present_success) {
        if (!(this_present_success && that_present_success))
          return false;
        if (!this.success.equals(that.success))
          return false;
      }

      return true;
    }

    @Override
    public int hashCode() {
      int hashCode = 1;

      hashCode = hashCode * 8191 + ((isSetSuccess()) ? 131071 : 524287);
      if (isSetSuccess())
        hashCode = hashCode * 8191 + success.hashCode();

      return hashCode;
    }

    @Override
    public int compareTo(abortProgram_result other) {
      if (!getClass().equals(other.getClass())) {
        return getClass().getName().compareTo(other.getClass().getName());
      }

      int lastComparison = 0;

      lastComparison = java.lang.Boolean.valueOf(isSetSuccess()).compareTo(other.isSetSuccess());
      if (lastComparison != 0) {
        return lastComparison;
      }
      if (isSetSuccess()) {
        lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.success, other.success);
        if (lastComparison != 0) {
          return lastComparison;
        }
      }
      return 0;
    }

    public _Fields fieldForId(int fieldId) {
      return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
      scheme(iprot).read(iprot, this);
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
      scheme(oprot).write(oprot, this);
      }

    @Override
    public java.lang.String toString() {
      java.lang.StringBuilder sb = new java.lang.StringBuilder("abortProgram_result(");
      boolean first = true;

      sb.append("success:");
      if (this.success == null) {
        sb.append("null");
      } else {
        sb.append(this.success);
      }
      first = false;
      sb.append(")");
      return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
      // check for required fields
      // check for sub-struct validity
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
      try {
        write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
      try {
        read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
      } catch (org.apache.thrift.TException te) {
        throw new java.io.IOException(te);
      }
    }

    private static class abortProgram_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_resultStandardScheme getScheme() {
        return new abortProgram_resultStandardScheme();
      }
    }

    private static class abortProgram_resultStandardScheme extends org.apache.thrift.scheme.StandardScheme<abortProgram_result> {

      public void read(org.apache.thrift.protocol.TProtocol iprot, abortProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField schemeField;
        iprot.readStructBegin();
        while (true)
        {
          schemeField = iprot.readFieldBegin();
          if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
            break;
          }
          switch (schemeField.id) {
            case 0: // SUCCESS
              if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
                struct.success = iprot.readString();
                struct.setSuccessIsSet(true);
              } else { 
                org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
              }
              break;
            default:
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
          }
          iprot.readFieldEnd();
        }
        iprot.readStructEnd();
        struct.validate();
      }

      public void write(org.apache.thrift.protocol.TProtocol oprot, abortProgram_result struct) throws org.apache.thrift.TException {
        struct.validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (struct.success != null) {
          oprot.writeFieldBegin(SUCCESS_FIELD_DESC);
          oprot.writeString(struct.success);
          oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
      }

    }

    private static class abortProgram_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
      public abortProgram_resultTupleScheme getScheme() {
        return new abortProgram_resultTupleScheme();
      }
    }

    private static class abortProgram_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<abortProgram_result> {

      @Override
      public void write(org.apache.thrift.protocol.TProtocol prot, abortProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet optionals = new java.util.BitSet();
        if (struct.isSetSuccess()) {
          optionals.set(0);
        }
        oprot.writeBitSet(optionals, 1);
        if (struct.isSetSuccess()) {
          oprot.writeString(struct.success);
        }
      }

      @Override
      public void read(org.apache.thrift.protocol.TProtocol prot, abortProgram_result struct) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
        java.util.BitSet incoming = iprot.readBitSet(1);
        if (incoming.get(0)) {
          struct.success = iprot.readString();
          struct.setSuccessIsSet(true);
        }
      }
    }

    private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
      return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
    }
  }

}
